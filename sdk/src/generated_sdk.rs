// The contents of this file are generated; do not modify them.

#[allow(unused_imports)]
use progenitor_client::{encode_path, RequestBuilderExt};
pub use progenitor_client::{ByteStream, Error, ResponseValue};
#[allow(unused_imports)]
use reqwest::header::{HeaderMap, HeaderValue};
pub mod types {
    use serde::{Deserialize, Serialize};
    #[allow(unused_imports)]
    use std::convert::TryFrom;
    /// An address tied to an address lot.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "An address tied to an address lot.",
    ///  "type": "object",
    ///  "required": [
    ///    "address",
    ///    "address_lot"
    ///  ],
    ///  "properties": {
    ///    "address": {
    ///      "description": "The address and prefix length of this address.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/IpNet"
    ///        }
    ///      ]
    ///    },
    ///    "address_lot": {
    ///      "description": "The address lot this address is drawn from.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Address {
        /// The address and prefix length of this address.
        pub address: IpNet,
        /// The address lot this address is drawn from.
        pub address_lot: NameOrId,
    }

    impl From<&Address> for Address {
        fn from(value: &Address) -> Self {
            value.clone()
        }
    }

    impl Address {
        pub fn builder() -> builder::Address {
            Default::default()
        }
    }

    /// A set of addresses associated with a port configuration.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A set of addresses associated with a port
    /// configuration.",
    ///  "type": "object",
    ///  "required": [
    ///    "addresses"
    ///  ],
    ///  "properties": {
    ///    "addresses": {
    ///      "description": "The set of addresses assigned to the port
    /// configuration.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Address"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct AddressConfig {
        /// The set of addresses assigned to the port configuration.
        pub addresses: Vec<Address>,
    }

    impl From<&AddressConfig> for AddressConfig {
        fn from(value: &AddressConfig) -> Self {
            value.clone()
        }
    }

    impl AddressConfig {
        pub fn builder() -> builder::AddressConfig {
            Default::default()
        }
    }

    /// Represents an address lot object, containing the id of the lot that can
    /// be used in other API calls.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Represents an address lot object, containing the id of
    /// the lot that can be used in other API calls.",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "kind",
    ///    "name",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "kind": {
    ///      "description": "Desired use of `AddressLot`",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/AddressLotKind"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct AddressLot {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// Desired use of `AddressLot`
        pub kind: AddressLotKind,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&AddressLot> for AddressLot {
        fn from(value: &AddressLot) -> Self {
            value.clone()
        }
    }

    impl AddressLot {
        pub fn builder() -> builder::AddressLot {
            Default::default()
        }
    }

    /// An address lot block is a part of an address lot and contains a range of
    /// addresses. The range is inclusive.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "An address lot block is a part of an address lot and
    /// contains a range of addresses. The range is inclusive.",
    ///  "type": "object",
    ///  "required": [
    ///    "first_address",
    ///    "id",
    ///    "last_address"
    ///  ],
    ///  "properties": {
    ///    "first_address": {
    ///      "description": "The first address of the block (inclusive).",
    ///      "type": "string",
    ///      "format": "ip"
    ///    },
    ///    "id": {
    ///      "description": "The id of the address lot block.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "last_address": {
    ///      "description": "The last address of the block (inclusive).",
    ///      "type": "string",
    ///      "format": "ip"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct AddressLotBlock {
        /// The first address of the block (inclusive).
        pub first_address: std::net::IpAddr,
        /// The id of the address lot block.
        pub id: uuid::Uuid,
        /// The last address of the block (inclusive).
        pub last_address: std::net::IpAddr,
    }

    impl From<&AddressLotBlock> for AddressLotBlock {
        fn from(value: &AddressLotBlock) -> Self {
            value.clone()
        }
    }

    impl AddressLotBlock {
        pub fn builder() -> builder::AddressLotBlock {
            Default::default()
        }
    }

    /// Parameters for creating an address lot block. Fist and last addresses
    /// are inclusive.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for creating an address lot block. Fist and
    /// last addresses are inclusive.",
    ///  "type": "object",
    ///  "required": [
    ///    "first_address",
    ///    "last_address"
    ///  ],
    ///  "properties": {
    ///    "first_address": {
    ///      "description": "The first address in the lot (inclusive).",
    ///      "type": "string",
    ///      "format": "ip"
    ///    },
    ///    "last_address": {
    ///      "description": "The last address in the lot (inclusive).",
    ///      "type": "string",
    ///      "format": "ip"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct AddressLotBlockCreate {
        /// The first address in the lot (inclusive).
        pub first_address: std::net::IpAddr,
        /// The last address in the lot (inclusive).
        pub last_address: std::net::IpAddr,
    }

    impl From<&AddressLotBlockCreate> for AddressLotBlockCreate {
        fn from(value: &AddressLotBlockCreate) -> Self {
            value.clone()
        }
    }

    impl AddressLotBlockCreate {
        pub fn builder() -> builder::AddressLotBlockCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/AddressLotBlock"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct AddressLotBlockResultsPage {
        /// list of items on this page of results
        pub items: Vec<AddressLotBlock>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&AddressLotBlockResultsPage> for AddressLotBlockResultsPage {
        fn from(value: &AddressLotBlockResultsPage) -> Self {
            value.clone()
        }
    }

    impl AddressLotBlockResultsPage {
        pub fn builder() -> builder::AddressLotBlockResultsPage {
            Default::default()
        }
    }

    /// Parameters for creating an address lot.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for creating an address lot.",
    ///  "type": "object",
    ///  "required": [
    ///    "blocks",
    ///    "description",
    ///    "kind",
    ///    "name"
    ///  ],
    ///  "properties": {
    ///    "blocks": {
    ///      "description": "The blocks to add along with the new address lot.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/AddressLotBlockCreate"
    ///      }
    ///    },
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "kind": {
    ///      "description": "The kind of address lot to create.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/AddressLotKind"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct AddressLotCreate {
        /// The blocks to add along with the new address lot.
        pub blocks: Vec<AddressLotBlockCreate>,
        pub description: String,
        /// The kind of address lot to create.
        pub kind: AddressLotKind,
        pub name: Name,
    }

    impl From<&AddressLotCreate> for AddressLotCreate {
        fn from(value: &AddressLotCreate) -> Self {
            value.clone()
        }
    }

    impl AddressLotCreate {
        pub fn builder() -> builder::AddressLotCreate {
            Default::default()
        }
    }

    /// An address lot and associated blocks resulting from creating an address
    /// lot.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "An address lot and associated blocks resulting from
    /// creating an address lot.",
    ///  "type": "object",
    ///  "required": [
    ///    "blocks",
    ///    "lot"
    ///  ],
    ///  "properties": {
    ///    "blocks": {
    ///      "description": "The address lot blocks that were created.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/AddressLotBlock"
    ///      }
    ///    },
    ///    "lot": {
    ///      "description": "The address lot that was created.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/AddressLot"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct AddressLotCreateResponse {
        /// The address lot blocks that were created.
        pub blocks: Vec<AddressLotBlock>,
        /// The address lot that was created.
        pub lot: AddressLot,
    }

    impl From<&AddressLotCreateResponse> for AddressLotCreateResponse {
        fn from(value: &AddressLotCreateResponse) -> Self {
            value.clone()
        }
    }

    impl AddressLotCreateResponse {
        pub fn builder() -> builder::AddressLotCreateResponse {
            Default::default()
        }
    }

    /// The kind associated with an address lot.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The kind associated with an address lot.",
    ///  "oneOf": [
    ///    {
    ///      "description": "Infrastructure address lots are used for network
    /// infrastructure like addresses assigned to rack switches.",
    ///      "type": "string",
    ///      "enum": [
    ///        "infra"
    ///      ]
    ///    },
    ///    {
    ///      "description": "Pool address lots are used by IP pools.",
    ///      "type": "string",
    ///      "enum": [
    ///        "pool"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum AddressLotKind {
        /// Infrastructure address lots are used for network infrastructure like
        /// addresses assigned to rack switches.
        #[serde(rename = "infra")]
        Infra,
        /// Pool address lots are used by IP pools.
        #[serde(rename = "pool")]
        Pool,
    }

    impl From<&AddressLotKind> for AddressLotKind {
        fn from(value: &AddressLotKind) -> Self {
            value.clone()
        }
    }

    impl ToString for AddressLotKind {
        fn to_string(&self) -> String {
            match *self {
                Self::Infra => "infra".to_string(),
                Self::Pool => "pool".to_string(),
            }
        }
    }

    impl std::str::FromStr for AddressLotKind {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "infra" => Ok(Self::Infra),
                "pool" => Ok(Self::Pool),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for AddressLotKind {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for AddressLotKind {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for AddressLotKind {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/AddressLot"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct AddressLotResultsPage {
        /// list of items on this page of results
        pub items: Vec<AddressLot>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&AddressLotResultsPage> for AddressLotResultsPage {
        fn from(value: &AddressLotResultsPage) -> Self {
            value.clone()
        }
    }

    impl AddressLotResultsPage {
        pub fn builder() -> builder::AddressLotResultsPage {
            Default::default()
        }
    }

    /// Properties that uniquely identify an Oxide hardware component
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Properties that uniquely identify an Oxide hardware
    /// component",
    ///  "type": "object",
    ///  "required": [
    ///    "part",
    ///    "revision",
    ///    "serial"
    ///  ],
    ///  "properties": {
    ///    "part": {
    ///      "type": "string"
    ///    },
    ///    "revision": {
    ///      "type": "integer",
    ///      "format": "int64"
    ///    },
    ///    "serial": {
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Baseboard {
        pub part: String,
        pub revision: i64,
        pub serial: String,
    }

    impl From<&Baseboard> for Baseboard {
        fn from(value: &Baseboard) -> Self {
            value.clone()
        }
    }

    impl Baseboard {
        pub fn builder() -> builder::Baseboard {
            Default::default()
        }
    }

    /// Represents a BGP announce set by id. The id can be used with other API
    /// calls to view and manage the announce set.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Represents a BGP announce set by id. The id can be used
    /// with other API calls to view and manage the announce set.",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "name",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpAnnounceSet {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&BgpAnnounceSet> for BgpAnnounceSet {
        fn from(value: &BgpAnnounceSet) -> Self {
            value.clone()
        }
    }

    impl BgpAnnounceSet {
        pub fn builder() -> builder::BgpAnnounceSet {
            Default::default()
        }
    }

    /// Parameters for creating a named set of BGP announcements.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for creating a named set of BGP
    /// announcements.",
    ///  "type": "object",
    ///  "required": [
    ///    "announcement",
    ///    "description",
    ///    "name"
    ///  ],
    ///  "properties": {
    ///    "announcement": {
    ///      "description": "The announcements in this set.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/BgpAnnouncementCreate"
    ///      }
    ///    },
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpAnnounceSetCreate {
        /// The announcements in this set.
        pub announcement: Vec<BgpAnnouncementCreate>,
        pub description: String,
        pub name: Name,
    }

    impl From<&BgpAnnounceSetCreate> for BgpAnnounceSetCreate {
        fn from(value: &BgpAnnounceSetCreate) -> Self {
            value.clone()
        }
    }

    impl BgpAnnounceSetCreate {
        pub fn builder() -> builder::BgpAnnounceSetCreate {
            Default::default()
        }
    }

    /// A BGP announcement tied to an address lot block.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A BGP announcement tied to an address lot block.",
    ///  "type": "object",
    ///  "required": [
    ///    "address_lot_block_id",
    ///    "announce_set_id",
    ///    "network"
    ///  ],
    ///  "properties": {
    ///    "address_lot_block_id": {
    ///      "description": "The address block the IP network being announced is
    /// drawn from.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "announce_set_id": {
    ///      "description": "The id of the set this announcement is a part of.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "network": {
    ///      "description": "The IP network being announced.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/IpNet"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpAnnouncement {
        /// The address block the IP network being announced is drawn from.
        pub address_lot_block_id: uuid::Uuid,
        /// The id of the set this announcement is a part of.
        pub announce_set_id: uuid::Uuid,
        /// The IP network being announced.
        pub network: IpNet,
    }

    impl From<&BgpAnnouncement> for BgpAnnouncement {
        fn from(value: &BgpAnnouncement) -> Self {
            value.clone()
        }
    }

    impl BgpAnnouncement {
        pub fn builder() -> builder::BgpAnnouncement {
            Default::default()
        }
    }

    /// A BGP announcement tied to a particular address lot block.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A BGP announcement tied to a particular address lot
    /// block.",
    ///  "type": "object",
    ///  "required": [
    ///    "address_lot_block",
    ///    "network"
    ///  ],
    ///  "properties": {
    ///    "address_lot_block": {
    ///      "description": "Address lot this announcement is drawn from.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    },
    ///    "network": {
    ///      "description": "The network being announced.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/IpNet"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpAnnouncementCreate {
        /// Address lot this announcement is drawn from.
        pub address_lot_block: NameOrId,
        /// The network being announced.
        pub network: IpNet,
    }

    impl From<&BgpAnnouncementCreate> for BgpAnnouncementCreate {
        fn from(value: &BgpAnnouncementCreate) -> Self {
            value.clone()
        }
    }

    impl BgpAnnouncementCreate {
        pub fn builder() -> builder::BgpAnnouncementCreate {
            Default::default()
        }
    }

    /// A base BGP configuration.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A base BGP configuration.",
    ///  "type": "object",
    ///  "required": [
    ///    "asn",
    ///    "description",
    ///    "id",
    ///    "name",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "asn": {
    ///      "description": "The autonomous system number of this BGP
    /// configuration.",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    },
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "vrf": {
    ///      "description": "Optional virtual routing and forwarding identifier
    /// for this BGP configuration.",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpConfig {
        /// The autonomous system number of this BGP configuration.
        pub asn: u32,
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        /// Optional virtual routing and forwarding identifier for this BGP
        /// configuration.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub vrf: Option<String>,
    }

    impl From<&BgpConfig> for BgpConfig {
        fn from(value: &BgpConfig) -> Self {
            value.clone()
        }
    }

    impl BgpConfig {
        pub fn builder() -> builder::BgpConfig {
            Default::default()
        }
    }

    /// Parameters for creating a BGP configuration. This includes and
    /// autonomous system number (ASN) and a virtual routing and forwarding
    /// (VRF) identifier.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for creating a BGP configuration. This
    /// includes and autonomous system number (ASN) and a virtual routing and
    /// forwarding (VRF) identifier.",
    ///  "type": "object",
    ///  "required": [
    ///    "asn",
    ///    "bgp_announce_set_id",
    ///    "description",
    ///    "name"
    ///  ],
    ///  "properties": {
    ///    "asn": {
    ///      "description": "The autonomous system number of this BGP
    /// configuration.",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    },
    ///    "bgp_announce_set_id": {
    ///      "$ref": "#/components/schemas/NameOrId"
    ///    },
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "vrf": {
    ///      "description": "Optional virtual routing and forwarding identifier
    /// for this BGP configuration.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpConfigCreate {
        /// The autonomous system number of this BGP configuration.
        pub asn: u32,
        pub bgp_announce_set_id: NameOrId,
        pub description: String,
        pub name: Name,
        /// Optional virtual routing and forwarding identifier for this BGP
        /// configuration.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub vrf: Option<Name>,
    }

    impl From<&BgpConfigCreate> for BgpConfigCreate {
        fn from(value: &BgpConfigCreate) -> Self {
            value.clone()
        }
    }

    impl BgpConfigCreate {
        pub fn builder() -> builder::BgpConfigCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/BgpConfig"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpConfigResultsPage {
        /// list of items on this page of results
        pub items: Vec<BgpConfig>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&BgpConfigResultsPage> for BgpConfigResultsPage {
        fn from(value: &BgpConfigResultsPage) -> Self {
            value.clone()
        }
    }

    impl BgpConfigResultsPage {
        pub fn builder() -> builder::BgpConfigResultsPage {
            Default::default()
        }
    }

    /// A route imported from a BGP peer.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A route imported from a BGP peer.",
    ///  "type": "object",
    ///  "required": [
    ///    "id",
    ///    "nexthop",
    ///    "prefix",
    ///    "switch"
    ///  ],
    ///  "properties": {
    ///    "id": {
    ///      "description": "BGP identifier of the originating router.",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    },
    ///    "nexthop": {
    ///      "description": "The nexthop the prefix is reachable through.",
    ///      "type": "string",
    ///      "format": "ipv4"
    ///    },
    ///    "prefix": {
    ///      "description": "The destination network prefix.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv4Net"
    ///        }
    ///      ]
    ///    },
    ///    "switch": {
    ///      "description": "Switch the route is imported into.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SwitchLocation"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpImportedRouteIpv4 {
        /// BGP identifier of the originating router.
        pub id: u32,
        /// The nexthop the prefix is reachable through.
        pub nexthop: std::net::Ipv4Addr,
        /// The destination network prefix.
        pub prefix: Ipv4Net,
        /// Switch the route is imported into.
        pub switch: SwitchLocation,
    }

    impl From<&BgpImportedRouteIpv4> for BgpImportedRouteIpv4 {
        fn from(value: &BgpImportedRouteIpv4) -> Self {
            value.clone()
        }
    }

    impl BgpImportedRouteIpv4 {
        pub fn builder() -> builder::BgpImportedRouteIpv4 {
            Default::default()
        }
    }

    /// A BGP peer configuration for an interface. Includes the set of
    /// announcements that will be advertised to the peer identified by `addr`.
    /// The `bgp_config` parameter is a reference to global BGP parameters. The
    /// `interface_name` indicates what interface the peer should be contacted
    /// on.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A BGP peer configuration for an interface. Includes the
    /// set of announcements that will be advertised to the peer identified by
    /// `addr`. The `bgp_config` parameter is a reference to global BGP
    /// parameters. The `interface_name` indicates what interface the peer
    /// should be contacted on.",
    ///  "type": "object",
    ///  "required": [
    ///    "addr",
    ///    "bgp_announce_set",
    ///    "bgp_config",
    ///    "connect_retry",
    ///    "delay_open",
    ///    "hold_time",
    ///    "idle_hold_time",
    ///    "interface_name",
    ///    "keepalive"
    ///  ],
    ///  "properties": {
    ///    "addr": {
    ///      "description": "The address of the host to peer with.",
    ///      "type": "string",
    ///      "format": "ip"
    ///    },
    ///    "bgp_announce_set": {
    ///      "description": "The set of announcements advertised by the peer.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    },
    ///    "bgp_config": {
    ///      "description": "The global BGP configuration used for establishing
    /// a session with this peer.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    },
    ///    "connect_retry": {
    ///      "description": "How long to to wait between TCP connection retries
    /// (seconds).",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    },
    ///    "delay_open": {
    ///      "description": "How long to delay sending an open request after
    /// establishing a TCP session (seconds).",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    },
    ///    "hold_time": {
    ///      "description": "How long to hold peer connections between
    /// keppalives (seconds).",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    },
    ///    "idle_hold_time": {
    ///      "description": "How long to hold a peer in idle before attempting a
    /// new session (seconds).",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    },
    ///    "interface_name": {
    ///      "description": "The name of interface to peer on. This is relative
    /// to the port configuration this BGP peer configuration is a part of. For
    /// example this value could be phy0 to refer to a primary physical
    /// interface. Or it could be vlan47 to refer to a VLAN interface.",
    ///      "type": "string"
    ///    },
    ///    "keepalive": {
    ///      "description": "How often to send keepalive requests (seconds).",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpPeer {
        /// The address of the host to peer with.
        pub addr: std::net::IpAddr,
        /// The set of announcements advertised by the peer.
        pub bgp_announce_set: NameOrId,
        /// The global BGP configuration used for establishing a session with
        /// this peer.
        pub bgp_config: NameOrId,
        /// How long to to wait between TCP connection retries (seconds).
        pub connect_retry: u32,
        /// How long to delay sending an open request after establishing a TCP
        /// session (seconds).
        pub delay_open: u32,
        /// How long to hold peer connections between keppalives (seconds).
        pub hold_time: u32,
        /// How long to hold a peer in idle before attempting a new session
        /// (seconds).
        pub idle_hold_time: u32,
        /// The name of interface to peer on. This is relative to the port
        /// configuration this BGP peer configuration is a part of. For example
        /// this value could be phy0 to refer to a primary physical interface.
        /// Or it could be vlan47 to refer to a VLAN interface.
        pub interface_name: String,
        /// How often to send keepalive requests (seconds).
        pub keepalive: u32,
    }

    impl From<&BgpPeer> for BgpPeer {
        fn from(value: &BgpPeer) -> Self {
            value.clone()
        }
    }

    impl BgpPeer {
        pub fn builder() -> builder::BgpPeer {
            Default::default()
        }
    }

    /// BgpPeerConfig
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "object",
    ///  "required": [
    ///    "peers"
    ///  ],
    ///  "properties": {
    ///    "peers": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/BgpPeer"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpPeerConfig {
        pub peers: Vec<BgpPeer>,
    }

    impl From<&BgpPeerConfig> for BgpPeerConfig {
        fn from(value: &BgpPeerConfig) -> Self {
            value.clone()
        }
    }

    impl BgpPeerConfig {
        pub fn builder() -> builder::BgpPeerConfig {
            Default::default()
        }
    }

    /// The current state of a BGP peer.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The current state of a BGP peer.",
    ///  "oneOf": [
    ///    {
    ///      "description": "Initial state. Refuse all incomming BGP
    /// connections. No resources allocated to peer.",
    ///      "type": "string",
    ///      "enum": [
    ///        "idle"
    ///      ]
    ///    },
    ///    {
    ///      "description": "Waiting for the TCP connection to be completed.",
    ///      "type": "string",
    ///      "enum": [
    ///        "connect"
    ///      ]
    ///    },
    ///    {
    ///      "description": "Trying to acquire peer by listening for and
    /// accepting a TCP connection.",
    ///      "type": "string",
    ///      "enum": [
    ///        "active"
    ///      ]
    ///    },
    ///    {
    ///      "description": "Waiting for open message from peer.",
    ///      "type": "string",
    ///      "enum": [
    ///        "open_sent"
    ///      ]
    ///    },
    ///    {
    ///      "description": "Waiting for keepaliave or notification from peer.",
    ///      "type": "string",
    ///      "enum": [
    ///        "open_confirm"
    ///      ]
    ///    },
    ///    {
    ///      "description": "Synchronizing with peer.",
    ///      "type": "string",
    ///      "enum": [
    ///        "session_setup"
    ///      ]
    ///    },
    ///    {
    ///      "description": "Session established. Able to exchange update,
    /// notification and keepliave messages with peers.",
    ///      "type": "string",
    ///      "enum": [
    ///        "established"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum BgpPeerState {
        /// Initial state. Refuse all incomming BGP connections. No resources
        /// allocated to peer.
        #[serde(rename = "idle")]
        Idle,
        /// Waiting for the TCP connection to be completed.
        #[serde(rename = "connect")]
        Connect,
        /// Trying to acquire peer by listening for and accepting a TCP
        /// connection.
        #[serde(rename = "active")]
        Active,
        /// Waiting for open message from peer.
        #[serde(rename = "open_sent")]
        OpenSent,
        /// Waiting for keepaliave or notification from peer.
        #[serde(rename = "open_confirm")]
        OpenConfirm,
        /// Synchronizing with peer.
        #[serde(rename = "session_setup")]
        SessionSetup,
        /// Session established. Able to exchange update, notification and
        /// keepliave messages with peers.
        #[serde(rename = "established")]
        Established,
    }

    impl From<&BgpPeerState> for BgpPeerState {
        fn from(value: &BgpPeerState) -> Self {
            value.clone()
        }
    }

    impl ToString for BgpPeerState {
        fn to_string(&self) -> String {
            match *self {
                Self::Idle => "idle".to_string(),
                Self::Connect => "connect".to_string(),
                Self::Active => "active".to_string(),
                Self::OpenSent => "open_sent".to_string(),
                Self::OpenConfirm => "open_confirm".to_string(),
                Self::SessionSetup => "session_setup".to_string(),
                Self::Established => "established".to_string(),
            }
        }
    }

    impl std::str::FromStr for BgpPeerState {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "idle" => Ok(Self::Idle),
                "connect" => Ok(Self::Connect),
                "active" => Ok(Self::Active),
                "open_sent" => Ok(Self::OpenSent),
                "open_confirm" => Ok(Self::OpenConfirm),
                "session_setup" => Ok(Self::SessionSetup),
                "established" => Ok(Self::Established),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for BgpPeerState {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for BgpPeerState {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for BgpPeerState {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// The current status of a BGP peer.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The current status of a BGP peer.",
    ///  "type": "object",
    ///  "required": [
    ///    "addr",
    ///    "local_asn",
    ///    "remote_asn",
    ///    "state",
    ///    "state_duration_millis",
    ///    "switch"
    ///  ],
    ///  "properties": {
    ///    "addr": {
    ///      "description": "IP address of the peer.",
    ///      "type": "string",
    ///      "format": "ip"
    ///    },
    ///    "local_asn": {
    ///      "description": "Local autonomous system number.",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    },
    ///    "remote_asn": {
    ///      "description": "Remote autonomous system number.",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    },
    ///    "state": {
    ///      "description": "State of the peer.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BgpPeerState"
    ///        }
    ///      ]
    ///    },
    ///    "state_duration_millis": {
    ///      "description": "Time of last state change.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "switch": {
    ///      "description": "Switch with the peer session.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SwitchLocation"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct BgpPeerStatus {
        /// IP address of the peer.
        pub addr: std::net::IpAddr,
        /// Local autonomous system number.
        pub local_asn: u32,
        /// Remote autonomous system number.
        pub remote_asn: u32,
        /// State of the peer.
        pub state: BgpPeerState,
        /// Time of last state change.
        pub state_duration_millis: u64,
        /// Switch with the peer session.
        pub switch: SwitchLocation,
    }

    impl From<&BgpPeerStatus> for BgpPeerStatus {
        fn from(value: &BgpPeerStatus) -> Self {
            value.clone()
        }
    }

    impl BgpPeerStatus {
        pub fn builder() -> builder::BgpPeerStatus {
            Default::default()
        }
    }

    /// A type storing a range over `T`.
    ///
    /// This type supports ranges similar to the `RangeTo`, `Range` and
    /// `RangeFrom` types in the standard library. Those cover `(..end)`,
    /// `(start..end)`, and `(start..)` respectively.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A type storing a range over `T`.\n\nThis type supports
    /// ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the
    /// standard library. Those cover `(..end)`, `(start..end)`, and `(start..)`
    /// respectively.",
    ///  "oneOf": [
    ///    {
    ///      "description": "A range unbounded below and exclusively above,
    /// `..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "number",
    ///          "format": "double"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_to"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and exclusively
    /// above, `start..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "number",
    ///          "format": "double"
    ///        },
    ///        "start": {
    ///          "type": "number",
    ///          "format": "double"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and unbounded
    /// above, `start..`.",
    ///      "type": "object",
    ///      "required": [
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "start": {
    ///          "type": "number",
    ///          "format": "double"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_from"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum BinRangedouble {
        /// A range unbounded below and exclusively above, `..end`.
        #[serde(rename = "range_to")]
        RangeTo { end: f64 },
        /// A range bounded inclusively below and exclusively above,
        /// `start..end`.
        #[serde(rename = "range")]
        Range { end: f64, start: f64 },
        /// A range bounded inclusively below and unbounded above, `start..`.
        #[serde(rename = "range_from")]
        RangeFrom { start: f64 },
    }

    impl From<&BinRangedouble> for BinRangedouble {
        fn from(value: &BinRangedouble) -> Self {
            value.clone()
        }
    }

    /// A type storing a range over `T`.
    ///
    /// This type supports ranges similar to the `RangeTo`, `Range` and
    /// `RangeFrom` types in the standard library. Those cover `(..end)`,
    /// `(start..end)`, and `(start..)` respectively.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A type storing a range over `T`.\n\nThis type supports
    /// ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the
    /// standard library. Those cover `(..end)`, `(start..end)`, and `(start..)`
    /// respectively.",
    ///  "oneOf": [
    ///    {
    ///      "description": "A range unbounded below and exclusively above,
    /// `..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "number",
    ///          "format": "float"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_to"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and exclusively
    /// above, `start..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "number",
    ///          "format": "float"
    ///        },
    ///        "start": {
    ///          "type": "number",
    ///          "format": "float"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and unbounded
    /// above, `start..`.",
    ///      "type": "object",
    ///      "required": [
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "start": {
    ///          "type": "number",
    ///          "format": "float"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_from"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum BinRangefloat {
        /// A range unbounded below and exclusively above, `..end`.
        #[serde(rename = "range_to")]
        RangeTo { end: f32 },
        /// A range bounded inclusively below and exclusively above,
        /// `start..end`.
        #[serde(rename = "range")]
        Range { end: f32, start: f32 },
        /// A range bounded inclusively below and unbounded above, `start..`.
        #[serde(rename = "range_from")]
        RangeFrom { start: f32 },
    }

    impl From<&BinRangefloat> for BinRangefloat {
        fn from(value: &BinRangefloat) -> Self {
            value.clone()
        }
    }

    /// A type storing a range over `T`.
    ///
    /// This type supports ranges similar to the `RangeTo`, `Range` and
    /// `RangeFrom` types in the standard library. Those cover `(..end)`,
    /// `(start..end)`, and `(start..)` respectively.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A type storing a range over `T`.\n\nThis type supports
    /// ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the
    /// standard library. Those cover `(..end)`, `(start..end)`, and `(start..)`
    /// respectively.",
    ///  "oneOf": [
    ///    {
    ///      "description": "A range unbounded below and exclusively above,
    /// `..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "int16"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_to"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and exclusively
    /// above, `start..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "int16"
    ///        },
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "int16"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and unbounded
    /// above, `start..`.",
    ///      "type": "object",
    ///      "required": [
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "int16"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_from"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum BinRangeint16 {
        /// A range unbounded below and exclusively above, `..end`.
        #[serde(rename = "range_to")]
        RangeTo { end: i16 },
        /// A range bounded inclusively below and exclusively above,
        /// `start..end`.
        #[serde(rename = "range")]
        Range { end: i16, start: i16 },
        /// A range bounded inclusively below and unbounded above, `start..`.
        #[serde(rename = "range_from")]
        RangeFrom { start: i16 },
    }

    impl From<&BinRangeint16> for BinRangeint16 {
        fn from(value: &BinRangeint16) -> Self {
            value.clone()
        }
    }

    /// A type storing a range over `T`.
    ///
    /// This type supports ranges similar to the `RangeTo`, `Range` and
    /// `RangeFrom` types in the standard library. Those cover `(..end)`,
    /// `(start..end)`, and `(start..)` respectively.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A type storing a range over `T`.\n\nThis type supports
    /// ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the
    /// standard library. Those cover `(..end)`, `(start..end)`, and `(start..)`
    /// respectively.",
    ///  "oneOf": [
    ///    {
    ///      "description": "A range unbounded below and exclusively above,
    /// `..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "int32"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_to"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and exclusively
    /// above, `start..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "int32"
    ///        },
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "int32"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and unbounded
    /// above, `start..`.",
    ///      "type": "object",
    ///      "required": [
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "int32"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_from"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum BinRangeint32 {
        /// A range unbounded below and exclusively above, `..end`.
        #[serde(rename = "range_to")]
        RangeTo { end: i32 },
        /// A range bounded inclusively below and exclusively above,
        /// `start..end`.
        #[serde(rename = "range")]
        Range { end: i32, start: i32 },
        /// A range bounded inclusively below and unbounded above, `start..`.
        #[serde(rename = "range_from")]
        RangeFrom { start: i32 },
    }

    impl From<&BinRangeint32> for BinRangeint32 {
        fn from(value: &BinRangeint32) -> Self {
            value.clone()
        }
    }

    /// A type storing a range over `T`.
    ///
    /// This type supports ranges similar to the `RangeTo`, `Range` and
    /// `RangeFrom` types in the standard library. Those cover `(..end)`,
    /// `(start..end)`, and `(start..)` respectively.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A type storing a range over `T`.\n\nThis type supports
    /// ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the
    /// standard library. Those cover `(..end)`, `(start..end)`, and `(start..)`
    /// respectively.",
    ///  "oneOf": [
    ///    {
    ///      "description": "A range unbounded below and exclusively above,
    /// `..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "int64"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_to"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and exclusively
    /// above, `start..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "int64"
    ///        },
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "int64"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and unbounded
    /// above, `start..`.",
    ///      "type": "object",
    ///      "required": [
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "int64"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_from"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum BinRangeint64 {
        /// A range unbounded below and exclusively above, `..end`.
        #[serde(rename = "range_to")]
        RangeTo { end: i64 },
        /// A range bounded inclusively below and exclusively above,
        /// `start..end`.
        #[serde(rename = "range")]
        Range { end: i64, start: i64 },
        /// A range bounded inclusively below and unbounded above, `start..`.
        #[serde(rename = "range_from")]
        RangeFrom { start: i64 },
    }

    impl From<&BinRangeint64> for BinRangeint64 {
        fn from(value: &BinRangeint64) -> Self {
            value.clone()
        }
    }

    /// A type storing a range over `T`.
    ///
    /// This type supports ranges similar to the `RangeTo`, `Range` and
    /// `RangeFrom` types in the standard library. Those cover `(..end)`,
    /// `(start..end)`, and `(start..)` respectively.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A type storing a range over `T`.\n\nThis type supports
    /// ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the
    /// standard library. Those cover `(..end)`, `(start..end)`, and `(start..)`
    /// respectively.",
    ///  "oneOf": [
    ///    {
    ///      "description": "A range unbounded below and exclusively above,
    /// `..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "int8"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_to"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and exclusively
    /// above, `start..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "int8"
    ///        },
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "int8"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and unbounded
    /// above, `start..`.",
    ///      "type": "object",
    ///      "required": [
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "int8"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_from"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum BinRangeint8 {
        /// A range unbounded below and exclusively above, `..end`.
        #[serde(rename = "range_to")]
        RangeTo { end: i8 },
        /// A range bounded inclusively below and exclusively above,
        /// `start..end`.
        #[serde(rename = "range")]
        Range { end: i8, start: i8 },
        /// A range bounded inclusively below and unbounded above, `start..`.
        #[serde(rename = "range_from")]
        RangeFrom { start: i8 },
    }

    impl From<&BinRangeint8> for BinRangeint8 {
        fn from(value: &BinRangeint8) -> Self {
            value.clone()
        }
    }

    /// A type storing a range over `T`.
    ///
    /// This type supports ranges similar to the `RangeTo`, `Range` and
    /// `RangeFrom` types in the standard library. Those cover `(..end)`,
    /// `(start..end)`, and `(start..)` respectively.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A type storing a range over `T`.\n\nThis type supports
    /// ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the
    /// standard library. Those cover `(..end)`, `(start..end)`, and `(start..)`
    /// respectively.",
    ///  "oneOf": [
    ///    {
    ///      "description": "A range unbounded below and exclusively above,
    /// `..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "uint16",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_to"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and exclusively
    /// above, `start..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "uint16",
    ///          "minimum": 0.0
    ///        },
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "uint16",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and unbounded
    /// above, `start..`.",
    ///      "type": "object",
    ///      "required": [
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "uint16",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_from"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum BinRangeuint16 {
        /// A range unbounded below and exclusively above, `..end`.
        #[serde(rename = "range_to")]
        RangeTo { end: u16 },
        /// A range bounded inclusively below and exclusively above,
        /// `start..end`.
        #[serde(rename = "range")]
        Range { end: u16, start: u16 },
        /// A range bounded inclusively below and unbounded above, `start..`.
        #[serde(rename = "range_from")]
        RangeFrom { start: u16 },
    }

    impl From<&BinRangeuint16> for BinRangeuint16 {
        fn from(value: &BinRangeuint16) -> Self {
            value.clone()
        }
    }

    /// A type storing a range over `T`.
    ///
    /// This type supports ranges similar to the `RangeTo`, `Range` and
    /// `RangeFrom` types in the standard library. Those cover `(..end)`,
    /// `(start..end)`, and `(start..)` respectively.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A type storing a range over `T`.\n\nThis type supports
    /// ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the
    /// standard library. Those cover `(..end)`, `(start..end)`, and `(start..)`
    /// respectively.",
    ///  "oneOf": [
    ///    {
    ///      "description": "A range unbounded below and exclusively above,
    /// `..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "uint32",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_to"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and exclusively
    /// above, `start..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "uint32",
    ///          "minimum": 0.0
    ///        },
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "uint32",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and unbounded
    /// above, `start..`.",
    ///      "type": "object",
    ///      "required": [
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "uint32",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_from"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum BinRangeuint32 {
        /// A range unbounded below and exclusively above, `..end`.
        #[serde(rename = "range_to")]
        RangeTo { end: u32 },
        /// A range bounded inclusively below and exclusively above,
        /// `start..end`.
        #[serde(rename = "range")]
        Range { end: u32, start: u32 },
        /// A range bounded inclusively below and unbounded above, `start..`.
        #[serde(rename = "range_from")]
        RangeFrom { start: u32 },
    }

    impl From<&BinRangeuint32> for BinRangeuint32 {
        fn from(value: &BinRangeuint32) -> Self {
            value.clone()
        }
    }

    /// A type storing a range over `T`.
    ///
    /// This type supports ranges similar to the `RangeTo`, `Range` and
    /// `RangeFrom` types in the standard library. Those cover `(..end)`,
    /// `(start..end)`, and `(start..)` respectively.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A type storing a range over `T`.\n\nThis type supports
    /// ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the
    /// standard library. Those cover `(..end)`, `(start..end)`, and `(start..)`
    /// respectively.",
    ///  "oneOf": [
    ///    {
    ///      "description": "A range unbounded below and exclusively above,
    /// `..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "uint64",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_to"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and exclusively
    /// above, `start..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "uint64",
    ///          "minimum": 0.0
    ///        },
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "uint64",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and unbounded
    /// above, `start..`.",
    ///      "type": "object",
    ///      "required": [
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "uint64",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_from"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum BinRangeuint64 {
        /// A range unbounded below and exclusively above, `..end`.
        #[serde(rename = "range_to")]
        RangeTo { end: u64 },
        /// A range bounded inclusively below and exclusively above,
        /// `start..end`.
        #[serde(rename = "range")]
        Range { end: u64, start: u64 },
        /// A range bounded inclusively below and unbounded above, `start..`.
        #[serde(rename = "range_from")]
        RangeFrom { start: u64 },
    }

    impl From<&BinRangeuint64> for BinRangeuint64 {
        fn from(value: &BinRangeuint64) -> Self {
            value.clone()
        }
    }

    /// A type storing a range over `T`.
    ///
    /// This type supports ranges similar to the `RangeTo`, `Range` and
    /// `RangeFrom` types in the standard library. Those cover `(..end)`,
    /// `(start..end)`, and `(start..)` respectively.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A type storing a range over `T`.\n\nThis type supports
    /// ranges similar to the `RangeTo`, `Range` and `RangeFrom` types in the
    /// standard library. Those cover `(..end)`, `(start..end)`, and `(start..)`
    /// respectively.",
    ///  "oneOf": [
    ///    {
    ///      "description": "A range unbounded below and exclusively above,
    /// `..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "uint8",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_to"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and exclusively
    /// above, `start..end`.",
    ///      "type": "object",
    ///      "required": [
    ///        "end",
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "end": {
    ///          "type": "integer",
    ///          "format": "uint8",
    ///          "minimum": 0.0
    ///        },
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "uint8",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "A range bounded inclusively below and unbounded
    /// above, `start..`.",
    ///      "type": "object",
    ///      "required": [
    ///        "start",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "start": {
    ///          "type": "integer",
    ///          "format": "uint8",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "range_from"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum BinRangeuint8 {
        /// A range unbounded below and exclusively above, `..end`.
        #[serde(rename = "range_to")]
        RangeTo { end: u8 },
        /// A range bounded inclusively below and exclusively above,
        /// `start..end`.
        #[serde(rename = "range")]
        Range { end: u8, start: u8 },
        /// A range bounded inclusively below and unbounded above, `start..`.
        #[serde(rename = "range_from")]
        RangeFrom { start: u8 },
    }

    impl From<&BinRangeuint8> for BinRangeuint8 {
        fn from(value: &BinRangeuint8) -> Self {
            value.clone()
        }
    }

    /// Type storing bin edges and a count of samples within it.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Type storing bin edges and a count of samples within
    /// it.",
    ///  "type": "object",
    ///  "required": [
    ///    "count",
    ///    "range"
    ///  ],
    ///  "properties": {
    ///    "count": {
    ///      "description": "The total count of samples in this bin.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "range": {
    ///      "description": "The range of the support covered by this bin.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BinRangedouble"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Bindouble {
        /// The total count of samples in this bin.
        pub count: u64,
        /// The range of the support covered by this bin.
        pub range: BinRangedouble,
    }

    impl From<&Bindouble> for Bindouble {
        fn from(value: &Bindouble) -> Self {
            value.clone()
        }
    }

    impl Bindouble {
        pub fn builder() -> builder::Bindouble {
            Default::default()
        }
    }

    /// Type storing bin edges and a count of samples within it.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Type storing bin edges and a count of samples within
    /// it.",
    ///  "type": "object",
    ///  "required": [
    ///    "count",
    ///    "range"
    ///  ],
    ///  "properties": {
    ///    "count": {
    ///      "description": "The total count of samples in this bin.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "range": {
    ///      "description": "The range of the support covered by this bin.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BinRangefloat"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Binfloat {
        /// The total count of samples in this bin.
        pub count: u64,
        /// The range of the support covered by this bin.
        pub range: BinRangefloat,
    }

    impl From<&Binfloat> for Binfloat {
        fn from(value: &Binfloat) -> Self {
            value.clone()
        }
    }

    impl Binfloat {
        pub fn builder() -> builder::Binfloat {
            Default::default()
        }
    }

    /// Type storing bin edges and a count of samples within it.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Type storing bin edges and a count of samples within
    /// it.",
    ///  "type": "object",
    ///  "required": [
    ///    "count",
    ///    "range"
    ///  ],
    ///  "properties": {
    ///    "count": {
    ///      "description": "The total count of samples in this bin.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "range": {
    ///      "description": "The range of the support covered by this bin.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BinRangeint16"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Binint16 {
        /// The total count of samples in this bin.
        pub count: u64,
        /// The range of the support covered by this bin.
        pub range: BinRangeint16,
    }

    impl From<&Binint16> for Binint16 {
        fn from(value: &Binint16) -> Self {
            value.clone()
        }
    }

    impl Binint16 {
        pub fn builder() -> builder::Binint16 {
            Default::default()
        }
    }

    /// Type storing bin edges and a count of samples within it.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Type storing bin edges and a count of samples within
    /// it.",
    ///  "type": "object",
    ///  "required": [
    ///    "count",
    ///    "range"
    ///  ],
    ///  "properties": {
    ///    "count": {
    ///      "description": "The total count of samples in this bin.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "range": {
    ///      "description": "The range of the support covered by this bin.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BinRangeint32"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Binint32 {
        /// The total count of samples in this bin.
        pub count: u64,
        /// The range of the support covered by this bin.
        pub range: BinRangeint32,
    }

    impl From<&Binint32> for Binint32 {
        fn from(value: &Binint32) -> Self {
            value.clone()
        }
    }

    impl Binint32 {
        pub fn builder() -> builder::Binint32 {
            Default::default()
        }
    }

    /// Type storing bin edges and a count of samples within it.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Type storing bin edges and a count of samples within
    /// it.",
    ///  "type": "object",
    ///  "required": [
    ///    "count",
    ///    "range"
    ///  ],
    ///  "properties": {
    ///    "count": {
    ///      "description": "The total count of samples in this bin.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "range": {
    ///      "description": "The range of the support covered by this bin.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BinRangeint64"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Binint64 {
        /// The total count of samples in this bin.
        pub count: u64,
        /// The range of the support covered by this bin.
        pub range: BinRangeint64,
    }

    impl From<&Binint64> for Binint64 {
        fn from(value: &Binint64) -> Self {
            value.clone()
        }
    }

    impl Binint64 {
        pub fn builder() -> builder::Binint64 {
            Default::default()
        }
    }

    /// Type storing bin edges and a count of samples within it.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Type storing bin edges and a count of samples within
    /// it.",
    ///  "type": "object",
    ///  "required": [
    ///    "count",
    ///    "range"
    ///  ],
    ///  "properties": {
    ///    "count": {
    ///      "description": "The total count of samples in this bin.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "range": {
    ///      "description": "The range of the support covered by this bin.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BinRangeint8"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Binint8 {
        /// The total count of samples in this bin.
        pub count: u64,
        /// The range of the support covered by this bin.
        pub range: BinRangeint8,
    }

    impl From<&Binint8> for Binint8 {
        fn from(value: &Binint8) -> Self {
            value.clone()
        }
    }

    impl Binint8 {
        pub fn builder() -> builder::Binint8 {
            Default::default()
        }
    }

    /// Type storing bin edges and a count of samples within it.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Type storing bin edges and a count of samples within
    /// it.",
    ///  "type": "object",
    ///  "required": [
    ///    "count",
    ///    "range"
    ///  ],
    ///  "properties": {
    ///    "count": {
    ///      "description": "The total count of samples in this bin.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "range": {
    ///      "description": "The range of the support covered by this bin.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BinRangeuint16"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Binuint16 {
        /// The total count of samples in this bin.
        pub count: u64,
        /// The range of the support covered by this bin.
        pub range: BinRangeuint16,
    }

    impl From<&Binuint16> for Binuint16 {
        fn from(value: &Binuint16) -> Self {
            value.clone()
        }
    }

    impl Binuint16 {
        pub fn builder() -> builder::Binuint16 {
            Default::default()
        }
    }

    /// Type storing bin edges and a count of samples within it.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Type storing bin edges and a count of samples within
    /// it.",
    ///  "type": "object",
    ///  "required": [
    ///    "count",
    ///    "range"
    ///  ],
    ///  "properties": {
    ///    "count": {
    ///      "description": "The total count of samples in this bin.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "range": {
    ///      "description": "The range of the support covered by this bin.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BinRangeuint32"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Binuint32 {
        /// The total count of samples in this bin.
        pub count: u64,
        /// The range of the support covered by this bin.
        pub range: BinRangeuint32,
    }

    impl From<&Binuint32> for Binuint32 {
        fn from(value: &Binuint32) -> Self {
            value.clone()
        }
    }

    impl Binuint32 {
        pub fn builder() -> builder::Binuint32 {
            Default::default()
        }
    }

    /// Type storing bin edges and a count of samples within it.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Type storing bin edges and a count of samples within
    /// it.",
    ///  "type": "object",
    ///  "required": [
    ///    "count",
    ///    "range"
    ///  ],
    ///  "properties": {
    ///    "count": {
    ///      "description": "The total count of samples in this bin.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "range": {
    ///      "description": "The range of the support covered by this bin.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BinRangeuint64"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Binuint64 {
        /// The total count of samples in this bin.
        pub count: u64,
        /// The range of the support covered by this bin.
        pub range: BinRangeuint64,
    }

    impl From<&Binuint64> for Binuint64 {
        fn from(value: &Binuint64) -> Self {
            value.clone()
        }
    }

    impl Binuint64 {
        pub fn builder() -> builder::Binuint64 {
            Default::default()
        }
    }

    /// Type storing bin edges and a count of samples within it.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Type storing bin edges and a count of samples within
    /// it.",
    ///  "type": "object",
    ///  "required": [
    ///    "count",
    ///    "range"
    ///  ],
    ///  "properties": {
    ///    "count": {
    ///      "description": "The total count of samples in this bin.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "range": {
    ///      "description": "The range of the support covered by this bin.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/BinRangeuint8"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Binuint8 {
        /// The total count of samples in this bin.
        pub count: u64,
        /// The range of the support covered by this bin.
        pub range: BinRangeuint8,
    }

    impl From<&Binuint8> for Binuint8 {
        fn from(value: &Binuint8) -> Self {
            value.clone()
        }
    }

    impl Binuint8 {
        pub fn builder() -> builder::Binuint8 {
            Default::default()
        }
    }

    /// BlockSize
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "title": "disk block size in bytes",
    ///  "type": "integer",
    ///  "enum": [
    ///    512,
    ///    2048,
    ///    4096
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Serialize, schemars :: JsonSchema)]
    pub struct BlockSize(i64);
    impl std::ops::Deref for BlockSize {
        type Target = i64;
        fn deref(&self) -> &i64 {
            &self.0
        }
    }

    impl From<BlockSize> for i64 {
        fn from(value: BlockSize) -> Self {
            value.0
        }
    }

    impl From<&BlockSize> for BlockSize {
        fn from(value: &BlockSize) -> Self {
            value.clone()
        }
    }

    impl std::convert::TryFrom<i64> for BlockSize {
        type Error = &'static str;
        fn try_from(value: i64) -> Result<Self, &'static str> {
            if ![512_i64, 2048_i64, 4096_i64].contains(&value) {
                Err("invalid value")
            } else {
                Ok(Self(value))
            }
        }
    }

    impl<'de> serde::Deserialize<'de> for BlockSize {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            Self::try_from(<i64>::deserialize(deserializer)?)
                .map_err(|e| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    /// Byte count to express memory or storage capacity.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Byte count to express memory or storage capacity.",
    ///  "type": "integer",
    ///  "format": "uint64",
    ///  "minimum": 0.0
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ByteCount(pub u64);
    impl std::ops::Deref for ByteCount {
        type Target = u64;
        fn deref(&self) -> &u64 {
            &self.0
        }
    }

    impl From<ByteCount> for u64 {
        fn from(value: ByteCount) -> Self {
            value.0
        }
    }

    impl From<&ByteCount> for ByteCount {
        fn from(value: &ByteCount) -> Self {
            value.clone()
        }
    }

    impl From<u64> for ByteCount {
        fn from(value: u64) -> Self {
            Self(value)
        }
    }

    impl std::str::FromStr for ByteCount {
        type Err = <u64 as std::str::FromStr>::Err;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            Ok(Self(value.parse()?))
        }
    }

    impl std::convert::TryFrom<&str> for ByteCount {
        type Error = <u64 as std::str::FromStr>::Err;
        fn try_from(value: &str) -> Result<Self, Self::Error> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for ByteCount {
        type Error = <u64 as std::str::FromStr>::Err;
        fn try_from(value: &String) -> Result<Self, Self::Error> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for ByteCount {
        type Error = <u64 as std::str::FromStr>::Err;
        fn try_from(value: String) -> Result<Self, Self::Error> {
            value.parse()
        }
    }

    impl ToString for ByteCount {
        fn to_string(&self) -> String {
            self.0.to_string()
        }
    }

    /// View of a Certificate
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a Certificate",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "name",
    ///    "service",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "service": {
    ///      "$ref": "#/components/schemas/ServiceUsingCertificate"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Certificate {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        pub service: ServiceUsingCertificate,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Certificate> for Certificate {
        fn from(value: &Certificate) -> Self {
            value.clone()
        }
    }

    impl Certificate {
        pub fn builder() -> builder::Certificate {
            Default::default()
        }
    }

    /// Create-time parameters for a `Certificate`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for a `Certificate`",
    ///  "type": "object",
    ///  "required": [
    ///    "cert",
    ///    "description",
    ///    "key",
    ///    "name",
    ///    "service"
    ///  ],
    ///  "properties": {
    ///    "cert": {
    ///      "description": "PEM-formatted string containing public certificate
    /// chain",
    ///      "type": "string"
    ///    },
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "key": {
    ///      "description": "PEM-formatted string containing private key",
    ///      "type": "string"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "service": {
    ///      "description": "The service using this certificate",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ServiceUsingCertificate"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct CertificateCreate {
        /// PEM-formatted string containing public certificate chain
        pub cert: String,
        pub description: String,
        /// PEM-formatted string containing private key
        pub key: String,
        pub name: Name,
        /// The service using this certificate
        pub service: ServiceUsingCertificate,
    }

    impl From<&CertificateCreate> for CertificateCreate {
        fn from(value: &CertificateCreate) -> Self {
            value.clone()
        }
    }

    impl CertificateCreate {
        pub fn builder() -> builder::CertificateCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Certificate"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct CertificateResultsPage {
        /// list of items on this page of results
        pub items: Vec<Certificate>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&CertificateResultsPage> for CertificateResultsPage {
        fn from(value: &CertificateResultsPage) -> Self {
            value.clone()
        }
    }

    impl CertificateResultsPage {
        pub fn builder() -> builder::CertificateResultsPage {
            Default::default()
        }
    }

    /// A cumulative or counter data type.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A cumulative or counter data type.",
    ///  "type": "object",
    ///  "required": [
    ///    "start_time",
    ///    "value"
    ///  ],
    ///  "properties": {
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "value": {
    ///      "type": "number",
    ///      "format": "double"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Cumulativedouble {
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
        pub value: f64,
    }

    impl From<&Cumulativedouble> for Cumulativedouble {
        fn from(value: &Cumulativedouble) -> Self {
            value.clone()
        }
    }

    impl Cumulativedouble {
        pub fn builder() -> builder::Cumulativedouble {
            Default::default()
        }
    }

    /// A cumulative or counter data type.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A cumulative or counter data type.",
    ///  "type": "object",
    ///  "required": [
    ///    "start_time",
    ///    "value"
    ///  ],
    ///  "properties": {
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "value": {
    ///      "type": "number",
    ///      "format": "float"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Cumulativefloat {
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
        pub value: f32,
    }

    impl From<&Cumulativefloat> for Cumulativefloat {
        fn from(value: &Cumulativefloat) -> Self {
            value.clone()
        }
    }

    impl Cumulativefloat {
        pub fn builder() -> builder::Cumulativefloat {
            Default::default()
        }
    }

    /// A cumulative or counter data type.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A cumulative or counter data type.",
    ///  "type": "object",
    ///  "required": [
    ///    "start_time",
    ///    "value"
    ///  ],
    ///  "properties": {
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "value": {
    ///      "type": "integer",
    ///      "format": "int64"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Cumulativeint64 {
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
        pub value: i64,
    }

    impl From<&Cumulativeint64> for Cumulativeint64 {
        fn from(value: &Cumulativeint64) -> Self {
            value.clone()
        }
    }

    impl Cumulativeint64 {
        pub fn builder() -> builder::Cumulativeint64 {
            Default::default()
        }
    }

    /// A cumulative or counter data type.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A cumulative or counter data type.",
    ///  "type": "object",
    ///  "required": [
    ///    "start_time",
    ///    "value"
    ///  ],
    ///  "properties": {
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "value": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Cumulativeuint64 {
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
        pub value: u64,
    }

    impl From<&Cumulativeuint64> for Cumulativeuint64 {
        fn from(value: &Cumulativeuint64) -> Self {
            value.clone()
        }
    }

    impl Cumulativeuint64 {
        pub fn builder() -> builder::Cumulativeuint64 {
            Default::default()
        }
    }

    /// Info about the current user
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Info about the current user",
    ///  "type": "object",
    ///  "required": [
    ///    "display_name",
    ///    "id",
    ///    "silo_id",
    ///    "silo_name"
    ///  ],
    ///  "properties": {
    ///    "display_name": {
    ///      "description": "Human-readable name that can identify the user",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "silo_id": {
    ///      "description": "Uuid of the silo to which this user belongs",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "silo_name": {
    ///      "description": "Name of the silo to which this user belongs.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct CurrentUser {
        /// Human-readable name that can identify the user
        pub display_name: String,
        pub id: uuid::Uuid,
        /// Uuid of the silo to which this user belongs
        pub silo_id: uuid::Uuid,
        /// Name of the silo to which this user belongs.
        pub silo_name: Name,
    }

    impl From<&CurrentUser> for CurrentUser {
        fn from(value: &CurrentUser) -> Self {
            value.clone()
        }
    }

    impl CurrentUser {
        pub fn builder() -> builder::CurrentUser {
            Default::default()
        }
    }

    /// A `Datum` is a single sampled data point from a metric.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A `Datum` is a single sampled data point from a
    /// metric.",
    ///  "oneOf": [
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "boolean"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "bool"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "integer",
    ///          "format": "int8"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "i8"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "integer",
    ///          "format": "uint8",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "u8"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "integer",
    ///          "format": "int16"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "i16"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "integer",
    ///          "format": "uint16",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "u16"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "integer",
    ///          "format": "int32"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "i32"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "integer",
    ///          "format": "uint32",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "u32"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "integer",
    ///          "format": "int64"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "i64"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "integer",
    ///          "format": "uint64",
    ///          "minimum": 0.0
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "u64"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "number",
    ///          "format": "float"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "f32"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "number",
    ///          "format": "double"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "f64"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "string"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "string"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "type": "array",
    ///          "items": {
    ///            "type": "integer",
    ///            "format": "uint8",
    ///            "minimum": 0.0
    ///          }
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "bytes"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Cumulativeint64"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "cumulative_i64"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Cumulativeuint64"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "cumulative_u64"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Cumulativefloat"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "cumulative_f32"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Cumulativedouble"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "cumulative_f64"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Histogramint8"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "histogram_i8"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Histogramuint8"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "histogram_u8"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Histogramint16"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "histogram_i16"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Histogramuint16"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "histogram_u16"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Histogramint32"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "histogram_i32"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Histogramuint32"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "histogram_u32"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Histogramint64"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "histogram_i64"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Histogramuint64"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "histogram_u64"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Histogramfloat"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "histogram_f32"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/Histogramdouble"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "histogram_f64"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "datum",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "datum": {
    ///          "$ref": "#/components/schemas/MissingDatum"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "missing"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type", content = "datum")]
    pub enum Datum {
        #[serde(rename = "bool")]
        Bool(bool),
        #[serde(rename = "i8")]
        I8(i8),
        #[serde(rename = "u8")]
        U8(u8),
        #[serde(rename = "i16")]
        I16(i16),
        #[serde(rename = "u16")]
        U16(u16),
        #[serde(rename = "i32")]
        I32(i32),
        #[serde(rename = "u32")]
        U32(u32),
        #[serde(rename = "i64")]
        I64(i64),
        #[serde(rename = "u64")]
        U64(u64),
        #[serde(rename = "f32")]
        F32(f32),
        #[serde(rename = "f64")]
        F64(f64),
        #[serde(rename = "string")]
        String(String),
        #[serde(rename = "bytes")]
        Bytes(Vec<u8>),
        #[serde(rename = "cumulative_i64")]
        CumulativeI64(Cumulativeint64),
        #[serde(rename = "cumulative_u64")]
        CumulativeU64(Cumulativeuint64),
        #[serde(rename = "cumulative_f32")]
        CumulativeF32(Cumulativefloat),
        #[serde(rename = "cumulative_f64")]
        CumulativeF64(Cumulativedouble),
        #[serde(rename = "histogram_i8")]
        HistogramI8(Histogramint8),
        #[serde(rename = "histogram_u8")]
        HistogramU8(Histogramuint8),
        #[serde(rename = "histogram_i16")]
        HistogramI16(Histogramint16),
        #[serde(rename = "histogram_u16")]
        HistogramU16(Histogramuint16),
        #[serde(rename = "histogram_i32")]
        HistogramI32(Histogramint32),
        #[serde(rename = "histogram_u32")]
        HistogramU32(Histogramuint32),
        #[serde(rename = "histogram_i64")]
        HistogramI64(Histogramint64),
        #[serde(rename = "histogram_u64")]
        HistogramU64(Histogramuint64),
        #[serde(rename = "histogram_f32")]
        HistogramF32(Histogramfloat),
        #[serde(rename = "histogram_f64")]
        HistogramF64(Histogramdouble),
        #[serde(rename = "missing")]
        Missing(MissingDatum),
    }

    impl From<&Datum> for Datum {
        fn from(value: &Datum) -> Self {
            value.clone()
        }
    }

    impl From<bool> for Datum {
        fn from(value: bool) -> Self {
            Self::Bool(value)
        }
    }

    impl From<i8> for Datum {
        fn from(value: i8) -> Self {
            Self::I8(value)
        }
    }

    impl From<u8> for Datum {
        fn from(value: u8) -> Self {
            Self::U8(value)
        }
    }

    impl From<i16> for Datum {
        fn from(value: i16) -> Self {
            Self::I16(value)
        }
    }

    impl From<u16> for Datum {
        fn from(value: u16) -> Self {
            Self::U16(value)
        }
    }

    impl From<i32> for Datum {
        fn from(value: i32) -> Self {
            Self::I32(value)
        }
    }

    impl From<u32> for Datum {
        fn from(value: u32) -> Self {
            Self::U32(value)
        }
    }

    impl From<i64> for Datum {
        fn from(value: i64) -> Self {
            Self::I64(value)
        }
    }

    impl From<u64> for Datum {
        fn from(value: u64) -> Self {
            Self::U64(value)
        }
    }

    impl From<f32> for Datum {
        fn from(value: f32) -> Self {
            Self::F32(value)
        }
    }

    impl From<f64> for Datum {
        fn from(value: f64) -> Self {
            Self::F64(value)
        }
    }

    impl From<Vec<u8>> for Datum {
        fn from(value: Vec<u8>) -> Self {
            Self::Bytes(value)
        }
    }

    impl From<Cumulativeint64> for Datum {
        fn from(value: Cumulativeint64) -> Self {
            Self::CumulativeI64(value)
        }
    }

    impl From<Cumulativeuint64> for Datum {
        fn from(value: Cumulativeuint64) -> Self {
            Self::CumulativeU64(value)
        }
    }

    impl From<Cumulativefloat> for Datum {
        fn from(value: Cumulativefloat) -> Self {
            Self::CumulativeF32(value)
        }
    }

    impl From<Cumulativedouble> for Datum {
        fn from(value: Cumulativedouble) -> Self {
            Self::CumulativeF64(value)
        }
    }

    impl From<Histogramint8> for Datum {
        fn from(value: Histogramint8) -> Self {
            Self::HistogramI8(value)
        }
    }

    impl From<Histogramuint8> for Datum {
        fn from(value: Histogramuint8) -> Self {
            Self::HistogramU8(value)
        }
    }

    impl From<Histogramint16> for Datum {
        fn from(value: Histogramint16) -> Self {
            Self::HistogramI16(value)
        }
    }

    impl From<Histogramuint16> for Datum {
        fn from(value: Histogramuint16) -> Self {
            Self::HistogramU16(value)
        }
    }

    impl From<Histogramint32> for Datum {
        fn from(value: Histogramint32) -> Self {
            Self::HistogramI32(value)
        }
    }

    impl From<Histogramuint32> for Datum {
        fn from(value: Histogramuint32) -> Self {
            Self::HistogramU32(value)
        }
    }

    impl From<Histogramint64> for Datum {
        fn from(value: Histogramint64) -> Self {
            Self::HistogramI64(value)
        }
    }

    impl From<Histogramuint64> for Datum {
        fn from(value: Histogramuint64) -> Self {
            Self::HistogramU64(value)
        }
    }

    impl From<Histogramfloat> for Datum {
        fn from(value: Histogramfloat) -> Self {
            Self::HistogramF32(value)
        }
    }

    impl From<Histogramdouble> for Datum {
        fn from(value: Histogramdouble) -> Self {
            Self::HistogramF64(value)
        }
    }

    impl From<MissingDatum> for Datum {
        fn from(value: MissingDatum) -> Self {
            Self::Missing(value)
        }
    }

    /// The type of an individual datum of a metric.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The type of an individual datum of a metric.",
    ///  "type": "string",
    ///  "enum": [
    ///    "bool",
    ///    "i8",
    ///    "u8",
    ///    "i16",
    ///    "u16",
    ///    "i32",
    ///    "u32",
    ///    "i64",
    ///    "u64",
    ///    "f32",
    ///    "f64",
    ///    "string",
    ///    "bytes",
    ///    "cumulative_i64",
    ///    "cumulative_u64",
    ///    "cumulative_f32",
    ///    "cumulative_f64",
    ///    "histogram_i8",
    ///    "histogram_u8",
    ///    "histogram_i16",
    ///    "histogram_u16",
    ///    "histogram_i32",
    ///    "histogram_u32",
    ///    "histogram_i64",
    ///    "histogram_u64",
    ///    "histogram_f32",
    ///    "histogram_f64"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum DatumType {
        #[serde(rename = "bool")]
        Bool,
        #[serde(rename = "i8")]
        I8,
        #[serde(rename = "u8")]
        U8,
        #[serde(rename = "i16")]
        I16,
        #[serde(rename = "u16")]
        U16,
        #[serde(rename = "i32")]
        I32,
        #[serde(rename = "u32")]
        U32,
        #[serde(rename = "i64")]
        I64,
        #[serde(rename = "u64")]
        U64,
        #[serde(rename = "f32")]
        F32,
        #[serde(rename = "f64")]
        F64,
        #[serde(rename = "string")]
        String,
        #[serde(rename = "bytes")]
        Bytes,
        #[serde(rename = "cumulative_i64")]
        CumulativeI64,
        #[serde(rename = "cumulative_u64")]
        CumulativeU64,
        #[serde(rename = "cumulative_f32")]
        CumulativeF32,
        #[serde(rename = "cumulative_f64")]
        CumulativeF64,
        #[serde(rename = "histogram_i8")]
        HistogramI8,
        #[serde(rename = "histogram_u8")]
        HistogramU8,
        #[serde(rename = "histogram_i16")]
        HistogramI16,
        #[serde(rename = "histogram_u16")]
        HistogramU16,
        #[serde(rename = "histogram_i32")]
        HistogramI32,
        #[serde(rename = "histogram_u32")]
        HistogramU32,
        #[serde(rename = "histogram_i64")]
        HistogramI64,
        #[serde(rename = "histogram_u64")]
        HistogramU64,
        #[serde(rename = "histogram_f32")]
        HistogramF32,
        #[serde(rename = "histogram_f64")]
        HistogramF64,
    }

    impl From<&DatumType> for DatumType {
        fn from(value: &DatumType) -> Self {
            value.clone()
        }
    }

    impl ToString for DatumType {
        fn to_string(&self) -> String {
            match *self {
                Self::Bool => "bool".to_string(),
                Self::I8 => "i8".to_string(),
                Self::U8 => "u8".to_string(),
                Self::I16 => "i16".to_string(),
                Self::U16 => "u16".to_string(),
                Self::I32 => "i32".to_string(),
                Self::U32 => "u32".to_string(),
                Self::I64 => "i64".to_string(),
                Self::U64 => "u64".to_string(),
                Self::F32 => "f32".to_string(),
                Self::F64 => "f64".to_string(),
                Self::String => "string".to_string(),
                Self::Bytes => "bytes".to_string(),
                Self::CumulativeI64 => "cumulative_i64".to_string(),
                Self::CumulativeU64 => "cumulative_u64".to_string(),
                Self::CumulativeF32 => "cumulative_f32".to_string(),
                Self::CumulativeF64 => "cumulative_f64".to_string(),
                Self::HistogramI8 => "histogram_i8".to_string(),
                Self::HistogramU8 => "histogram_u8".to_string(),
                Self::HistogramI16 => "histogram_i16".to_string(),
                Self::HistogramU16 => "histogram_u16".to_string(),
                Self::HistogramI32 => "histogram_i32".to_string(),
                Self::HistogramU32 => "histogram_u32".to_string(),
                Self::HistogramI64 => "histogram_i64".to_string(),
                Self::HistogramU64 => "histogram_u64".to_string(),
                Self::HistogramF32 => "histogram_f32".to_string(),
                Self::HistogramF64 => "histogram_f64".to_string(),
            }
        }
    }

    impl std::str::FromStr for DatumType {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "bool" => Ok(Self::Bool),
                "i8" => Ok(Self::I8),
                "u8" => Ok(Self::U8),
                "i16" => Ok(Self::I16),
                "u16" => Ok(Self::U16),
                "i32" => Ok(Self::I32),
                "u32" => Ok(Self::U32),
                "i64" => Ok(Self::I64),
                "u64" => Ok(Self::U64),
                "f32" => Ok(Self::F32),
                "f64" => Ok(Self::F64),
                "string" => Ok(Self::String),
                "bytes" => Ok(Self::Bytes),
                "cumulative_i64" => Ok(Self::CumulativeI64),
                "cumulative_u64" => Ok(Self::CumulativeU64),
                "cumulative_f32" => Ok(Self::CumulativeF32),
                "cumulative_f64" => Ok(Self::CumulativeF64),
                "histogram_i8" => Ok(Self::HistogramI8),
                "histogram_u8" => Ok(Self::HistogramU8),
                "histogram_i16" => Ok(Self::HistogramI16),
                "histogram_u16" => Ok(Self::HistogramU16),
                "histogram_i32" => Ok(Self::HistogramI32),
                "histogram_u32" => Ok(Self::HistogramU32),
                "histogram_i64" => Ok(Self::HistogramI64),
                "histogram_u64" => Ok(Self::HistogramU64),
                "histogram_f32" => Ok(Self::HistogramF32),
                "histogram_f64" => Ok(Self::HistogramF64),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for DatumType {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for DatumType {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for DatumType {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// DerEncodedKeyPair
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "object",
    ///  "required": [
    ///    "private_key",
    ///    "public_cert"
    ///  ],
    ///  "properties": {
    ///    "private_key": {
    ///      "description": "request signing private key (base64 encoded der
    /// file)",
    ///      "type": "string"
    ///    },
    ///    "public_cert": {
    ///      "description": "request signing public certificate (base64 encoded
    /// der file)",
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct DerEncodedKeyPair {
        /// request signing private key (base64 encoded der file)
        pub private_key: String,
        /// request signing public certificate (base64 encoded der file)
        pub public_cert: String,
    }

    impl From<&DerEncodedKeyPair> for DerEncodedKeyPair {
        fn from(value: &DerEncodedKeyPair) -> Self {
            value.clone()
        }
    }

    impl DerEncodedKeyPair {
        pub fn builder() -> builder::DerEncodedKeyPair {
            Default::default()
        }
    }

    /// DeviceAccessTokenRequest
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "object",
    ///  "required": [
    ///    "client_id",
    ///    "device_code",
    ///    "grant_type"
    ///  ],
    ///  "properties": {
    ///    "client_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "device_code": {
    ///      "type": "string"
    ///    },
    ///    "grant_type": {
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct DeviceAccessTokenRequest {
        pub client_id: uuid::Uuid,
        pub device_code: String,
        pub grant_type: String,
    }

    impl From<&DeviceAccessTokenRequest> for DeviceAccessTokenRequest {
        fn from(value: &DeviceAccessTokenRequest) -> Self {
            value.clone()
        }
    }

    impl DeviceAccessTokenRequest {
        pub fn builder() -> builder::DeviceAccessTokenRequest {
            Default::default()
        }
    }

    /// DeviceAuthRequest
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "object",
    ///  "required": [
    ///    "client_id"
    ///  ],
    ///  "properties": {
    ///    "client_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct DeviceAuthRequest {
        pub client_id: uuid::Uuid,
    }

    impl From<&DeviceAuthRequest> for DeviceAuthRequest {
        fn from(value: &DeviceAuthRequest) -> Self {
            value.clone()
        }
    }

    impl DeviceAuthRequest {
        pub fn builder() -> builder::DeviceAuthRequest {
            Default::default()
        }
    }

    /// DeviceAuthVerify
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "object",
    ///  "required": [
    ///    "user_code"
    ///  ],
    ///  "properties": {
    ///    "user_code": {
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct DeviceAuthVerify {
        pub user_code: String,
    }

    impl From<&DeviceAuthVerify> for DeviceAuthVerify {
        fn from(value: &DeviceAuthVerify) -> Self {
            value.clone()
        }
    }

    impl DeviceAuthVerify {
        pub fn builder() -> builder::DeviceAuthVerify {
            Default::default()
        }
    }

    /// Digest
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "oneOf": [
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "sha256"
    ///          ]
    ///        },
    ///        "value": {
    ///          "type": "string"
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type", content = "value")]
    pub enum Digest {
        #[serde(rename = "sha256")]
        Sha256(String),
    }

    impl From<&Digest> for Digest {
        fn from(value: &Digest) -> Self {
            value.clone()
        }
    }

    /// View of a Disk
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a Disk",
    ///  "type": "object",
    ///  "required": [
    ///    "block_size",
    ///    "description",
    ///    "device_path",
    ///    "id",
    ///    "name",
    ///    "project_id",
    ///    "size",
    ///    "state",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "block_size": {
    ///      "$ref": "#/components/schemas/ByteCount"
    ///    },
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "device_path": {
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "image_id": {
    ///      "description": "ID of image from which disk was created, if any",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "project_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "size": {
    ///      "$ref": "#/components/schemas/ByteCount"
    ///    },
    ///    "snapshot_id": {
    ///      "description": "ID of snapshot from which disk was created, if
    /// any",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "uuid"
    ///    },
    ///    "state": {
    ///      "$ref": "#/components/schemas/DiskState"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Disk {
        pub block_size: ByteCount,
        /// human-readable free-form text about a resource
        pub description: String,
        pub device_path: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// ID of image from which disk was created, if any
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub image_id: Option<uuid::Uuid>,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        pub project_id: uuid::Uuid,
        pub size: ByteCount,
        /// ID of snapshot from which disk was created, if any
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub snapshot_id: Option<uuid::Uuid>,
        pub state: DiskState,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Disk> for Disk {
        fn from(value: &Disk) -> Self {
            value.clone()
        }
    }

    impl Disk {
        pub fn builder() -> builder::Disk {
            Default::default()
        }
    }

    /// Create-time parameters for a `Disk`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for a `Disk`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "disk_source",
    ///    "name",
    ///    "size"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "disk_source": {
    ///      "description": "initial source for this disk",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/DiskSource"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "size": {
    ///      "description": "total size of the Disk in bytes",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct DiskCreate {
        pub description: String,
        /// initial source for this disk
        pub disk_source: DiskSource,
        pub name: Name,
        /// total size of the Disk in bytes
        pub size: ByteCount,
    }

    impl From<&DiskCreate> for DiskCreate {
        fn from(value: &DiskCreate) -> Self {
            value.clone()
        }
    }

    impl DiskCreate {
        pub fn builder() -> builder::DiskCreate {
            Default::default()
        }
    }

    /// DiskMetricName
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "string",
    ///  "enum": [
    ///    "activated",
    ///    "flush",
    ///    "read",
    ///    "read_bytes",
    ///    "write",
    ///    "write_bytes"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum DiskMetricName {
        #[serde(rename = "activated")]
        Activated,
        #[serde(rename = "flush")]
        Flush,
        #[serde(rename = "read")]
        Read,
        #[serde(rename = "read_bytes")]
        ReadBytes,
        #[serde(rename = "write")]
        Write,
        #[serde(rename = "write_bytes")]
        WriteBytes,
    }

    impl From<&DiskMetricName> for DiskMetricName {
        fn from(value: &DiskMetricName) -> Self {
            value.clone()
        }
    }

    impl ToString for DiskMetricName {
        fn to_string(&self) -> String {
            match *self {
                Self::Activated => "activated".to_string(),
                Self::Flush => "flush".to_string(),
                Self::Read => "read".to_string(),
                Self::ReadBytes => "read_bytes".to_string(),
                Self::Write => "write".to_string(),
                Self::WriteBytes => "write_bytes".to_string(),
            }
        }
    }

    impl std::str::FromStr for DiskMetricName {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "activated" => Ok(Self::Activated),
                "flush" => Ok(Self::Flush),
                "read" => Ok(Self::Read),
                "read_bytes" => Ok(Self::ReadBytes),
                "write" => Ok(Self::Write),
                "write_bytes" => Ok(Self::WriteBytes),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for DiskMetricName {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for DiskMetricName {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for DiskMetricName {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// DiskPath
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "object",
    ///  "required": [
    ///    "disk"
    ///  ],
    ///  "properties": {
    ///    "disk": {
    ///      "description": "Name or ID of the disk",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct DiskPath {
        /// Name or ID of the disk
        pub disk: NameOrId,
    }

    impl From<&DiskPath> for DiskPath {
        fn from(value: &DiskPath) -> Self {
            value.clone()
        }
    }

    impl DiskPath {
        pub fn builder() -> builder::DiskPath {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Disk"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct DiskResultsPage {
        /// list of items on this page of results
        pub items: Vec<Disk>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&DiskResultsPage> for DiskResultsPage {
        fn from(value: &DiskResultsPage) -> Self {
            value.clone()
        }
    }

    impl DiskResultsPage {
        pub fn builder() -> builder::DiskResultsPage {
            Default::default()
        }
    }

    /// Different sources for a disk
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Different sources for a disk",
    ///  "oneOf": [
    ///    {
    ///      "description": "Create a blank disk",
    ///      "type": "object",
    ///      "required": [
    ///        "block_size",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "block_size": {
    ///          "description": "size of blocks for this Disk. valid values are:
    /// 512, 2048, or 4096",
    ///          "allOf": [
    ///            {
    ///              "$ref": "#/components/schemas/BlockSize"
    ///            }
    ///          ]
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "blank"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Create a disk from a disk snapshot",
    ///      "type": "object",
    ///      "required": [
    ///        "snapshot_id",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "snapshot_id": {
    ///          "type": "string",
    ///          "format": "uuid"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "snapshot"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Create a disk from an image",
    ///      "type": "object",
    ///      "required": [
    ///        "image_id",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "image_id": {
    ///          "type": "string",
    ///          "format": "uuid"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "image"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Create a blank disk that will accept bulk writes or
    /// pull blocks from an external source.",
    ///      "type": "object",
    ///      "required": [
    ///        "block_size",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "block_size": {
    ///          "$ref": "#/components/schemas/BlockSize"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "importing_blocks"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum DiskSource {
        /// Create a blank disk
        #[serde(rename = "blank")]
        Blank {
            /// size of blocks for this Disk. valid values are: 512, 2048, or
            /// 4096
            block_size: BlockSize,
        },
        /// Create a disk from a disk snapshot
        #[serde(rename = "snapshot")]
        Snapshot { snapshot_id: uuid::Uuid },
        /// Create a disk from an image
        #[serde(rename = "image")]
        Image { image_id: uuid::Uuid },
        /// Create a blank disk that will accept bulk writes or pull blocks from
        /// an external source.
        #[serde(rename = "importing_blocks")]
        ImportingBlocks { block_size: BlockSize },
    }

    impl From<&DiskSource> for DiskSource {
        fn from(value: &DiskSource) -> Self {
            value.clone()
        }
    }

    /// State of a Disk
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "State of a Disk",
    ///  "oneOf": [
    ///    {
    ///      "description": "Disk is being initialized",
    ///      "type": "object",
    ///      "required": [
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "creating"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk is ready but detached from any Instance",
    ///      "type": "object",
    ///      "required": [
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "detached"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk is ready to receive blocks from an external
    /// source",
    ///      "type": "object",
    ///      "required": [
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "import_ready"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk is importing blocks from a URL",
    ///      "type": "object",
    ///      "required": [
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "importing_from_url"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk is importing blocks from bulk writes",
    ///      "type": "object",
    ///      "required": [
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "importing_from_bulk_writes"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk is being finalized to state Detached",
    ///      "type": "object",
    ///      "required": [
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "finalizing"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk is undergoing maintenance",
    ///      "type": "object",
    ///      "required": [
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "maintenance"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk is being attached to the given Instance",
    ///      "type": "object",
    ///      "required": [
    ///        "instance",
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "instance": {
    ///          "type": "string",
    ///          "format": "uuid"
    ///        },
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "attaching"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk is attached to the given Instance",
    ///      "type": "object",
    ///      "required": [
    ///        "instance",
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "instance": {
    ///          "type": "string",
    ///          "format": "uuid"
    ///        },
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "attached"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk is being detached from the given Instance",
    ///      "type": "object",
    ///      "required": [
    ///        "instance",
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "instance": {
    ///          "type": "string",
    ///          "format": "uuid"
    ///        },
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "detaching"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk has been destroyed",
    ///      "type": "object",
    ///      "required": [
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "destroyed"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Disk is unavailable",
    ///      "type": "object",
    ///      "required": [
    ///        "state"
    ///      ],
    ///      "properties": {
    ///        "state": {
    ///          "type": "string",
    ///          "enum": [
    ///            "faulted"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "state", content = "instance")]
    pub enum DiskState {
        #[serde(rename = "creating")]
        Creating,
        #[serde(rename = "detached")]
        Detached,
        #[serde(rename = "import_ready")]
        ImportReady,
        #[serde(rename = "importing_from_url")]
        ImportingFromUrl,
        #[serde(rename = "importing_from_bulk_writes")]
        ImportingFromBulkWrites,
        #[serde(rename = "finalizing")]
        Finalizing,
        #[serde(rename = "maintenance")]
        Maintenance,
        /// Disk is being attached to the given Instance
        #[serde(rename = "attaching")]
        Attaching(uuid::Uuid),
        /// Disk is attached to the given Instance
        #[serde(rename = "attached")]
        Attached(uuid::Uuid),
        /// Disk is being detached from the given Instance
        #[serde(rename = "detaching")]
        Detaching(uuid::Uuid),
        #[serde(rename = "destroyed")]
        Destroyed,
        #[serde(rename = "faulted")]
        Faulted,
    }

    impl From<&DiskState> for DiskState {
        fn from(value: &DiskState) -> Self {
            value.clone()
        }
    }

    /// Error information from a response.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Error information from a response.",
    ///  "type": "object",
    ///  "required": [
    ///    "message",
    ///    "request_id"
    ///  ],
    ///  "properties": {
    ///    "error_code": {
    ///      "type": "string"
    ///    },
    ///    "message": {
    ///      "type": "string"
    ///    },
    ///    "request_id": {
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Error {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub error_code: Option<String>,
        pub message: String,
        pub request_id: String,
    }

    impl From<&Error> for Error {
        fn from(value: &Error) -> Self {
            value.clone()
        }
    }

    impl Error {
        pub fn builder() -> builder::Error {
            Default::default()
        }
    }

    /// ExternalIp
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "object",
    ///  "required": [
    ///    "ip",
    ///    "kind"
    ///  ],
    ///  "properties": {
    ///    "ip": {
    ///      "type": "string",
    ///      "format": "ip"
    ///    },
    ///    "kind": {
    ///      "$ref": "#/components/schemas/IpKind"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ExternalIp {
        pub ip: std::net::IpAddr,
        pub kind: IpKind,
    }

    impl From<&ExternalIp> for ExternalIp {
        fn from(value: &ExternalIp) -> Self {
            value.clone()
        }
    }

    impl ExternalIp {
        pub fn builder() -> builder::ExternalIp {
            Default::default()
        }
    }

    /// Parameters for creating an external IP address for instances.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for creating an external IP address for
    /// instances.",
    ///  "oneOf": [
    ///    {
    ///      "description": "An IP address providing both inbound and outbound
    /// access. The address is automatically-assigned from the provided IP Pool,
    /// or all available pools if not specified.",
    ///      "type": "object",
    ///      "required": [
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "pool_name": {
    ///          "allOf": [
    ///            {
    ///              "$ref": "#/components/schemas/Name"
    ///            }
    ///          ]
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "ephemeral"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "An IP address providing both inbound and outbound
    /// access. The address is an existing Floating IP object assigned to the
    /// current project.\n\nThe floating IP must not be in use by another
    /// instance or service.",
    ///      "type": "object",
    ///      "required": [
    ///        "floating_ip_name",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "floating_ip_name": {
    ///          "$ref": "#/components/schemas/Name"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "floating"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum ExternalIpCreate {
        /// An IP address providing both inbound and outbound access. The
        /// address is automatically-assigned from the provided IP Pool, or all
        /// available pools if not specified.
        #[serde(rename = "ephemeral")]
        Ephemeral {
            #[serde(default, skip_serializing_if = "Option::is_none")]
            pool_name: Option<Name>,
        },
        /// An IP address providing both inbound and outbound access. The
        /// address is an existing Floating IP object assigned to the current
        /// project.
        ///
        /// The floating IP must not be in use by another instance or service.
        #[serde(rename = "floating")]
        Floating { floating_ip_name: Name },
    }

    impl From<&ExternalIpCreate> for ExternalIpCreate {
        fn from(value: &ExternalIpCreate) -> Self {
            value.clone()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/ExternalIp"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ExternalIpResultsPage {
        /// list of items on this page of results
        pub items: Vec<ExternalIp>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&ExternalIpResultsPage> for ExternalIpResultsPage {
        fn from(value: &ExternalIpResultsPage) -> Self {
            value.clone()
        }
    }

    impl ExternalIpResultsPage {
        pub fn builder() -> builder::ExternalIpResultsPage {
            Default::default()
        }
    }

    /// Parameters for finalizing a disk
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for finalizing a disk",
    ///  "type": "object",
    ///  "properties": {
    ///    "snapshot_name": {
    ///      "description": "If specified a snapshot of the disk will be created
    /// with the given name during finalization. If not specified, a snapshot
    /// for the disk will _not_ be created. A snapshot can be manually created
    /// once the disk transitions into the `Detached` state.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct FinalizeDisk {
        /// If specified a snapshot of the disk will be created with the given
        /// name during finalization. If not specified, a snapshot for the disk
        /// will _not_ be created. A snapshot can be manually created once the
        /// disk transitions into the `Detached` state.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub snapshot_name: Option<Name>,
    }

    impl From<&FinalizeDisk> for FinalizeDisk {
        fn from(value: &FinalizeDisk) -> Self {
            value.clone()
        }
    }

    impl FinalizeDisk {
        pub fn builder() -> builder::FinalizeDisk {
            Default::default()
        }
    }

    /// FleetRole
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "string",
    ///  "enum": [
    ///    "admin",
    ///    "collaborator",
    ///    "viewer"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum FleetRole {
        #[serde(rename = "admin")]
        Admin,
        #[serde(rename = "collaborator")]
        Collaborator,
        #[serde(rename = "viewer")]
        Viewer,
    }

    impl From<&FleetRole> for FleetRole {
        fn from(value: &FleetRole) -> Self {
            value.clone()
        }
    }

    impl ToString for FleetRole {
        fn to_string(&self) -> String {
            match *self {
                Self::Admin => "admin".to_string(),
                Self::Collaborator => "collaborator".to_string(),
                Self::Viewer => "viewer".to_string(),
            }
        }
    }

    impl std::str::FromStr for FleetRole {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "admin" => Ok(Self::Admin),
                "collaborator" => Ok(Self::Collaborator),
                "viewer" => Ok(Self::Viewer),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for FleetRole {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for FleetRole {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for FleetRole {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// Policy for a particular resource
    ///
    /// Note that the Policy only describes access granted explicitly for this
    /// resource.  The policies of parent resources can also cause a user to
    /// have access to this resource.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Policy for a particular resource\n\nNote that the
    /// Policy only describes access granted explicitly for this resource.  The
    /// policies of parent resources can also cause a user to have access to
    /// this resource.",
    ///  "type": "object",
    ///  "required": [
    ///    "role_assignments"
    ///  ],
    ///  "properties": {
    ///    "role_assignments": {
    ///      "description": "Roles directly assigned on this resource",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/FleetRoleRoleAssignment"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct FleetRolePolicy {
        /// Roles directly assigned on this resource
        pub role_assignments: Vec<FleetRoleRoleAssignment>,
    }

    impl From<&FleetRolePolicy> for FleetRolePolicy {
        fn from(value: &FleetRolePolicy) -> Self {
            value.clone()
        }
    }

    impl FleetRolePolicy {
        pub fn builder() -> builder::FleetRolePolicy {
            Default::default()
        }
    }

    /// Describes the assignment of a particular role on a particular resource
    /// to a particular identity (user, group, etc.)
    ///
    /// The resource is not part of this structure.  Rather, `RoleAssignment`s
    /// are put into a `Policy` and that Policy is applied to a particular
    /// resource.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Describes the assignment of a particular role on a
    /// particular resource to a particular identity (user, group, etc.)\n\nThe
    /// resource is not part of this structure.  Rather, `RoleAssignment`s are
    /// put into a `Policy` and that Policy is applied to a particular
    /// resource.",
    ///  "type": "object",
    ///  "required": [
    ///    "identity_id",
    ///    "identity_type",
    ///    "role_name"
    ///  ],
    ///  "properties": {
    ///    "identity_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "identity_type": {
    ///      "$ref": "#/components/schemas/IdentityType"
    ///    },
    ///    "role_name": {
    ///      "$ref": "#/components/schemas/FleetRole"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct FleetRoleRoleAssignment {
        pub identity_id: uuid::Uuid,
        pub identity_type: IdentityType,
        pub role_name: FleetRole,
    }

    impl From<&FleetRoleRoleAssignment> for FleetRoleRoleAssignment {
        fn from(value: &FleetRoleRoleAssignment) -> Self {
            value.clone()
        }
    }

    impl FleetRoleRoleAssignment {
        pub fn builder() -> builder::FleetRoleRoleAssignment {
            Default::default()
        }
    }

    /// A Floating IP is a well-known IP address which can be attached and
    /// detached from instances.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A Floating IP is a well-known IP address which can be
    /// attached and detached from instances.",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "ip",
    ///    "name",
    ///    "project_id",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "instance_id": {
    ///      "description": "The ID of the instance that this Floating IP is
    /// attached to, if it is presently in use.",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "uuid"
    ///    },
    ///    "ip": {
    ///      "description": "The IP address held by this resource.",
    ///      "type": "string",
    ///      "format": "ip"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "project_id": {
    ///      "description": "The project this resource exists within.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct FloatingIp {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// The ID of the instance that this Floating IP is attached to, if it
        /// is presently in use.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub instance_id: Option<uuid::Uuid>,
        /// The IP address held by this resource.
        pub ip: std::net::IpAddr,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// The project this resource exists within.
        pub project_id: uuid::Uuid,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&FloatingIp> for FloatingIp {
        fn from(value: &FloatingIp) -> Self {
            value.clone()
        }
    }

    impl FloatingIp {
        pub fn builder() -> builder::FloatingIp {
            Default::default()
        }
    }

    /// Parameters for creating a new floating IP address for instances.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for creating a new floating IP address for
    /// instances.",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "name"
    ///  ],
    ///  "properties": {
    ///    "address": {
    ///      "description": "An IP address to reserve for use as a floating IP.
    /// This field is optional: when not set, an address will be automatically
    /// chosen from `pool`. If set, then the IP must be available in the
    /// resolved `pool`.",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "ip"
    ///    },
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "pool": {
    ///      "description": "The parent IP pool that a floating IP is pulled
    /// from. If unset, the default pool is selected.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct FloatingIpCreate {
        /// An IP address to reserve for use as a floating IP. This field is
        /// optional: when not set, an address will be automatically chosen from
        /// `pool`. If set, then the IP must be available in the resolved
        /// `pool`.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub address: Option<std::net::IpAddr>,
        pub description: String,
        pub name: Name,
        /// The parent IP pool that a floating IP is pulled from. If unset, the
        /// default pool is selected.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub pool: Option<NameOrId>,
    }

    impl From<&FloatingIpCreate> for FloatingIpCreate {
        fn from(value: &FloatingIpCreate) -> Self {
            value.clone()
        }
    }

    impl FloatingIpCreate {
        pub fn builder() -> builder::FloatingIpCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/FloatingIp"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct FloatingIpResultsPage {
        /// list of items on this page of results
        pub items: Vec<FloatingIp>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&FloatingIpResultsPage> for FloatingIpResultsPage {
        fn from(value: &FloatingIpResultsPage) -> Self {
            value.clone()
        }
    }

    impl FloatingIpResultsPage {
        pub fn builder() -> builder::FloatingIpResultsPage {
            Default::default()
        }
    }

    /// View of a Group
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a Group",
    ///  "type": "object",
    ///  "required": [
    ///    "display_name",
    ///    "id",
    ///    "silo_id"
    ///  ],
    ///  "properties": {
    ///    "display_name": {
    ///      "description": "Human-readable name that can identify the group",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "silo_id": {
    ///      "description": "Uuid of the silo to which this group belongs",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Group {
        /// Human-readable name that can identify the group
        pub display_name: String,
        pub id: uuid::Uuid,
        /// Uuid of the silo to which this group belongs
        pub silo_id: uuid::Uuid,
    }

    impl From<&Group> for Group {
        fn from(value: &Group) -> Self {
            value.clone()
        }
    }

    impl Group {
        pub fn builder() -> builder::Group {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Group"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct GroupResultsPage {
        /// list of items on this page of results
        pub items: Vec<Group>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&GroupResultsPage> for GroupResultsPage {
        fn from(value: &GroupResultsPage) -> Self {
            value.clone()
        }
    }

    impl GroupResultsPage {
        pub fn builder() -> builder::GroupResultsPage {
            Default::default()
        }
    }

    /// Histogram metric
    ///
    /// A histogram maintains the count of any number of samples, over a set of
    /// bins. Bins are specified on construction via their _left_ edges,
    /// inclusive. There can't be any "gaps" in the bins, and an additional bin
    /// may be added to the left, right, or both so that the bins extend to the
    /// entire range of the support.
    ///
    /// Note that any gaps, unsorted bins, or non-finite values will result in
    /// an error.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Histogram metric\n\nA histogram maintains the count of
    /// any number of samples, over a set of bins. Bins are specified on
    /// construction via their _left_ edges, inclusive. There can't be any
    /// \"gaps\" in the bins, and an additional bin may be added to the left,
    /// right, or both so that the bins extend to the entire range of the
    /// support.\n\nNote that any gaps, unsorted bins, or non-finite values will
    /// result in an error.",
    ///  "type": "object",
    ///  "required": [
    ///    "bins",
    ///    "n_samples",
    ///    "start_time"
    ///  ],
    ///  "properties": {
    ///    "bins": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Bindouble"
    ///      }
    ///    },
    ///    "n_samples": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Histogramdouble {
        pub bins: Vec<Bindouble>,
        pub n_samples: u64,
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Histogramdouble> for Histogramdouble {
        fn from(value: &Histogramdouble) -> Self {
            value.clone()
        }
    }

    impl Histogramdouble {
        pub fn builder() -> builder::Histogramdouble {
            Default::default()
        }
    }

    /// Histogram metric
    ///
    /// A histogram maintains the count of any number of samples, over a set of
    /// bins. Bins are specified on construction via their _left_ edges,
    /// inclusive. There can't be any "gaps" in the bins, and an additional bin
    /// may be added to the left, right, or both so that the bins extend to the
    /// entire range of the support.
    ///
    /// Note that any gaps, unsorted bins, or non-finite values will result in
    /// an error.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Histogram metric\n\nA histogram maintains the count of
    /// any number of samples, over a set of bins. Bins are specified on
    /// construction via their _left_ edges, inclusive. There can't be any
    /// \"gaps\" in the bins, and an additional bin may be added to the left,
    /// right, or both so that the bins extend to the entire range of the
    /// support.\n\nNote that any gaps, unsorted bins, or non-finite values will
    /// result in an error.",
    ///  "type": "object",
    ///  "required": [
    ///    "bins",
    ///    "n_samples",
    ///    "start_time"
    ///  ],
    ///  "properties": {
    ///    "bins": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Binfloat"
    ///      }
    ///    },
    ///    "n_samples": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Histogramfloat {
        pub bins: Vec<Binfloat>,
        pub n_samples: u64,
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Histogramfloat> for Histogramfloat {
        fn from(value: &Histogramfloat) -> Self {
            value.clone()
        }
    }

    impl Histogramfloat {
        pub fn builder() -> builder::Histogramfloat {
            Default::default()
        }
    }

    /// Histogram metric
    ///
    /// A histogram maintains the count of any number of samples, over a set of
    /// bins. Bins are specified on construction via their _left_ edges,
    /// inclusive. There can't be any "gaps" in the bins, and an additional bin
    /// may be added to the left, right, or both so that the bins extend to the
    /// entire range of the support.
    ///
    /// Note that any gaps, unsorted bins, or non-finite values will result in
    /// an error.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Histogram metric\n\nA histogram maintains the count of
    /// any number of samples, over a set of bins. Bins are specified on
    /// construction via their _left_ edges, inclusive. There can't be any
    /// \"gaps\" in the bins, and an additional bin may be added to the left,
    /// right, or both so that the bins extend to the entire range of the
    /// support.\n\nNote that any gaps, unsorted bins, or non-finite values will
    /// result in an error.",
    ///  "type": "object",
    ///  "required": [
    ///    "bins",
    ///    "n_samples",
    ///    "start_time"
    ///  ],
    ///  "properties": {
    ///    "bins": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Binint16"
    ///      }
    ///    },
    ///    "n_samples": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Histogramint16 {
        pub bins: Vec<Binint16>,
        pub n_samples: u64,
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Histogramint16> for Histogramint16 {
        fn from(value: &Histogramint16) -> Self {
            value.clone()
        }
    }

    impl Histogramint16 {
        pub fn builder() -> builder::Histogramint16 {
            Default::default()
        }
    }

    /// Histogram metric
    ///
    /// A histogram maintains the count of any number of samples, over a set of
    /// bins. Bins are specified on construction via their _left_ edges,
    /// inclusive. There can't be any "gaps" in the bins, and an additional bin
    /// may be added to the left, right, or both so that the bins extend to the
    /// entire range of the support.
    ///
    /// Note that any gaps, unsorted bins, or non-finite values will result in
    /// an error.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Histogram metric\n\nA histogram maintains the count of
    /// any number of samples, over a set of bins. Bins are specified on
    /// construction via their _left_ edges, inclusive. There can't be any
    /// \"gaps\" in the bins, and an additional bin may be added to the left,
    /// right, or both so that the bins extend to the entire range of the
    /// support.\n\nNote that any gaps, unsorted bins, or non-finite values will
    /// result in an error.",
    ///  "type": "object",
    ///  "required": [
    ///    "bins",
    ///    "n_samples",
    ///    "start_time"
    ///  ],
    ///  "properties": {
    ///    "bins": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Binint32"
    ///      }
    ///    },
    ///    "n_samples": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Histogramint32 {
        pub bins: Vec<Binint32>,
        pub n_samples: u64,
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Histogramint32> for Histogramint32 {
        fn from(value: &Histogramint32) -> Self {
            value.clone()
        }
    }

    impl Histogramint32 {
        pub fn builder() -> builder::Histogramint32 {
            Default::default()
        }
    }

    /// Histogram metric
    ///
    /// A histogram maintains the count of any number of samples, over a set of
    /// bins. Bins are specified on construction via their _left_ edges,
    /// inclusive. There can't be any "gaps" in the bins, and an additional bin
    /// may be added to the left, right, or both so that the bins extend to the
    /// entire range of the support.
    ///
    /// Note that any gaps, unsorted bins, or non-finite values will result in
    /// an error.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Histogram metric\n\nA histogram maintains the count of
    /// any number of samples, over a set of bins. Bins are specified on
    /// construction via their _left_ edges, inclusive. There can't be any
    /// \"gaps\" in the bins, and an additional bin may be added to the left,
    /// right, or both so that the bins extend to the entire range of the
    /// support.\n\nNote that any gaps, unsorted bins, or non-finite values will
    /// result in an error.",
    ///  "type": "object",
    ///  "required": [
    ///    "bins",
    ///    "n_samples",
    ///    "start_time"
    ///  ],
    ///  "properties": {
    ///    "bins": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Binint64"
    ///      }
    ///    },
    ///    "n_samples": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Histogramint64 {
        pub bins: Vec<Binint64>,
        pub n_samples: u64,
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Histogramint64> for Histogramint64 {
        fn from(value: &Histogramint64) -> Self {
            value.clone()
        }
    }

    impl Histogramint64 {
        pub fn builder() -> builder::Histogramint64 {
            Default::default()
        }
    }

    /// Histogram metric
    ///
    /// A histogram maintains the count of any number of samples, over a set of
    /// bins. Bins are specified on construction via their _left_ edges,
    /// inclusive. There can't be any "gaps" in the bins, and an additional bin
    /// may be added to the left, right, or both so that the bins extend to the
    /// entire range of the support.
    ///
    /// Note that any gaps, unsorted bins, or non-finite values will result in
    /// an error.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Histogram metric\n\nA histogram maintains the count of
    /// any number of samples, over a set of bins. Bins are specified on
    /// construction via their _left_ edges, inclusive. There can't be any
    /// \"gaps\" in the bins, and an additional bin may be added to the left,
    /// right, or both so that the bins extend to the entire range of the
    /// support.\n\nNote that any gaps, unsorted bins, or non-finite values will
    /// result in an error.",
    ///  "type": "object",
    ///  "required": [
    ///    "bins",
    ///    "n_samples",
    ///    "start_time"
    ///  ],
    ///  "properties": {
    ///    "bins": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Binint8"
    ///      }
    ///    },
    ///    "n_samples": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Histogramint8 {
        pub bins: Vec<Binint8>,
        pub n_samples: u64,
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Histogramint8> for Histogramint8 {
        fn from(value: &Histogramint8) -> Self {
            value.clone()
        }
    }

    impl Histogramint8 {
        pub fn builder() -> builder::Histogramint8 {
            Default::default()
        }
    }

    /// Histogram metric
    ///
    /// A histogram maintains the count of any number of samples, over a set of
    /// bins. Bins are specified on construction via their _left_ edges,
    /// inclusive. There can't be any "gaps" in the bins, and an additional bin
    /// may be added to the left, right, or both so that the bins extend to the
    /// entire range of the support.
    ///
    /// Note that any gaps, unsorted bins, or non-finite values will result in
    /// an error.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Histogram metric\n\nA histogram maintains the count of
    /// any number of samples, over a set of bins. Bins are specified on
    /// construction via their _left_ edges, inclusive. There can't be any
    /// \"gaps\" in the bins, and an additional bin may be added to the left,
    /// right, or both so that the bins extend to the entire range of the
    /// support.\n\nNote that any gaps, unsorted bins, or non-finite values will
    /// result in an error.",
    ///  "type": "object",
    ///  "required": [
    ///    "bins",
    ///    "n_samples",
    ///    "start_time"
    ///  ],
    ///  "properties": {
    ///    "bins": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Binuint16"
    ///      }
    ///    },
    ///    "n_samples": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Histogramuint16 {
        pub bins: Vec<Binuint16>,
        pub n_samples: u64,
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Histogramuint16> for Histogramuint16 {
        fn from(value: &Histogramuint16) -> Self {
            value.clone()
        }
    }

    impl Histogramuint16 {
        pub fn builder() -> builder::Histogramuint16 {
            Default::default()
        }
    }

    /// Histogram metric
    ///
    /// A histogram maintains the count of any number of samples, over a set of
    /// bins. Bins are specified on construction via their _left_ edges,
    /// inclusive. There can't be any "gaps" in the bins, and an additional bin
    /// may be added to the left, right, or both so that the bins extend to the
    /// entire range of the support.
    ///
    /// Note that any gaps, unsorted bins, or non-finite values will result in
    /// an error.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Histogram metric\n\nA histogram maintains the count of
    /// any number of samples, over a set of bins. Bins are specified on
    /// construction via their _left_ edges, inclusive. There can't be any
    /// \"gaps\" in the bins, and an additional bin may be added to the left,
    /// right, or both so that the bins extend to the entire range of the
    /// support.\n\nNote that any gaps, unsorted bins, or non-finite values will
    /// result in an error.",
    ///  "type": "object",
    ///  "required": [
    ///    "bins",
    ///    "n_samples",
    ///    "start_time"
    ///  ],
    ///  "properties": {
    ///    "bins": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Binuint32"
    ///      }
    ///    },
    ///    "n_samples": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Histogramuint32 {
        pub bins: Vec<Binuint32>,
        pub n_samples: u64,
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Histogramuint32> for Histogramuint32 {
        fn from(value: &Histogramuint32) -> Self {
            value.clone()
        }
    }

    impl Histogramuint32 {
        pub fn builder() -> builder::Histogramuint32 {
            Default::default()
        }
    }

    /// Histogram metric
    ///
    /// A histogram maintains the count of any number of samples, over a set of
    /// bins. Bins are specified on construction via their _left_ edges,
    /// inclusive. There can't be any "gaps" in the bins, and an additional bin
    /// may be added to the left, right, or both so that the bins extend to the
    /// entire range of the support.
    ///
    /// Note that any gaps, unsorted bins, or non-finite values will result in
    /// an error.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Histogram metric\n\nA histogram maintains the count of
    /// any number of samples, over a set of bins. Bins are specified on
    /// construction via their _left_ edges, inclusive. There can't be any
    /// \"gaps\" in the bins, and an additional bin may be added to the left,
    /// right, or both so that the bins extend to the entire range of the
    /// support.\n\nNote that any gaps, unsorted bins, or non-finite values will
    /// result in an error.",
    ///  "type": "object",
    ///  "required": [
    ///    "bins",
    ///    "n_samples",
    ///    "start_time"
    ///  ],
    ///  "properties": {
    ///    "bins": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Binuint64"
    ///      }
    ///    },
    ///    "n_samples": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Histogramuint64 {
        pub bins: Vec<Binuint64>,
        pub n_samples: u64,
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Histogramuint64> for Histogramuint64 {
        fn from(value: &Histogramuint64) -> Self {
            value.clone()
        }
    }

    impl Histogramuint64 {
        pub fn builder() -> builder::Histogramuint64 {
            Default::default()
        }
    }

    /// Histogram metric
    ///
    /// A histogram maintains the count of any number of samples, over a set of
    /// bins. Bins are specified on construction via their _left_ edges,
    /// inclusive. There can't be any "gaps" in the bins, and an additional bin
    /// may be added to the left, right, or both so that the bins extend to the
    /// entire range of the support.
    ///
    /// Note that any gaps, unsorted bins, or non-finite values will result in
    /// an error.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Histogram metric\n\nA histogram maintains the count of
    /// any number of samples, over a set of bins. Bins are specified on
    /// construction via their _left_ edges, inclusive. There can't be any
    /// \"gaps\" in the bins, and an additional bin may be added to the left,
    /// right, or both so that the bins extend to the entire range of the
    /// support.\n\nNote that any gaps, unsorted bins, or non-finite values will
    /// result in an error.",
    ///  "type": "object",
    ///  "required": [
    ///    "bins",
    ///    "n_samples",
    ///    "start_time"
    ///  ],
    ///  "properties": {
    ///    "bins": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Binuint8"
    ///      }
    ///    },
    ///    "n_samples": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    },
    ///    "start_time": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Histogramuint8 {
        pub bins: Vec<Binuint8>,
        pub n_samples: u64,
        pub start_time: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Histogramuint8> for Histogramuint8 {
        fn from(value: &Histogramuint8) -> Self {
            value.clone()
        }
    }

    impl Histogramuint8 {
        pub fn builder() -> builder::Histogramuint8 {
            Default::default()
        }
    }

    /// Supported set of sort modes for scanning by id only.
    ///
    /// Currently, we only support scanning in ascending order.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Supported set of sort modes for scanning by id
    /// only.\n\nCurrently, we only support scanning in ascending order.",
    ///  "oneOf": [
    ///    {
    ///      "description": "sort in increasing order of \"id\"",
    ///      "type": "string",
    ///      "enum": [
    ///        "id_ascending"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum IdSortMode {
        /// sort in increasing order of "id"
        #[serde(rename = "id_ascending")]
        IdAscending,
    }

    impl From<&IdSortMode> for IdSortMode {
        fn from(value: &IdSortMode) -> Self {
            value.clone()
        }
    }

    impl ToString for IdSortMode {
        fn to_string(&self) -> String {
            match *self {
                Self::IdAscending => "id_ascending".to_string(),
            }
        }
    }

    impl std::str::FromStr for IdSortMode {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "id_ascending" => Ok(Self::IdAscending),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for IdSortMode {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for IdSortMode {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for IdSortMode {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// View of an Identity Provider
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of an Identity Provider",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "name",
    ///    "provider_type",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "provider_type": {
    ///      "description": "Identity provider type",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/IdentityProviderType"
    ///        }
    ///      ]
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct IdentityProvider {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// Identity provider type
        pub provider_type: IdentityProviderType,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&IdentityProvider> for IdentityProvider {
        fn from(value: &IdentityProvider) -> Self {
            value.clone()
        }
    }

    impl IdentityProvider {
        pub fn builder() -> builder::IdentityProvider {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/IdentityProvider"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct IdentityProviderResultsPage {
        /// list of items on this page of results
        pub items: Vec<IdentityProvider>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&IdentityProviderResultsPage> for IdentityProviderResultsPage {
        fn from(value: &IdentityProviderResultsPage) -> Self {
            value.clone()
        }
    }

    impl IdentityProviderResultsPage {
        pub fn builder() -> builder::IdentityProviderResultsPage {
            Default::default()
        }
    }

    /// IdentityProviderType
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "oneOf": [
    ///    {
    ///      "description": "SAML identity provider",
    ///      "type": "string",
    ///      "enum": [
    ///        "saml"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum IdentityProviderType {
        /// SAML identity provider
        #[serde(rename = "saml")]
        Saml,
    }

    impl From<&IdentityProviderType> for IdentityProviderType {
        fn from(value: &IdentityProviderType) -> Self {
            value.clone()
        }
    }

    impl ToString for IdentityProviderType {
        fn to_string(&self) -> String {
            match *self {
                Self::Saml => "saml".to_string(),
            }
        }
    }

    impl std::str::FromStr for IdentityProviderType {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "saml" => Ok(Self::Saml),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for IdentityProviderType {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for IdentityProviderType {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for IdentityProviderType {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// Describes what kind of identity is described by an id
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Describes what kind of identity is described by an id",
    ///  "type": "string",
    ///  "enum": [
    ///    "silo_user",
    ///    "silo_group"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum IdentityType {
        #[serde(rename = "silo_user")]
        SiloUser,
        #[serde(rename = "silo_group")]
        SiloGroup,
    }

    impl From<&IdentityType> for IdentityType {
        fn from(value: &IdentityType) -> Self {
            value.clone()
        }
    }

    impl ToString for IdentityType {
        fn to_string(&self) -> String {
            match *self {
                Self::SiloUser => "silo_user".to_string(),
                Self::SiloGroup => "silo_group".to_string(),
            }
        }
    }

    impl std::str::FromStr for IdentityType {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "silo_user" => Ok(Self::SiloUser),
                "silo_group" => Ok(Self::SiloGroup),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for IdentityType {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for IdentityType {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for IdentityType {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// IdpMetadataSource
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "oneOf": [
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "url"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "url"
    ///          ]
    ///        },
    ///        "url": {
    ///          "type": "string"
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "data",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "data": {
    ///          "type": "string"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "base64_encoded_xml"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum IdpMetadataSource {
        #[serde(rename = "url")]
        Url { url: String },
        #[serde(rename = "base64_encoded_xml")]
        Base64EncodedXml { data: String },
    }

    impl From<&IdpMetadataSource> for IdpMetadataSource {
        fn from(value: &IdpMetadataSource) -> Self {
            value.clone()
        }
    }

    /// View of an image
    ///
    /// If `project_id` is present then the image is only visible inside that
    /// project. If it's not present then the image is visible to all projects
    /// in the silo.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of an image\n\nIf `project_id` is present then the
    /// image is only visible inside that project. If it's not present then the
    /// image is visible to all projects in the silo.",
    ///  "type": "object",
    ///  "required": [
    ///    "block_size",
    ///    "description",
    ///    "id",
    ///    "name",
    ///    "os",
    ///    "size",
    ///    "time_created",
    ///    "time_modified",
    ///    "version"
    ///  ],
    ///  "properties": {
    ///    "block_size": {
    ///      "description": "size of blocks in bytes",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    },
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "digest": {
    ///      "description": "Hash of the image contents, if applicable",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Digest"
    ///        }
    ///      ]
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "os": {
    ///      "description": "The family of the operating system like Debian,
    /// Ubuntu, etc.",
    ///      "type": "string"
    ///    },
    ///    "project_id": {
    ///      "description": "ID of the parent project if the image is a project
    /// image",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "uuid"
    ///    },
    ///    "size": {
    ///      "description": "total size in bytes",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "version": {
    ///      "description": "Version of the operating system",
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Image {
        /// size of blocks in bytes
        pub block_size: ByteCount,
        /// human-readable free-form text about a resource
        pub description: String,
        /// Hash of the image contents, if applicable
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub digest: Option<Digest>,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// The family of the operating system like Debian, Ubuntu, etc.
        pub os: String,
        /// ID of the parent project if the image is a project image
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub project_id: Option<uuid::Uuid>,
        /// total size in bytes
        pub size: ByteCount,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        /// Version of the operating system
        pub version: String,
    }

    impl From<&Image> for Image {
        fn from(value: &Image) -> Self {
            value.clone()
        }
    }

    impl Image {
        pub fn builder() -> builder::Image {
            Default::default()
        }
    }

    /// Create-time parameters for an `Image`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for an `Image`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "name",
    ///    "os",
    ///    "source",
    ///    "version"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "os": {
    ///      "description": "The family of the operating system (e.g. Debian,
    /// Ubuntu, etc.)",
    ///      "type": "string"
    ///    },
    ///    "source": {
    ///      "description": "The source of the image's contents.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ImageSource"
    ///        }
    ///      ]
    ///    },
    ///    "version": {
    ///      "description": "The version of the operating system (e.g. 18.04,
    /// 20.04, etc.)",
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ImageCreate {
        pub description: String,
        pub name: Name,
        /// The family of the operating system (e.g. Debian, Ubuntu, etc.)
        pub os: String,
        /// The source of the image's contents.
        pub source: ImageSource,
        /// The version of the operating system (e.g. 18.04, 20.04, etc.)
        pub version: String,
    }

    impl From<&ImageCreate> for ImageCreate {
        fn from(value: &ImageCreate) -> Self {
            value.clone()
        }
    }

    impl ImageCreate {
        pub fn builder() -> builder::ImageCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Image"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ImageResultsPage {
        /// list of items on this page of results
        pub items: Vec<Image>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&ImageResultsPage> for ImageResultsPage {
        fn from(value: &ImageResultsPage) -> Self {
            value.clone()
        }
    }

    impl ImageResultsPage {
        pub fn builder() -> builder::ImageResultsPage {
            Default::default()
        }
    }

    /// The source of the underlying image.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The source of the underlying image.",
    ///  "oneOf": [
    ///    {
    ///      "type": "object",
    ///      "required": [
    ///        "id",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "id": {
    ///          "type": "string",
    ///          "format": "uuid"
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "snapshot"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Boot the Alpine ISO that ships with the Propolis
    /// zone. Intended for development purposes only.",
    ///      "type": "object",
    ///      "required": [
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "you_can_boot_anything_as_long_as_its_alpine"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type", content = "id")]
    pub enum ImageSource {
        #[serde(rename = "snapshot")]
        Snapshot(uuid::Uuid),
        #[serde(rename = "you_can_boot_anything_as_long_as_its_alpine")]
        YouCanBootAnythingAsLongAsItsAlpine,
    }

    impl From<&ImageSource> for ImageSource {
        fn from(value: &ImageSource) -> Self {
            value.clone()
        }
    }

    impl From<uuid::Uuid> for ImageSource {
        fn from(value: uuid::Uuid) -> Self {
            Self::Snapshot(value)
        }
    }

    /// Parameters for importing blocks with a bulk write
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for importing blocks with a bulk write",
    ///  "type": "object",
    ///  "required": [
    ///    "base64_encoded_data",
    ///    "offset"
    ///  ],
    ///  "properties": {
    ///    "base64_encoded_data": {
    ///      "type": "string"
    ///    },
    ///    "offset": {
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ImportBlocksBulkWrite {
        pub base64_encoded_data: String,
        pub offset: u64,
    }

    impl From<&ImportBlocksBulkWrite> for ImportBlocksBulkWrite {
        fn from(value: &ImportBlocksBulkWrite) -> Self {
            value.clone()
        }
    }

    impl ImportBlocksBulkWrite {
        pub fn builder() -> builder::ImportBlocksBulkWrite {
            Default::default()
        }
    }

    /// View of an Instance
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of an Instance",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "hostname",
    ///    "id",
    ///    "memory",
    ///    "name",
    ///    "ncpus",
    ///    "project_id",
    ///    "run_state",
    ///    "time_created",
    ///    "time_modified",
    ///    "time_run_state_updated"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "hostname": {
    ///      "description": "RFC1035-compliant hostname for the Instance.",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "memory": {
    ///      "description": "memory allocated for this Instance",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "ncpus": {
    ///      "description": "number of CPUs allocated for this Instance",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/InstanceCpuCount"
    ///        }
    ///      ]
    ///    },
    ///    "project_id": {
    ///      "description": "id for the project containing this Instance",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "run_state": {
    ///      "$ref": "#/components/schemas/InstanceState"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_run_state_updated": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Instance {
        /// human-readable free-form text about a resource
        pub description: String,
        /// RFC1035-compliant hostname for the Instance.
        pub hostname: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// memory allocated for this Instance
        pub memory: ByteCount,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// number of CPUs allocated for this Instance
        pub ncpus: InstanceCpuCount,
        /// id for the project containing this Instance
        pub project_id: uuid::Uuid,
        pub run_state: InstanceState,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        pub time_run_state_updated: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Instance> for Instance {
        fn from(value: &Instance) -> Self {
            value.clone()
        }
    }

    impl Instance {
        pub fn builder() -> builder::Instance {
            Default::default()
        }
    }

    /// The number of CPUs in an Instance
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The number of CPUs in an Instance",
    ///  "type": "integer",
    ///  "format": "uint16",
    ///  "minimum": 0.0
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct InstanceCpuCount(pub u16);
    impl std::ops::Deref for InstanceCpuCount {
        type Target = u16;
        fn deref(&self) -> &u16 {
            &self.0
        }
    }

    impl From<InstanceCpuCount> for u16 {
        fn from(value: InstanceCpuCount) -> Self {
            value.0
        }
    }

    impl From<&InstanceCpuCount> for InstanceCpuCount {
        fn from(value: &InstanceCpuCount) -> Self {
            value.clone()
        }
    }

    impl From<u16> for InstanceCpuCount {
        fn from(value: u16) -> Self {
            Self(value)
        }
    }

    impl std::str::FromStr for InstanceCpuCount {
        type Err = <u16 as std::str::FromStr>::Err;
        fn from_str(value: &str) -> Result<Self, Self::Err> {
            Ok(Self(value.parse()?))
        }
    }

    impl std::convert::TryFrom<&str> for InstanceCpuCount {
        type Error = <u16 as std::str::FromStr>::Err;
        fn try_from(value: &str) -> Result<Self, Self::Error> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for InstanceCpuCount {
        type Error = <u16 as std::str::FromStr>::Err;
        fn try_from(value: &String) -> Result<Self, Self::Error> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for InstanceCpuCount {
        type Error = <u16 as std::str::FromStr>::Err;
        fn try_from(value: String) -> Result<Self, Self::Error> {
            value.parse()
        }
    }

    impl ToString for InstanceCpuCount {
        fn to_string(&self) -> String {
            self.0.to_string()
        }
    }

    /// Create-time parameters for an `Instance`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for an `Instance`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "hostname",
    ///    "memory",
    ///    "name",
    ///    "ncpus"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "disks": {
    ///      "description": "The disks to be created or attached for this
    /// instance.",
    ///      "default": [],
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/InstanceDiskAttachment"
    ///      }
    ///    },
    ///    "external_ips": {
    ///      "description": "The external IP addresses provided to this
    /// instance.\n\nBy default, all instances have outbound connectivity, but
    /// no inbound connectivity. These external addresses can be used to provide
    /// a fixed, known IP address for making inbound connections to the
    /// instance.",
    ///      "default": [],
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/ExternalIpCreate"
    ///      }
    ///    },
    ///    "hostname": {
    ///      "type": "string"
    ///    },
    ///    "memory": {
    ///      "$ref": "#/components/schemas/ByteCount"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "ncpus": {
    ///      "$ref": "#/components/schemas/InstanceCpuCount"
    ///    },
    ///    "network_interfaces": {
    ///      "description": "The network interfaces to be created for this
    /// instance.",
    ///      "default": {
    ///        "type": "default"
    ///      },
    ///      "allOf": [
    ///        {
    ///          "$ref":
    /// "#/components/schemas/InstanceNetworkInterfaceAttachment"
    ///        }
    ///      ]
    ///    },
    ///    "start": {
    ///      "description": "Should this instance be started upon creation; true
    /// by default.",
    ///      "default": true,
    ///      "type": "boolean"
    ///    },
    ///    "user_data": {
    ///      "description": "User data for instance initialization systems (such
    /// as cloud-init). Must be a Base64-encoded string, as specified in RFC
    /// 4648 § 4 (+ and / characters with padding). Maximum 32 KiB unencoded
    /// data.",
    ///      "default": "",
    ///      "type": "string",
    ///      "format": "byte"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct InstanceCreate {
        pub description: String,
        /// The disks to be created or attached for this instance.
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        pub disks: Vec<InstanceDiskAttachment>,
        /// The external IP addresses provided to this instance.
        ///
        /// By default, all instances have outbound connectivity, but no inbound
        /// connectivity. These external addresses can be used to provide a
        /// fixed, known IP address for making inbound connections to the
        /// instance.
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        pub external_ips: Vec<ExternalIpCreate>,
        pub hostname: String,
        pub memory: ByteCount,
        pub name: Name,
        pub ncpus: InstanceCpuCount,
        /// The network interfaces to be created for this instance.
        #[serde(default = "defaults::instance_create_network_interfaces")]
        pub network_interfaces: InstanceNetworkInterfaceAttachment,
        /// Should this instance be started upon creation; true by default.
        #[serde(default = "defaults::default_bool::<true>")]
        pub start: bool,
        /// User data for instance initialization systems (such as cloud-init).
        /// Must be a Base64-encoded string, as specified in RFC 4648 § 4 (+ and
        /// / characters with padding). Maximum 32 KiB unencoded data.
        #[serde(default)]
        pub user_data: String,
    }

    impl From<&InstanceCreate> for InstanceCreate {
        fn from(value: &InstanceCreate) -> Self {
            value.clone()
        }
    }

    impl InstanceCreate {
        pub fn builder() -> builder::InstanceCreate {
            Default::default()
        }
    }

    /// Describe the instance's disks at creation time
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Describe the instance's disks at creation time",
    ///  "oneOf": [
    ///    {
    ///      "description": "During instance creation, create and attach disks",
    ///      "type": "object",
    ///      "required": [
    ///        "description",
    ///        "disk_source",
    ///        "name",
    ///        "size",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "description": {
    ///          "type": "string"
    ///        },
    ///        "disk_source": {
    ///          "description": "initial source for this disk",
    ///          "allOf": [
    ///            {
    ///              "$ref": "#/components/schemas/DiskSource"
    ///            }
    ///          ]
    ///        },
    ///        "name": {
    ///          "$ref": "#/components/schemas/Name"
    ///        },
    ///        "size": {
    ///          "description": "total size of the Disk in bytes",
    ///          "allOf": [
    ///            {
    ///              "$ref": "#/components/schemas/ByteCount"
    ///            }
    ///          ]
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "create"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "During instance creation, attach this disk",
    ///      "type": "object",
    ///      "required": [
    ///        "name",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "name": {
    ///          "description": "A disk name to attach",
    ///          "allOf": [
    ///            {
    ///              "$ref": "#/components/schemas/Name"
    ///            }
    ///          ]
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "attach"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type")]
    pub enum InstanceDiskAttachment {
        /// During instance creation, create and attach disks
        #[serde(rename = "create")]
        Create {
            description: String,
            /// initial source for this disk
            disk_source: DiskSource,
            name: Name,
            /// total size of the Disk in bytes
            size: ByteCount,
        },
        /// During instance creation, attach this disk
        #[serde(rename = "attach")]
        Attach {
            /// A disk name to attach
            name: Name,
        },
    }

    impl From<&InstanceDiskAttachment> for InstanceDiskAttachment {
        fn from(value: &InstanceDiskAttachment) -> Self {
            value.clone()
        }
    }

    /// Migration parameters for an `Instance`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Migration parameters for an `Instance`",
    ///  "type": "object",
    ///  "required": [
    ///    "dst_sled_id"
    ///  ],
    ///  "properties": {
    ///    "dst_sled_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct InstanceMigrate {
        pub dst_sled_id: uuid::Uuid,
    }

    impl From<&InstanceMigrate> for InstanceMigrate {
        fn from(value: &InstanceMigrate) -> Self {
            value.clone()
        }
    }

    impl InstanceMigrate {
        pub fn builder() -> builder::InstanceMigrate {
            Default::default()
        }
    }

    /// An `InstanceNetworkInterface` represents a virtual network interface
    /// device attached to an instance.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "An `InstanceNetworkInterface` represents a virtual
    /// network interface device attached to an instance.",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "instance_id",
    ///    "ip",
    ///    "mac",
    ///    "name",
    ///    "primary",
    ///    "subnet_id",
    ///    "time_created",
    ///    "time_modified",
    ///    "vpc_id"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "instance_id": {
    ///      "description": "The Instance to which the interface belongs.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "ip": {
    ///      "description": "The IP address assigned to this interface.",
    ///      "type": "string",
    ///      "format": "ip"
    ///    },
    ///    "mac": {
    ///      "description": "The MAC address assigned to this interface.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/MacAddr"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "primary": {
    ///      "description": "True if this interface is the primary for the
    /// instance to which it's attached.",
    ///      "type": "boolean"
    ///    },
    ///    "subnet_id": {
    ///      "description": "The subnet to which the interface belongs.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "vpc_id": {
    ///      "description": "The VPC to which the interface belongs.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct InstanceNetworkInterface {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// The Instance to which the interface belongs.
        pub instance_id: uuid::Uuid,
        /// The IP address assigned to this interface.
        pub ip: std::net::IpAddr,
        /// The MAC address assigned to this interface.
        pub mac: MacAddr,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// True if this interface is the primary for the instance to which it's
        /// attached.
        pub primary: bool,
        /// The subnet to which the interface belongs.
        pub subnet_id: uuid::Uuid,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        /// The VPC to which the interface belongs.
        pub vpc_id: uuid::Uuid,
    }

    impl From<&InstanceNetworkInterface> for InstanceNetworkInterface {
        fn from(value: &InstanceNetworkInterface) -> Self {
            value.clone()
        }
    }

    impl InstanceNetworkInterface {
        pub fn builder() -> builder::InstanceNetworkInterface {
            Default::default()
        }
    }

    /// Describes an attachment of an `InstanceNetworkInterface` to an
    /// `Instance`, at the time the instance is created.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Describes an attachment of an
    /// `InstanceNetworkInterface` to an `Instance`, at the time the instance is
    /// created.",
    ///  "oneOf": [
    ///    {
    ///      "description": "Create one or more `InstanceNetworkInterface`s for
    /// the `Instance`.\n\nIf more than one interface is provided, then the
    /// first will be designated the primary interface for the instance.",
    ///      "type": "object",
    ///      "required": [
    ///        "params",
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "params": {
    ///          "type": "array",
    ///          "items": {
    ///            "$ref": "#/components/schemas/InstanceNetworkInterfaceCreate"
    ///          }
    ///        },
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "create"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "The default networking configuration for an
    /// instance is to create a single primary interface with an
    /// automatically-assigned IP address. The IP will be pulled from the
    /// Project's default VPC / VPC Subnet.",
    ///      "type": "object",
    ///      "required": [
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "default"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "No network interfaces at all will be created for
    /// the instance.",
    ///      "type": "object",
    ///      "required": [
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "none"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type", content = "params")]
    pub enum InstanceNetworkInterfaceAttachment {
        /// Create one or more `InstanceNetworkInterface`s for the `Instance`.
        ///
        /// If more than one interface is provided, then the first will be
        /// designated the primary interface for the instance.
        #[serde(rename = "create")]
        Create(Vec<InstanceNetworkInterfaceCreate>),
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "none")]
        None,
    }

    impl From<&InstanceNetworkInterfaceAttachment> for InstanceNetworkInterfaceAttachment {
        fn from(value: &InstanceNetworkInterfaceAttachment) -> Self {
            value.clone()
        }
    }

    impl From<Vec<InstanceNetworkInterfaceCreate>> for InstanceNetworkInterfaceAttachment {
        fn from(value: Vec<InstanceNetworkInterfaceCreate>) -> Self {
            Self::Create(value)
        }
    }

    /// Create-time parameters for an `InstanceNetworkInterface`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for an
    /// `InstanceNetworkInterface`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "name",
    ///    "subnet_name",
    ///    "vpc_name"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "ip": {
    ///      "description": "The IP address for the interface. One will be
    /// auto-assigned if not provided.",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "ip"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "subnet_name": {
    ///      "description": "The VPC Subnet in which to create the interface.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "vpc_name": {
    ///      "description": "The VPC in which to create the interface.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct InstanceNetworkInterfaceCreate {
        pub description: String,
        /// The IP address for the interface. One will be auto-assigned if not
        /// provided.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub ip: Option<std::net::IpAddr>,
        pub name: Name,
        /// The VPC Subnet in which to create the interface.
        pub subnet_name: Name,
        /// The VPC in which to create the interface.
        pub vpc_name: Name,
    }

    impl From<&InstanceNetworkInterfaceCreate> for InstanceNetworkInterfaceCreate {
        fn from(value: &InstanceNetworkInterfaceCreate) -> Self {
            value.clone()
        }
    }

    impl InstanceNetworkInterfaceCreate {
        pub fn builder() -> builder::InstanceNetworkInterfaceCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/InstanceNetworkInterface"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct InstanceNetworkInterfaceResultsPage {
        /// list of items on this page of results
        pub items: Vec<InstanceNetworkInterface>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&InstanceNetworkInterfaceResultsPage> for InstanceNetworkInterfaceResultsPage {
        fn from(value: &InstanceNetworkInterfaceResultsPage) -> Self {
            value.clone()
        }
    }

    impl InstanceNetworkInterfaceResultsPage {
        pub fn builder() -> builder::InstanceNetworkInterfaceResultsPage {
            Default::default()
        }
    }

    /// Parameters for updating an `InstanceNetworkInterface`
    ///
    /// Note that modifying IP addresses for an interface is not yet supported,
    /// a new interface must be created instead.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for updating an
    /// `InstanceNetworkInterface`\n\nNote that modifying IP addresses for an
    /// interface is not yet supported, a new interface must be created
    /// instead.",
    ///  "type": "object",
    ///  "properties": {
    ///    "description": {
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    },
    ///    "name": {
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "primary": {
    ///      "description": "Make a secondary interface the instance's primary
    /// interface.\n\nIf applied to a secondary interface, that interface will
    /// become the primary on the next reboot of the instance. Note that this
    /// may have implications for routing between instances, as the new primary
    /// interface will be on a distinct subnet from the previous primary
    /// interface.\n\nNote that this can only be used to select a new primary
    /// interface for an instance. Requests to change the primary interface into
    /// a secondary will return an error.",
    ///      "default": false,
    ///      "type": "boolean"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct InstanceNetworkInterfaceUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
        /// Make a secondary interface the instance's primary interface.
        ///
        /// If applied to a secondary interface, that interface will become the
        /// primary on the next reboot of the instance. Note that this may have
        /// implications for routing between instances, as the new primary
        /// interface will be on a distinct subnet from the previous primary
        /// interface.
        ///
        /// Note that this can only be used to select a new primary interface
        /// for an instance. Requests to change the primary interface into a
        /// secondary will return an error.
        #[serde(default)]
        pub primary: bool,
    }

    impl From<&InstanceNetworkInterfaceUpdate> for InstanceNetworkInterfaceUpdate {
        fn from(value: &InstanceNetworkInterfaceUpdate) -> Self {
            value.clone()
        }
    }

    impl InstanceNetworkInterfaceUpdate {
        pub fn builder() -> builder::InstanceNetworkInterfaceUpdate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Instance"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct InstanceResultsPage {
        /// list of items on this page of results
        pub items: Vec<Instance>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&InstanceResultsPage> for InstanceResultsPage {
        fn from(value: &InstanceResultsPage) -> Self {
            value.clone()
        }
    }

    impl InstanceResultsPage {
        pub fn builder() -> builder::InstanceResultsPage {
            Default::default()
        }
    }

    /// Contents of an Instance's serial console buffer.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Contents of an Instance's serial console buffer.",
    ///  "type": "object",
    ///  "required": [
    ///    "data",
    ///    "last_byte_offset"
    ///  ],
    ///  "properties": {
    ///    "data": {
    ///      "description": "The bytes starting from the requested offset up to
    /// either the end of the buffer or the request's `max_bytes`. Provided as a
    /// u8 array rather than a string, as it may not be UTF-8.",
    ///      "type": "array",
    ///      "items": {
    ///        "type": "integer",
    ///        "format": "uint8",
    ///        "minimum": 0.0
    ///      }
    ///    },
    ///    "last_byte_offset": {
    ///      "description": "The absolute offset since boot (suitable for use as
    /// `byte_offset` in a subsequent request) of the last byte returned in
    /// `data`.",
    ///      "type": "integer",
    ///      "format": "uint64",
    ///      "minimum": 0.0
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct InstanceSerialConsoleData {
        /// The bytes starting from the requested offset up to either the end of
        /// the buffer or the request's `max_bytes`. Provided as a u8 array
        /// rather than a string, as it may not be UTF-8.
        pub data: Vec<u8>,
        /// The absolute offset since boot (suitable for use as `byte_offset` in
        /// a subsequent request) of the last byte returned in `data`.
        pub last_byte_offset: u64,
    }

    impl From<&InstanceSerialConsoleData> for InstanceSerialConsoleData {
        fn from(value: &InstanceSerialConsoleData) -> Self {
            value.clone()
        }
    }

    impl InstanceSerialConsoleData {
        pub fn builder() -> builder::InstanceSerialConsoleData {
            Default::default()
        }
    }

    /// Running state of an Instance (primarily: booted or stopped)
    ///
    /// This typically reflects whether it's starting, running, stopping, or
    /// stopped, but also includes states related to the Instance's lifecycle
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Running state of an Instance (primarily: booted or
    /// stopped)\n\nThis typically reflects whether it's starting, running,
    /// stopping, or stopped, but also includes states related to the Instance's
    /// lifecycle",
    ///  "oneOf": [
    ///    {
    ///      "description": "The instance is being created.",
    ///      "type": "string",
    ///      "enum": [
    ///        "creating"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The instance is currently starting up.",
    ///      "type": "string",
    ///      "enum": [
    ///        "starting"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The instance is currently running.",
    ///      "type": "string",
    ///      "enum": [
    ///        "running"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The instance has been requested to stop and a
    /// transition to \"Stopped\" is imminent.",
    ///      "type": "string",
    ///      "enum": [
    ///        "stopping"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The instance is currently stopped.",
    ///      "type": "string",
    ///      "enum": [
    ///        "stopped"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The instance is in the process of rebooting - it
    /// will remain in the \"rebooting\" state until the VM is starting once
    /// more.",
    ///      "type": "string",
    ///      "enum": [
    ///        "rebooting"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The instance is in the process of migrating - it will remain in the \"migrating\" state until the migration process is complete and the destination propolis is ready to continue execution.",
    ///      "type": "string",
    ///      "enum": [
    ///        "migrating"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The instance is attempting to recover from a
    /// failure.",
    ///      "type": "string",
    ///      "enum": [
    ///        "repairing"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The instance has encountered a failure.",
    ///      "type": "string",
    ///      "enum": [
    ///        "failed"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The instance has been deleted.",
    ///      "type": "string",
    ///      "enum": [
    ///        "destroyed"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum InstanceState {
        /// The instance is being created.
        #[serde(rename = "creating")]
        Creating,
        /// The instance is currently starting up.
        #[serde(rename = "starting")]
        Starting,
        /// The instance is currently running.
        #[serde(rename = "running")]
        Running,
        /// The instance has been requested to stop and a transition to
        /// "Stopped" is imminent.
        #[serde(rename = "stopping")]
        Stopping,
        /// The instance is currently stopped.
        #[serde(rename = "stopped")]
        Stopped,
        /// The instance is in the process of rebooting - it will remain in the
        /// "rebooting" state until the VM is starting once more.
        #[serde(rename = "rebooting")]
        Rebooting,
        /// The instance is in the process of migrating - it will remain in the
        /// "migrating" state until the migration process is complete and the
        /// destination propolis is ready to continue execution.
        #[serde(rename = "migrating")]
        Migrating,
        /// The instance is attempting to recover from a failure.
        #[serde(rename = "repairing")]
        Repairing,
        /// The instance has encountered a failure.
        #[serde(rename = "failed")]
        Failed,
        /// The instance has been deleted.
        #[serde(rename = "destroyed")]
        Destroyed,
    }

    impl From<&InstanceState> for InstanceState {
        fn from(value: &InstanceState) -> Self {
            value.clone()
        }
    }

    impl ToString for InstanceState {
        fn to_string(&self) -> String {
            match *self {
                Self::Creating => "creating".to_string(),
                Self::Starting => "starting".to_string(),
                Self::Running => "running".to_string(),
                Self::Stopping => "stopping".to_string(),
                Self::Stopped => "stopped".to_string(),
                Self::Rebooting => "rebooting".to_string(),
                Self::Migrating => "migrating".to_string(),
                Self::Repairing => "repairing".to_string(),
                Self::Failed => "failed".to_string(),
                Self::Destroyed => "destroyed".to_string(),
            }
        }
    }

    impl std::str::FromStr for InstanceState {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "creating" => Ok(Self::Creating),
                "starting" => Ok(Self::Starting),
                "running" => Ok(Self::Running),
                "stopping" => Ok(Self::Stopping),
                "stopped" => Ok(Self::Stopped),
                "rebooting" => Ok(Self::Rebooting),
                "migrating" => Ok(Self::Migrating),
                "repairing" => Ok(Self::Repairing),
                "failed" => Ok(Self::Failed),
                "destroyed" => Ok(Self::Destroyed),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for InstanceState {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for InstanceState {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for InstanceState {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// The kind of an external IP address for an instance
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The kind of an external IP address for an instance",
    ///  "type": "string",
    ///  "enum": [
    ///    "ephemeral",
    ///    "floating"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum IpKind {
        #[serde(rename = "ephemeral")]
        Ephemeral,
        #[serde(rename = "floating")]
        Floating,
    }

    impl From<&IpKind> for IpKind {
        fn from(value: &IpKind) -> Self {
            value.clone()
        }
    }

    impl ToString for IpKind {
        fn to_string(&self) -> String {
            match *self {
                Self::Ephemeral => "ephemeral".to_string(),
                Self::Floating => "floating".to_string(),
            }
        }
    }

    impl std::str::FromStr for IpKind {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "ephemeral" => Ok(Self::Ephemeral),
                "floating" => Ok(Self::Floating),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for IpKind {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for IpKind {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for IpKind {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// IpNet
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "oneOf": [
    ///    {
    ///      "title": "v4",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv4Net"
    ///        }
    ///      ]
    ///    },
    ///    {
    ///      "title": "v6",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv6Net"
    ///        }
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(untagged)]
    pub enum IpNet {
        V4(Ipv4Net),
        V6(Ipv6Net),
    }

    impl From<&IpNet> for IpNet {
        fn from(value: &IpNet) -> Self {
            value.clone()
        }
    }

    impl std::str::FromStr for IpNet {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            if let Ok(v) = value.parse() {
                Ok(Self::V4(v))
            } else if let Ok(v) = value.parse() {
                Ok(Self::V6(v))
            } else {
                Err("string conversion failed for all variants")
            }
        }
    }

    impl std::convert::TryFrom<&str> for IpNet {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for IpNet {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for IpNet {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl ToString for IpNet {
        fn to_string(&self) -> String {
            match self {
                Self::V4(x) => x.to_string(),
                Self::V6(x) => x.to_string(),
            }
        }
    }

    impl From<Ipv4Net> for IpNet {
        fn from(value: Ipv4Net) -> Self {
            Self::V4(value)
        }
    }

    impl From<Ipv6Net> for IpNet {
        fn from(value: Ipv6Net) -> Self {
            Self::V6(value)
        }
    }

    /// Identity-related metadata that's included in nearly all public API
    /// objects
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Identity-related metadata that's included in nearly all
    /// public API objects",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "is_default",
    ///    "name",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "is_default": {
    ///      "type": "boolean"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "silo_id": {
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "uuid"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct IpPool {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        pub is_default: bool,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub silo_id: Option<uuid::Uuid>,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&IpPool> for IpPool {
        fn from(value: &IpPool) -> Self {
            value.clone()
        }
    }

    impl IpPool {
        pub fn builder() -> builder::IpPool {
            Default::default()
        }
    }

    /// Create-time parameters for an `IpPool`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for an `IpPool`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "name"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "is_default": {
    ///      "description": "Whether the IP pool is considered a default pool
    /// for its scope (fleet or silo). If a pool is marked default and is
    /// associated with a silo, instances created in that silo will draw IPs
    /// from that pool unless another pool is specified at instance create
    /// time.",
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "silo": {
    ///      "description": "If an IP pool is associated with a silo, instance
    /// IP allocations in that silo can draw from that pool.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct IpPoolCreate {
        pub description: String,
        /// Whether the IP pool is considered a default pool for its scope
        /// (fleet or silo). If a pool is marked default and is associated with
        /// a silo, instances created in that silo will draw IPs from that pool
        /// unless another pool is specified at instance create time.
        #[serde(default)]
        pub is_default: bool,
        pub name: Name,
        /// If an IP pool is associated with a silo, instance IP allocations in
        /// that silo can draw from that pool.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub silo: Option<NameOrId>,
    }

    impl From<&IpPoolCreate> for IpPoolCreate {
        fn from(value: &IpPoolCreate) -> Self {
            value.clone()
        }
    }

    impl IpPoolCreate {
        pub fn builder() -> builder::IpPoolCreate {
            Default::default()
        }
    }

    /// IpPoolRange
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "object",
    ///  "required": [
    ///    "id",
    ///    "ip_pool_id",
    ///    "range",
    ///    "time_created"
    ///  ],
    ///  "properties": {
    ///    "id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "ip_pool_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "range": {
    ///      "$ref": "#/components/schemas/IpRange"
    ///    },
    ///    "time_created": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct IpPoolRange {
        pub id: uuid::Uuid,
        pub ip_pool_id: uuid::Uuid,
        pub range: IpRange,
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&IpPoolRange> for IpPoolRange {
        fn from(value: &IpPoolRange) -> Self {
            value.clone()
        }
    }

    impl IpPoolRange {
        pub fn builder() -> builder::IpPoolRange {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/IpPoolRange"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct IpPoolRangeResultsPage {
        /// list of items on this page of results
        pub items: Vec<IpPoolRange>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&IpPoolRangeResultsPage> for IpPoolRangeResultsPage {
        fn from(value: &IpPoolRangeResultsPage) -> Self {
            value.clone()
        }
    }

    impl IpPoolRangeResultsPage {
        pub fn builder() -> builder::IpPoolRangeResultsPage {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/IpPool"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct IpPoolResultsPage {
        /// list of items on this page of results
        pub items: Vec<IpPool>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&IpPoolResultsPage> for IpPoolResultsPage {
        fn from(value: &IpPoolResultsPage) -> Self {
            value.clone()
        }
    }

    impl IpPoolResultsPage {
        pub fn builder() -> builder::IpPoolResultsPage {
            Default::default()
        }
    }

    /// Parameters for updating an IP Pool
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for updating an IP Pool",
    ///  "type": "object",
    ///  "properties": {
    ///    "description": {
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    },
    ///    "name": {
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct IpPoolUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }

    impl From<&IpPoolUpdate> for IpPoolUpdate {
        fn from(value: &IpPoolUpdate) -> Self {
            value.clone()
        }
    }

    impl IpPoolUpdate {
        pub fn builder() -> builder::IpPoolUpdate {
            Default::default()
        }
    }

    /// IpRange
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "oneOf": [
    ///    {
    ///      "title": "v4",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv4Range"
    ///        }
    ///      ]
    ///    },
    ///    {
    ///      "title": "v6",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv6Range"
    ///        }
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(untagged)]
    pub enum IpRange {
        V4(Ipv4Range),
        V6(Ipv6Range),
    }

    impl From<&IpRange> for IpRange {
        fn from(value: &IpRange) -> Self {
            value.clone()
        }
    }

    impl From<Ipv4Range> for IpRange {
        fn from(value: Ipv4Range) -> Self {
            Self::V4(value)
        }
    }

    impl From<Ipv6Range> for IpRange {
        fn from(value: Ipv6Range) -> Self {
            Self::V6(value)
        }
    }

    /// An IPv4 subnet, including prefix and subnet mask
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "title": "An IPv4 subnet",
    ///  "description": "An IPv4 subnet, including prefix and subnet mask",
    ///  "examples": [
    ///    "192.168.1.0/24"
    ///  ],
    ///  "type": "string",
    ///  "pattern":
    /// "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.
    /// ){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/
    /// ([0-9]|1[0-9]|2[0-9]|3[0-2])$"
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, schemars :: JsonSchema,
    )]
    pub struct Ipv4Net(String);
    impl std::ops::Deref for Ipv4Net {
        type Target = String;
        fn deref(&self) -> &String {
            &self.0
        }
    }

    impl From<Ipv4Net> for String {
        fn from(value: Ipv4Net) -> Self {
            value.0
        }
    }

    impl From<&Ipv4Net> for Ipv4Net {
        fn from(value: &Ipv4Net) -> Self {
            value.clone()
        }
    }

    impl std::str::FromStr for Ipv4Net {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            if regress::Regex::new(
                "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.\
                 ){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/\
                 ([0-9]|1[0-9]|2[0-9]|3[0-2])$",
            )
            .unwrap()
            .find(value)
            .is_none()
            {
                return Err("doesn't match pattern \
                            \"^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.\
                            ){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/\
                            ([0-9]|1[0-9]|2[0-9]|3[0-2])$\"");
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<&str> for Ipv4Net {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for Ipv4Net {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for Ipv4Net {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl<'de> serde::Deserialize<'de> for Ipv4Net {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            String::deserialize(deserializer)?
                .parse()
                .map_err(|e: &'static str| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    /// A non-decreasing IPv4 address range, inclusive of both ends.
    ///
    /// The first address must be less than or equal to the last address.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A non-decreasing IPv4 address range, inclusive of both
    /// ends.\n\nThe first address must be less than or equal to the last
    /// address.",
    ///  "type": "object",
    ///  "required": [
    ///    "first",
    ///    "last"
    ///  ],
    ///  "properties": {
    ///    "first": {
    ///      "type": "string",
    ///      "format": "ipv4"
    ///    },
    ///    "last": {
    ///      "type": "string",
    ///      "format": "ipv4"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Ipv4Range {
        pub first: std::net::Ipv4Addr,
        pub last: std::net::Ipv4Addr,
    }

    impl From<&Ipv4Range> for Ipv4Range {
        fn from(value: &Ipv4Range) -> Self {
            value.clone()
        }
    }

    impl Ipv4Range {
        pub fn builder() -> builder::Ipv4Range {
            Default::default()
        }
    }

    /// An IPv6 subnet, including prefix and subnet mask
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "title": "An IPv6 subnet",
    ///  "description": "An IPv6 subnet, including prefix and subnet mask",
    ///  "examples": [
    ///    "fd12:3456::/64"
    ///  ],
    ///  "type": "string",
    ///  "pattern":
    /// "^([fF][dD])[0-9a-fA-F]{2}:(([0-9a-fA-F]{1,4}:){6}[0-9a-fA-F]{1,
    /// 4}|([0-9a-fA-F]{1,4}:){1,6}:)([0-9a-fA-F]{1,4})?\\/
    /// ([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$"
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, schemars :: JsonSchema,
    )]
    pub struct Ipv6Net(String);
    impl std::ops::Deref for Ipv6Net {
        type Target = String;
        fn deref(&self) -> &String {
            &self.0
        }
    }

    impl From<Ipv6Net> for String {
        fn from(value: Ipv6Net) -> Self {
            value.0
        }
    }

    impl From<&Ipv6Net> for Ipv6Net {
        fn from(value: &Ipv6Net) -> Self {
            value.clone()
        }
    }

    impl std::str::FromStr for Ipv6Net {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            if regress::Regex::new(
                "^([fF][dD])[0-9a-fA-F]{2}:(([0-9a-fA-F]{1,4}:){6}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,\
                 4}:){1,6}:)([0-9a-fA-F]{1,4})?\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$",
            )
            .unwrap()
            .find(value)
            .is_none()
            {
                return Err("doesn't match pattern \
                            \"^([fF][dD])[0-9a-fA-F]{2}:(([0-9a-fA-F]{1,4}:){6}[0-9a-fA-F]{1,\
                            4}|([0-9a-fA-F]{1,4}:){1,6}:)([0-9a-fA-F]{1,4})?\\/\
                            ([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$\"");
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<&str> for Ipv6Net {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for Ipv6Net {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for Ipv6Net {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl<'de> serde::Deserialize<'de> for Ipv6Net {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            String::deserialize(deserializer)?
                .parse()
                .map_err(|e: &'static str| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    /// A non-decreasing IPv6 address range, inclusive of both ends.
    ///
    /// The first address must be less than or equal to the last address.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A non-decreasing IPv6 address range, inclusive of both
    /// ends.\n\nThe first address must be less than or equal to the last
    /// address.",
    ///  "type": "object",
    ///  "required": [
    ///    "first",
    ///    "last"
    ///  ],
    ///  "properties": {
    ///    "first": {
    ///      "type": "string",
    ///      "format": "ipv6"
    ///    },
    ///    "last": {
    ///      "type": "string",
    ///      "format": "ipv6"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Ipv6Range {
        pub first: std::net::Ipv6Addr,
        pub last: std::net::Ipv6Addr,
    }

    impl From<&Ipv6Range> for Ipv6Range {
        fn from(value: &Ipv6Range) -> Self {
            value.clone()
        }
    }

    impl Ipv6Range {
        pub fn builder() -> builder::Ipv6Range {
            Default::default()
        }
    }

    /// An inclusive-inclusive range of IP ports. The second port may be omitted
    /// to represent a single port
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "title": "A range of IP ports",
    ///  "description": "An inclusive-inclusive range of IP ports. The second
    /// port may be omitted to represent a single port",
    ///  "examples": [
    ///    "22"
    ///  ],
    ///  "type": "string",
    ///  "maxLength": 11,
    ///  "minLength": 1,
    ///  "pattern": "^[0-9]{1,5}(-[0-9]{1,5})?$"
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, schemars :: JsonSchema,
    )]
    pub struct L4PortRange(String);
    impl std::ops::Deref for L4PortRange {
        type Target = String;
        fn deref(&self) -> &String {
            &self.0
        }
    }

    impl From<L4PortRange> for String {
        fn from(value: L4PortRange) -> Self {
            value.0
        }
    }

    impl From<&L4PortRange> for L4PortRange {
        fn from(value: &L4PortRange) -> Self {
            value.clone()
        }
    }

    impl std::str::FromStr for L4PortRange {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            if value.len() > 11usize {
                return Err("longer than 11 characters");
            }
            if value.len() < 1usize {
                return Err("shorter than 1 characters");
            }
            if regress::Regex::new("^[0-9]{1,5}(-[0-9]{1,5})?$")
                .unwrap()
                .find(value)
                .is_none()
            {
                return Err("doesn't match pattern \"^[0-9]{1,5}(-[0-9]{1,5})?$\"");
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<&str> for L4PortRange {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for L4PortRange {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for L4PortRange {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl<'de> serde::Deserialize<'de> for L4PortRange {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            String::deserialize(deserializer)?
                .parse()
                .map_err(|e: &'static str| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    /// Switch link configuration.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Switch link configuration.",
    ///  "type": "object",
    ///  "required": [
    ///    "autoneg",
    ///    "fec",
    ///    "lldp",
    ///    "mtu",
    ///    "speed"
    ///  ],
    ///  "properties": {
    ///    "autoneg": {
    ///      "description": "Whether or not to set autonegotiation",
    ///      "type": "boolean"
    ///    },
    ///    "fec": {
    ///      "description": "The forward error correction mode of the link.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/LinkFec"
    ///        }
    ///      ]
    ///    },
    ///    "lldp": {
    ///      "description": "The link-layer discovery protocol (LLDP)
    /// configuration for the link.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/LldpServiceConfig"
    ///        }
    ///      ]
    ///    },
    ///    "mtu": {
    ///      "description": "Maximum transmission unit for the link.",
    ///      "type": "integer",
    ///      "format": "uint16",
    ///      "minimum": 0.0
    ///    },
    ///    "speed": {
    ///      "description": "The speed of the link.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/LinkSpeed"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct LinkConfig {
        /// Whether or not to set autonegotiation
        pub autoneg: bool,
        /// The forward error correction mode of the link.
        pub fec: LinkFec,
        /// The link-layer discovery protocol (LLDP) configuration for the link.
        pub lldp: LldpServiceConfig,
        /// Maximum transmission unit for the link.
        pub mtu: u16,
        /// The speed of the link.
        pub speed: LinkSpeed,
    }

    impl From<&LinkConfig> for LinkConfig {
        fn from(value: &LinkConfig) -> Self {
            value.clone()
        }
    }

    impl LinkConfig {
        pub fn builder() -> builder::LinkConfig {
            Default::default()
        }
    }

    /// The forward error correction mode of a link.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The forward error correction mode of a link.",
    ///  "oneOf": [
    ///    {
    ///      "description": "Firecode foward error correction.",
    ///      "type": "string",
    ///      "enum": [
    ///        "firecode"
    ///      ]
    ///    },
    ///    {
    ///      "description": "No forward error correction.",
    ///      "type": "string",
    ///      "enum": [
    ///        "none"
    ///      ]
    ///    },
    ///    {
    ///      "description": "Reed-Solomon forward error correction.",
    ///      "type": "string",
    ///      "enum": [
    ///        "rs"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum LinkFec {
        /// Firecode foward error correction.
        #[serde(rename = "firecode")]
        Firecode,
        /// No forward error correction.
        #[serde(rename = "none")]
        None,
        /// Reed-Solomon forward error correction.
        #[serde(rename = "rs")]
        Rs,
    }

    impl From<&LinkFec> for LinkFec {
        fn from(value: &LinkFec) -> Self {
            value.clone()
        }
    }

    impl ToString for LinkFec {
        fn to_string(&self) -> String {
            match *self {
                Self::Firecode => "firecode".to_string(),
                Self::None => "none".to_string(),
                Self::Rs => "rs".to_string(),
            }
        }
    }

    impl std::str::FromStr for LinkFec {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "firecode" => Ok(Self::Firecode),
                "none" => Ok(Self::None),
                "rs" => Ok(Self::Rs),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for LinkFec {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for LinkFec {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for LinkFec {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// The speed of a link.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The speed of a link.",
    ///  "oneOf": [
    ///    {
    ///      "description": "Zero gigabits per second.",
    ///      "type": "string",
    ///      "enum": [
    ///        "speed0_g"
    ///      ]
    ///    },
    ///    {
    ///      "description": "1 gigabit per second.",
    ///      "type": "string",
    ///      "enum": [
    ///        "speed1_g"
    ///      ]
    ///    },
    ///    {
    ///      "description": "10 gigabits per second.",
    ///      "type": "string",
    ///      "enum": [
    ///        "speed10_g"
    ///      ]
    ///    },
    ///    {
    ///      "description": "25 gigabits per second.",
    ///      "type": "string",
    ///      "enum": [
    ///        "speed25_g"
    ///      ]
    ///    },
    ///    {
    ///      "description": "40 gigabits per second.",
    ///      "type": "string",
    ///      "enum": [
    ///        "speed40_g"
    ///      ]
    ///    },
    ///    {
    ///      "description": "50 gigabits per second.",
    ///      "type": "string",
    ///      "enum": [
    ///        "speed50_g"
    ///      ]
    ///    },
    ///    {
    ///      "description": "100 gigabits per second.",
    ///      "type": "string",
    ///      "enum": [
    ///        "speed100_g"
    ///      ]
    ///    },
    ///    {
    ///      "description": "200 gigabits per second.",
    ///      "type": "string",
    ///      "enum": [
    ///        "speed200_g"
    ///      ]
    ///    },
    ///    {
    ///      "description": "400 gigabits per second.",
    ///      "type": "string",
    ///      "enum": [
    ///        "speed400_g"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum LinkSpeed {
        /// Zero gigabits per second.
        #[serde(rename = "speed0_g")]
        Speed0G,
        /// 1 gigabit per second.
        #[serde(rename = "speed1_g")]
        Speed1G,
        /// 10 gigabits per second.
        #[serde(rename = "speed10_g")]
        Speed10G,
        /// 25 gigabits per second.
        #[serde(rename = "speed25_g")]
        Speed25G,
        /// 40 gigabits per second.
        #[serde(rename = "speed40_g")]
        Speed40G,
        /// 50 gigabits per second.
        #[serde(rename = "speed50_g")]
        Speed50G,
        /// 100 gigabits per second.
        #[serde(rename = "speed100_g")]
        Speed100G,
        /// 200 gigabits per second.
        #[serde(rename = "speed200_g")]
        Speed200G,
        /// 400 gigabits per second.
        #[serde(rename = "speed400_g")]
        Speed400G,
    }

    impl From<&LinkSpeed> for LinkSpeed {
        fn from(value: &LinkSpeed) -> Self {
            value.clone()
        }
    }

    impl ToString for LinkSpeed {
        fn to_string(&self) -> String {
            match *self {
                Self::Speed0G => "speed0_g".to_string(),
                Self::Speed1G => "speed1_g".to_string(),
                Self::Speed10G => "speed10_g".to_string(),
                Self::Speed25G => "speed25_g".to_string(),
                Self::Speed40G => "speed40_g".to_string(),
                Self::Speed50G => "speed50_g".to_string(),
                Self::Speed100G => "speed100_g".to_string(),
                Self::Speed200G => "speed200_g".to_string(),
                Self::Speed400G => "speed400_g".to_string(),
            }
        }
    }

    impl std::str::FromStr for LinkSpeed {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "speed0_g" => Ok(Self::Speed0G),
                "speed1_g" => Ok(Self::Speed1G),
                "speed10_g" => Ok(Self::Speed10G),
                "speed25_g" => Ok(Self::Speed25G),
                "speed40_g" => Ok(Self::Speed40G),
                "speed50_g" => Ok(Self::Speed50G),
                "speed100_g" => Ok(Self::Speed100G),
                "speed200_g" => Ok(Self::Speed200G),
                "speed400_g" => Ok(Self::Speed400G),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for LinkSpeed {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for LinkSpeed {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for LinkSpeed {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// The LLDP configuration associated with a port. LLDP may be either
    /// enabled or disabled, if enabled, an LLDP configuration must be provided
    /// by name or id.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The LLDP configuration associated with a port. LLDP may
    /// be either enabled or disabled, if enabled, an LLDP configuration must be
    /// provided by name or id.",
    ///  "type": "object",
    ///  "required": [
    ///    "enabled"
    ///  ],
    ///  "properties": {
    ///    "enabled": {
    ///      "description": "Whether or not LLDP is enabled.",
    ///      "type": "boolean"
    ///    },
    ///    "lldp_config": {
    ///      "description": "A reference to the LLDP configuration used. Must
    /// not be `None` when `enabled` is `true`.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct LldpServiceConfig {
        /// Whether or not LLDP is enabled.
        pub enabled: bool,
        /// A reference to the LLDP configuration used. Must not be `None` when
        /// `enabled` is `true`.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub lldp_config: Option<NameOrId>,
    }

    impl From<&LldpServiceConfig> for LldpServiceConfig {
        fn from(value: &LldpServiceConfig) -> Self {
            value.clone()
        }
    }

    impl LldpServiceConfig {
        pub fn builder() -> builder::LldpServiceConfig {
            Default::default()
        }
    }

    /// A loopback address is an address that is assigned to a rack switch but
    /// is not associated with any particular port.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A loopback address is an address that is assigned to a
    /// rack switch but is not associated with any particular port.",
    ///  "type": "object",
    ///  "required": [
    ///    "address",
    ///    "address_lot_block_id",
    ///    "id",
    ///    "rack_id",
    ///    "switch_location"
    ///  ],
    ///  "properties": {
    ///    "address": {
    ///      "description": "The loopback IP address and prefix length.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/IpNet"
    ///        }
    ///      ]
    ///    },
    ///    "address_lot_block_id": {
    ///      "description": "The address lot block this address came from.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "id": {
    ///      "description": "The id of the loopback address.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "rack_id": {
    ///      "description": "The id of the rack where this loopback address is
    /// assigned.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "switch_location": {
    ///      "description": "Switch location where this loopback address is
    /// assigned.",
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct LoopbackAddress {
        /// The loopback IP address and prefix length.
        pub address: IpNet,
        /// The address lot block this address came from.
        pub address_lot_block_id: uuid::Uuid,
        /// The id of the loopback address.
        pub id: uuid::Uuid,
        /// The id of the rack where this loopback address is assigned.
        pub rack_id: uuid::Uuid,
        /// Switch location where this loopback address is assigned.
        pub switch_location: String,
    }

    impl From<&LoopbackAddress> for LoopbackAddress {
        fn from(value: &LoopbackAddress) -> Self {
            value.clone()
        }
    }

    impl LoopbackAddress {
        pub fn builder() -> builder::LoopbackAddress {
            Default::default()
        }
    }

    /// Parameters for creating a loopback address on a particular rack switch.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for creating a loopback address on a
    /// particular rack switch.",
    ///  "type": "object",
    ///  "required": [
    ///    "address",
    ///    "address_lot",
    ///    "anycast",
    ///    "mask",
    ///    "rack_id",
    ///    "switch_location"
    ///  ],
    ///  "properties": {
    ///    "address": {
    ///      "description": "The address to create.",
    ///      "type": "string",
    ///      "format": "ip"
    ///    },
    ///    "address_lot": {
    ///      "description": "The name or id of the address lot this loopback
    /// address will pull an address from.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    },
    ///    "anycast": {
    ///      "description": "Address is an anycast address. This allows the
    /// address to be assigned to multiple locations simultaneously.",
    ///      "type": "boolean"
    ///    },
    ///    "mask": {
    ///      "description": "The subnet mask to use for the address.",
    ///      "type": "integer",
    ///      "format": "uint8",
    ///      "minimum": 0.0
    ///    },
    ///    "rack_id": {
    ///      "description": "The containing the switch this loopback address
    /// will be configured on.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "switch_location": {
    ///      "description": "The location of the switch within the rack this
    /// loopback address will be configured on.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct LoopbackAddressCreate {
        /// The address to create.
        pub address: std::net::IpAddr,
        /// The name or id of the address lot this loopback address will pull an
        /// address from.
        pub address_lot: NameOrId,
        /// Address is an anycast address. This allows the address to be
        /// assigned to multiple locations simultaneously.
        pub anycast: bool,
        /// The subnet mask to use for the address.
        pub mask: u8,
        /// The containing the switch this loopback address will be configured
        /// on.
        pub rack_id: uuid::Uuid,
        /// The location of the switch within the rack this loopback address
        /// will be configured on.
        pub switch_location: Name,
    }

    impl From<&LoopbackAddressCreate> for LoopbackAddressCreate {
        fn from(value: &LoopbackAddressCreate) -> Self {
            value.clone()
        }
    }

    impl LoopbackAddressCreate {
        pub fn builder() -> builder::LoopbackAddressCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/LoopbackAddress"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct LoopbackAddressResultsPage {
        /// list of items on this page of results
        pub items: Vec<LoopbackAddress>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&LoopbackAddressResultsPage> for LoopbackAddressResultsPage {
        fn from(value: &LoopbackAddressResultsPage) -> Self {
            value.clone()
        }
    }

    impl LoopbackAddressResultsPage {
        pub fn builder() -> builder::LoopbackAddressResultsPage {
            Default::default()
        }
    }

    /// A Media Access Control address, in EUI-48 format
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "title": "A MAC address",
    ///  "description": "A Media Access Control address, in EUI-48 format",
    ///  "examples": [
    ///    "ff:ff:ff:ff:ff:ff"
    ///  ],
    ///  "type": "string",
    ///  "maxLength": 17,
    ///  "minLength": 5,
    ///  "pattern": "^([0-9a-fA-F]{0,2}:){5}[0-9a-fA-F]{0,2}$"
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, schemars :: JsonSchema,
    )]
    pub struct MacAddr(String);
    impl std::ops::Deref for MacAddr {
        type Target = String;
        fn deref(&self) -> &String {
            &self.0
        }
    }

    impl From<MacAddr> for String {
        fn from(value: MacAddr) -> Self {
            value.0
        }
    }

    impl From<&MacAddr> for MacAddr {
        fn from(value: &MacAddr) -> Self {
            value.clone()
        }
    }

    impl std::str::FromStr for MacAddr {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            if value.len() > 17usize {
                return Err("longer than 17 characters");
            }
            if value.len() < 5usize {
                return Err("shorter than 5 characters");
            }
            if regress::Regex::new("^([0-9a-fA-F]{0,2}:){5}[0-9a-fA-F]{0,2}$")
                .unwrap()
                .find(value)
                .is_none()
            {
                return Err("doesn't match pattern \"^([0-9a-fA-F]{0,2}:){5}[0-9a-fA-F]{0,2}$\"");
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<&str> for MacAddr {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for MacAddr {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for MacAddr {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl<'de> serde::Deserialize<'de> for MacAddr {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            String::deserialize(deserializer)?
                .parse()
                .map_err(|e: &'static str| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    /// A `Measurement` is a timestamped datum from a single metric
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A `Measurement` is a timestamped datum from a single
    /// metric",
    ///  "type": "object",
    ///  "required": [
    ///    "datum",
    ///    "timestamp"
    ///  ],
    ///  "properties": {
    ///    "datum": {
    ///      "$ref": "#/components/schemas/Datum"
    ///    },
    ///    "timestamp": {
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Measurement {
        pub datum: Datum,
        pub timestamp: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Measurement> for Measurement {
        fn from(value: &Measurement) -> Self {
            value.clone()
        }
    }

    impl Measurement {
        pub fn builder() -> builder::Measurement {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Measurement"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct MeasurementResultsPage {
        /// list of items on this page of results
        pub items: Vec<Measurement>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&MeasurementResultsPage> for MeasurementResultsPage {
        fn from(value: &MeasurementResultsPage) -> Self {
            value.clone()
        }
    }

    impl MeasurementResultsPage {
        pub fn builder() -> builder::MeasurementResultsPage {
            Default::default()
        }
    }

    /// MissingDatum
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "object",
    ///  "required": [
    ///    "datum_type"
    ///  ],
    ///  "properties": {
    ///    "datum_type": {
    ///      "$ref": "#/components/schemas/DatumType"
    ///    },
    ///    "start_time": {
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct MissingDatum {
        pub datum_type: DatumType,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub start_time: Option<chrono::DateTime<chrono::offset::Utc>>,
    }

    impl From<&MissingDatum> for MissingDatum {
        fn from(value: &MissingDatum) -> Self {
            value.clone()
        }
    }

    impl MissingDatum {
        pub fn builder() -> builder::MissingDatum {
            Default::default()
        }
    }

    /// Names must begin with a lower case ASCII letter, be composed exclusively
    /// of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end
    /// with a '-'. Names cannot be a UUID though they may contain a UUID.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "title": "A name unique within the parent collection",
    ///  "description": "Names must begin with a lower case ASCII letter, be
    /// composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and
    /// '-', and may not end with a '-'. Names cannot be a UUID though they may
    /// contain a UUID.",
    ///  "type": "string",
    ///  "maxLength": 63,
    ///  "minLength": 1,
    ///  "pattern":
    /// "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*
    /// [a-zA-Z0-9]+)?$"
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, schemars :: JsonSchema,
    )]
    pub struct Name(String);
    impl std::ops::Deref for Name {
        type Target = String;
        fn deref(&self) -> &String {
            &self.0
        }
    }

    impl From<Name> for String {
        fn from(value: Name) -> Self {
            value.0
        }
    }

    impl From<&Name> for Name {
        fn from(value: &Name) -> Self {
            value.clone()
        }
    }

    impl std::str::FromStr for Name {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            if value.len() > 63usize {
                return Err("longer than 63 characters");
            }
            if value.len() < 1usize {
                return Err("shorter than 1 characters");
            }
            if regress :: Regex :: new ("^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$") . unwrap () . find (value) . is_none () { return Err ("doesn't match pattern \"^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$\"") ; }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<&str> for Name {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for Name {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for Name {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl<'de> serde::Deserialize<'de> for Name {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            String::deserialize(deserializer)?
                .parse()
                .map_err(|e: &'static str| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    /// NameOrId
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "oneOf": [
    ///    {
    ///      "title": "id",
    ///      "allOf": [
    ///        {
    ///          "type": "string",
    ///          "format": "uuid"
    ///        }
    ///      ]
    ///    },
    ///    {
    ///      "title": "name",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(untagged)]
    pub enum NameOrId {
        Id(uuid::Uuid),
        Name(Name),
    }

    impl From<&NameOrId> for NameOrId {
        fn from(value: &NameOrId) -> Self {
            value.clone()
        }
    }

    impl std::str::FromStr for NameOrId {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            if let Ok(v) = value.parse() {
                Ok(Self::Id(v))
            } else if let Ok(v) = value.parse() {
                Ok(Self::Name(v))
            } else {
                Err("string conversion failed for all variants")
            }
        }
    }

    impl std::convert::TryFrom<&str> for NameOrId {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for NameOrId {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for NameOrId {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl ToString for NameOrId {
        fn to_string(&self) -> String {
            match self {
                Self::Id(x) => x.to_string(),
                Self::Name(x) => x.to_string(),
            }
        }
    }

    impl From<uuid::Uuid> for NameOrId {
        fn from(value: uuid::Uuid) -> Self {
            Self::Id(value)
        }
    }

    impl From<Name> for NameOrId {
        fn from(value: Name) -> Self {
            Self::Name(value)
        }
    }

    /// Supported set of sort modes for scanning by name or id
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Supported set of sort modes for scanning by name or
    /// id",
    ///  "oneOf": [
    ///    {
    ///      "description": "sort in increasing order of \"name\"",
    ///      "type": "string",
    ///      "enum": [
    ///        "name_ascending"
    ///      ]
    ///    },
    ///    {
    ///      "description": "sort in decreasing order of \"name\"",
    ///      "type": "string",
    ///      "enum": [
    ///        "name_descending"
    ///      ]
    ///    },
    ///    {
    ///      "description": "sort in increasing order of \"id\"",
    ///      "type": "string",
    ///      "enum": [
    ///        "id_ascending"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum NameOrIdSortMode {
        /// sort in increasing order of "name"
        #[serde(rename = "name_ascending")]
        NameAscending,
        /// sort in decreasing order of "name"
        #[serde(rename = "name_descending")]
        NameDescending,
        /// sort in increasing order of "id"
        #[serde(rename = "id_ascending")]
        IdAscending,
    }

    impl From<&NameOrIdSortMode> for NameOrIdSortMode {
        fn from(value: &NameOrIdSortMode) -> Self {
            value.clone()
        }
    }

    impl ToString for NameOrIdSortMode {
        fn to_string(&self) -> String {
            match *self {
                Self::NameAscending => "name_ascending".to_string(),
                Self::NameDescending => "name_descending".to_string(),
                Self::IdAscending => "id_ascending".to_string(),
            }
        }
    }

    impl std::str::FromStr for NameOrIdSortMode {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "name_ascending" => Ok(Self::NameAscending),
                "name_descending" => Ok(Self::NameDescending),
                "id_ascending" => Ok(Self::IdAscending),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for NameOrIdSortMode {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for NameOrIdSortMode {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for NameOrIdSortMode {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// Supported set of sort modes for scanning by name only
    ///
    /// Currently, we only support scanning in ascending order.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Supported set of sort modes for scanning by name
    /// only\n\nCurrently, we only support scanning in ascending order.",
    ///  "oneOf": [
    ///    {
    ///      "description": "sort in increasing order of \"name\"",
    ///      "type": "string",
    ///      "enum": [
    ///        "name_ascending"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum NameSortMode {
        /// sort in increasing order of "name"
        #[serde(rename = "name_ascending")]
        NameAscending,
    }

    impl From<&NameSortMode> for NameSortMode {
        fn from(value: &NameSortMode) -> Self {
            value.clone()
        }
    }

    impl ToString for NameSortMode {
        fn to_string(&self) -> String {
            match *self {
                Self::NameAscending => "name_ascending".to_string(),
            }
        }
    }

    impl std::str::FromStr for NameSortMode {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "name_ascending" => Ok(Self::NameAscending),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for NameSortMode {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for NameSortMode {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for NameSortMode {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// The order in which the client wants to page through the requested
    /// collection
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The order in which the client wants to page through the
    /// requested collection",
    ///  "type": "string",
    ///  "enum": [
    ///    "ascending",
    ///    "descending"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum PaginationOrder {
        #[serde(rename = "ascending")]
        Ascending,
        #[serde(rename = "descending")]
        Descending,
    }

    impl From<&PaginationOrder> for PaginationOrder {
        fn from(value: &PaginationOrder) -> Self {
            value.clone()
        }
    }

    impl ToString for PaginationOrder {
        fn to_string(&self) -> String {
            match *self {
                Self::Ascending => "ascending".to_string(),
                Self::Descending => "descending".to_string(),
            }
        }
    }

    impl std::str::FromStr for PaginationOrder {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "ascending" => Ok(Self::Ascending),
                "descending" => Ok(Self::Descending),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for PaginationOrder {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for PaginationOrder {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for PaginationOrder {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// Passwords may be subject to additional constraints.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "title": "A password used to authenticate a user",
    ///  "description": "Passwords may be subject to additional constraints.",
    ///  "type": "string",
    ///  "maxLength": 512
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, schemars :: JsonSchema,
    )]
    pub struct Password(String);
    impl std::ops::Deref for Password {
        type Target = String;
        fn deref(&self) -> &String {
            &self.0
        }
    }

    impl From<Password> for String {
        fn from(value: Password) -> Self {
            value.0
        }
    }

    impl From<&Password> for Password {
        fn from(value: &Password) -> Self {
            value.clone()
        }
    }

    impl std::str::FromStr for Password {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            if value.len() > 512usize {
                return Err("longer than 512 characters");
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<&str> for Password {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for Password {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for Password {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl<'de> serde::Deserialize<'de> for Password {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            String::deserialize(deserializer)?
                .parse()
                .map_err(|e: &'static str| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    /// View of a Physical Disk
    ///
    /// Physical disks reside in a particular sled and are used to store both
    /// Instance Disk data as well as internal metadata.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a Physical Disk\n\nPhysical disks reside in a
    /// particular sled and are used to store both Instance Disk data as well as
    /// internal metadata.",
    ///  "type": "object",
    ///  "required": [
    ///    "form_factor",
    ///    "id",
    ///    "model",
    ///    "serial",
    ///    "time_created",
    ///    "time_modified",
    ///    "vendor"
    ///  ],
    ///  "properties": {
    ///    "form_factor": {
    ///      "$ref": "#/components/schemas/PhysicalDiskKind"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "model": {
    ///      "type": "string"
    ///    },
    ///    "serial": {
    ///      "type": "string"
    ///    },
    ///    "sled_id": {
    ///      "description": "The sled to which this disk is attached, if any.",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "uuid"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "vendor": {
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct PhysicalDisk {
        pub form_factor: PhysicalDiskKind,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        pub model: String,
        pub serial: String,
        /// The sled to which this disk is attached, if any.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub sled_id: Option<uuid::Uuid>,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        pub vendor: String,
    }

    impl From<&PhysicalDisk> for PhysicalDisk {
        fn from(value: &PhysicalDisk) -> Self {
            value.clone()
        }
    }

    impl PhysicalDisk {
        pub fn builder() -> builder::PhysicalDisk {
            Default::default()
        }
    }

    /// Describes the form factor of physical disks.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Describes the form factor of physical disks.",
    ///  "type": "string",
    ///  "enum": [
    ///    "m2",
    ///    "u2"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum PhysicalDiskKind {
        #[serde(rename = "m2")]
        M2,
        #[serde(rename = "u2")]
        U2,
    }

    impl From<&PhysicalDiskKind> for PhysicalDiskKind {
        fn from(value: &PhysicalDiskKind) -> Self {
            value.clone()
        }
    }

    impl ToString for PhysicalDiskKind {
        fn to_string(&self) -> String {
            match *self {
                Self::M2 => "m2".to_string(),
                Self::U2 => "u2".to_string(),
            }
        }
    }

    impl std::str::FromStr for PhysicalDiskKind {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "m2" => Ok(Self::M2),
                "u2" => Ok(Self::U2),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for PhysicalDiskKind {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for PhysicalDiskKind {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for PhysicalDiskKind {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/PhysicalDisk"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct PhysicalDiskResultsPage {
        /// list of items on this page of results
        pub items: Vec<PhysicalDisk>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&PhysicalDiskResultsPage> for PhysicalDiskResultsPage {
        fn from(value: &PhysicalDiskResultsPage) -> Self {
            value.clone()
        }
    }

    impl PhysicalDiskResultsPage {
        pub fn builder() -> builder::PhysicalDiskResultsPage {
            Default::default()
        }
    }

    /// Ping
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "object",
    ///  "required": [
    ///    "status"
    ///  ],
    ///  "properties": {
    ///    "status": {
    ///      "description": "Whether the external API is reachable. Will always
    /// be Ok if the endpoint returns anything at all.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/PingStatus"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Ping {
        /// Whether the external API is reachable. Will always be Ok if the
        /// endpoint returns anything at all.
        pub status: PingStatus,
    }

    impl From<&Ping> for Ping {
        fn from(value: &Ping) -> Self {
            value.clone()
        }
    }

    impl Ping {
        pub fn builder() -> builder::Ping {
            Default::default()
        }
    }

    /// PingStatus
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "string",
    ///  "enum": [
    ///    "ok"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum PingStatus {
        #[serde(rename = "ok")]
        Ok,
    }

    impl From<&PingStatus> for PingStatus {
        fn from(value: &PingStatus) -> Self {
            value.clone()
        }
    }

    impl ToString for PingStatus {
        fn to_string(&self) -> String {
            match *self {
                Self::Ok => "ok".to_string(),
            }
        }
    }

    impl std::str::FromStr for PingStatus {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "ok" => Ok(Self::Ok),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for PingStatus {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for PingStatus {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for PingStatus {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// View of a Project
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a Project",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "name",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Project {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Project> for Project {
        fn from(value: &Project) -> Self {
            value.clone()
        }
    }

    impl Project {
        pub fn builder() -> builder::Project {
            Default::default()
        }
    }

    /// Create-time parameters for a `Project`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for a `Project`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "name"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ProjectCreate {
        pub description: String,
        pub name: Name,
    }

    impl From<&ProjectCreate> for ProjectCreate {
        fn from(value: &ProjectCreate) -> Self {
            value.clone()
        }
    }

    impl ProjectCreate {
        pub fn builder() -> builder::ProjectCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Project"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ProjectResultsPage {
        /// list of items on this page of results
        pub items: Vec<Project>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&ProjectResultsPage> for ProjectResultsPage {
        fn from(value: &ProjectResultsPage) -> Self {
            value.clone()
        }
    }

    impl ProjectResultsPage {
        pub fn builder() -> builder::ProjectResultsPage {
            Default::default()
        }
    }

    /// ProjectRole
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "string",
    ///  "enum": [
    ///    "admin",
    ///    "collaborator",
    ///    "viewer"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum ProjectRole {
        #[serde(rename = "admin")]
        Admin,
        #[serde(rename = "collaborator")]
        Collaborator,
        #[serde(rename = "viewer")]
        Viewer,
    }

    impl From<&ProjectRole> for ProjectRole {
        fn from(value: &ProjectRole) -> Self {
            value.clone()
        }
    }

    impl ToString for ProjectRole {
        fn to_string(&self) -> String {
            match *self {
                Self::Admin => "admin".to_string(),
                Self::Collaborator => "collaborator".to_string(),
                Self::Viewer => "viewer".to_string(),
            }
        }
    }

    impl std::str::FromStr for ProjectRole {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "admin" => Ok(Self::Admin),
                "collaborator" => Ok(Self::Collaborator),
                "viewer" => Ok(Self::Viewer),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for ProjectRole {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for ProjectRole {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for ProjectRole {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// Policy for a particular resource
    ///
    /// Note that the Policy only describes access granted explicitly for this
    /// resource.  The policies of parent resources can also cause a user to
    /// have access to this resource.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Policy for a particular resource\n\nNote that the
    /// Policy only describes access granted explicitly for this resource.  The
    /// policies of parent resources can also cause a user to have access to
    /// this resource.",
    ///  "type": "object",
    ///  "required": [
    ///    "role_assignments"
    ///  ],
    ///  "properties": {
    ///    "role_assignments": {
    ///      "description": "Roles directly assigned on this resource",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/ProjectRoleRoleAssignment"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ProjectRolePolicy {
        /// Roles directly assigned on this resource
        pub role_assignments: Vec<ProjectRoleRoleAssignment>,
    }

    impl From<&ProjectRolePolicy> for ProjectRolePolicy {
        fn from(value: &ProjectRolePolicy) -> Self {
            value.clone()
        }
    }

    impl ProjectRolePolicy {
        pub fn builder() -> builder::ProjectRolePolicy {
            Default::default()
        }
    }

    /// Describes the assignment of a particular role on a particular resource
    /// to a particular identity (user, group, etc.)
    ///
    /// The resource is not part of this structure.  Rather, `RoleAssignment`s
    /// are put into a `Policy` and that Policy is applied to a particular
    /// resource.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Describes the assignment of a particular role on a
    /// particular resource to a particular identity (user, group, etc.)\n\nThe
    /// resource is not part of this structure.  Rather, `RoleAssignment`s are
    /// put into a `Policy` and that Policy is applied to a particular
    /// resource.",
    ///  "type": "object",
    ///  "required": [
    ///    "identity_id",
    ///    "identity_type",
    ///    "role_name"
    ///  ],
    ///  "properties": {
    ///    "identity_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "identity_type": {
    ///      "$ref": "#/components/schemas/IdentityType"
    ///    },
    ///    "role_name": {
    ///      "$ref": "#/components/schemas/ProjectRole"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ProjectRoleRoleAssignment {
        pub identity_id: uuid::Uuid,
        pub identity_type: IdentityType,
        pub role_name: ProjectRole,
    }

    impl From<&ProjectRoleRoleAssignment> for ProjectRoleRoleAssignment {
        fn from(value: &ProjectRoleRoleAssignment) -> Self {
            value.clone()
        }
    }

    impl ProjectRoleRoleAssignment {
        pub fn builder() -> builder::ProjectRoleRoleAssignment {
            Default::default()
        }
    }

    /// Updateable properties of a `Project`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Updateable properties of a `Project`",
    ///  "type": "object",
    ///  "properties": {
    ///    "description": {
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    },
    ///    "name": {
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct ProjectUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }

    impl From<&ProjectUpdate> for ProjectUpdate {
        fn from(value: &ProjectUpdate) -> Self {
            value.clone()
        }
    }

    impl ProjectUpdate {
        pub fn builder() -> builder::ProjectUpdate {
            Default::default()
        }
    }

    /// View of an Rack
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of an Rack",
    ///  "type": "object",
    ///  "required": [
    ///    "id",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Rack {
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Rack> for Rack {
        fn from(value: &Rack) -> Self {
            value.clone()
        }
    }

    impl Rack {
        pub fn builder() -> builder::Rack {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Rack"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct RackResultsPage {
        /// list of items on this page of results
        pub items: Vec<Rack>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&RackResultsPage> for RackResultsPage {
        fn from(value: &RackResultsPage) -> Self {
            value.clone()
        }
    }

    impl RackResultsPage {
        pub fn builder() -> builder::RackResultsPage {
            Default::default()
        }
    }

    /// View of a Role
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a Role",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "name"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/RoleName"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Role {
        pub description: String,
        pub name: RoleName,
    }

    impl From<&Role> for Role {
        fn from(value: &Role) -> Self {
            value.clone()
        }
    }

    impl Role {
        pub fn builder() -> builder::Role {
            Default::default()
        }
    }

    /// Role names consist of two string components separated by dot (".").
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "title": "A name for a built-in role",
    ///  "description": "Role names consist of two string components separated
    /// by dot (\".\").",
    ///  "type": "string",
    ///  "maxLength": 63,
    ///  "pattern": "[a-z-]+\\.[a-z-]+"
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, schemars :: JsonSchema,
    )]
    pub struct RoleName(String);
    impl std::ops::Deref for RoleName {
        type Target = String;
        fn deref(&self) -> &String {
            &self.0
        }
    }

    impl From<RoleName> for String {
        fn from(value: RoleName) -> Self {
            value.0
        }
    }

    impl From<&RoleName> for RoleName {
        fn from(value: &RoleName) -> Self {
            value.clone()
        }
    }

    impl std::str::FromStr for RoleName {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            if value.len() > 63usize {
                return Err("longer than 63 characters");
            }
            if regress::Regex::new("[a-z-]+\\.[a-z-]+")
                .unwrap()
                .find(value)
                .is_none()
            {
                return Err("doesn't match pattern \"[a-z-]+\\.[a-z-]+\"");
            }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<&str> for RoleName {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for RoleName {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for RoleName {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl<'de> serde::Deserialize<'de> for RoleName {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            String::deserialize(deserializer)?
                .parse()
                .map_err(|e: &'static str| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Role"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct RoleResultsPage {
        /// list of items on this page of results
        pub items: Vec<Role>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&RoleResultsPage> for RoleResultsPage {
        fn from(value: &RoleResultsPage) -> Self {
            value.clone()
        }
    }

    impl RoleResultsPage {
        pub fn builder() -> builder::RoleResultsPage {
            Default::default()
        }
    }

    /// A route to a destination network through a gateway address.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A route to a destination network through a gateway
    /// address.",
    ///  "type": "object",
    ///  "required": [
    ///    "dst",
    ///    "gw"
    ///  ],
    ///  "properties": {
    ///    "dst": {
    ///      "description": "The route destination.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/IpNet"
    ///        }
    ///      ]
    ///    },
    ///    "gw": {
    ///      "description": "The route gateway.",
    ///      "type": "string",
    ///      "format": "ip"
    ///    },
    ///    "vid": {
    ///      "description": "VLAN id the gateway is reachable over.",
    ///      "type": [
    ///        "integer",
    ///        "null"
    ///      ],
    ///      "format": "uint16",
    ///      "minimum": 0.0
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Route {
        /// The route destination.
        pub dst: IpNet,
        /// The route gateway.
        pub gw: std::net::IpAddr,
        /// VLAN id the gateway is reachable over.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub vid: Option<u16>,
    }

    impl From<&Route> for Route {
        fn from(value: &Route) -> Self {
            value.clone()
        }
    }

    impl Route {
        pub fn builder() -> builder::Route {
            Default::default()
        }
    }

    /// Route configuration data associated with a switch port configuration.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Route configuration data associated with a switch port
    /// configuration.",
    ///  "type": "object",
    ///  "required": [
    ///    "routes"
    ///  ],
    ///  "properties": {
    ///    "routes": {
    ///      "description": "The set of routes assigned to a switch port.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Route"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct RouteConfig {
        /// The set of routes assigned to a switch port.
        pub routes: Vec<Route>,
    }

    impl From<&RouteConfig> for RouteConfig {
        fn from(value: &RouteConfig) -> Self {
            value.clone()
        }
    }

    impl RouteConfig {
        pub fn builder() -> builder::RouteConfig {
            Default::default()
        }
    }

    /// Identity-related metadata that's included in nearly all public API
    /// objects
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Identity-related metadata that's included in nearly all
    /// public API objects",
    ///  "type": "object",
    ///  "required": [
    ///    "acs_url",
    ///    "description",
    ///    "id",
    ///    "idp_entity_id",
    ///    "name",
    ///    "slo_url",
    ///    "sp_client_id",
    ///    "technical_contact_email",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "acs_url": {
    ///      "description": "Service provider endpoint where the response will
    /// be sent",
    ///      "type": "string"
    ///    },
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "group_attribute_name": {
    ///      "description": "If set, attributes with this name will be
    /// considered to denote a user's group membership, where the values will be
    /// the group names.",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "idp_entity_id": {
    ///      "description": "IdP's entity id",
    ///      "type": "string"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "public_cert": {
    ///      "description": "Optional request signing public certificate (base64
    /// encoded der file)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    },
    ///    "slo_url": {
    ///      "description": "Service provider endpoint where the idp should send
    /// log out requests",
    ///      "type": "string"
    ///    },
    ///    "sp_client_id": {
    ///      "description": "SP's client id",
    ///      "type": "string"
    ///    },
    ///    "technical_contact_email": {
    ///      "description": "Customer's technical contact for saml
    /// configuration",
    ///      "type": "string"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SamlIdentityProvider {
        /// Service provider endpoint where the response will be sent
        pub acs_url: String,
        /// human-readable free-form text about a resource
        pub description: String,
        /// If set, attributes with this name will be considered to denote a
        /// user's group membership, where the values will be the group names.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub group_attribute_name: Option<String>,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// IdP's entity id
        pub idp_entity_id: String,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// Optional request signing public certificate (base64 encoded der
        /// file)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub public_cert: Option<String>,
        /// Service provider endpoint where the idp should send log out requests
        pub slo_url: String,
        /// SP's client id
        pub sp_client_id: String,
        /// Customer's technical contact for saml configuration
        pub technical_contact_email: String,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&SamlIdentityProvider> for SamlIdentityProvider {
        fn from(value: &SamlIdentityProvider) -> Self {
            value.clone()
        }
    }

    impl SamlIdentityProvider {
        pub fn builder() -> builder::SamlIdentityProvider {
            Default::default()
        }
    }

    /// Create-time identity-related parameters
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time identity-related parameters",
    ///  "type": "object",
    ///  "required": [
    ///    "acs_url",
    ///    "description",
    ///    "idp_entity_id",
    ///    "idp_metadata_source",
    ///    "name",
    ///    "slo_url",
    ///    "sp_client_id",
    ///    "technical_contact_email"
    ///  ],
    ///  "properties": {
    ///    "acs_url": {
    ///      "description": "service provider endpoint where the response will
    /// be sent",
    ///      "type": "string"
    ///    },
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "group_attribute_name": {
    ///      "description": "If set, SAML attributes with this name will be
    /// considered to denote a user's group membership, where the attribute
    /// value(s) should be a comma-separated list of group names.",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    },
    ///    "idp_entity_id": {
    ///      "description": "idp's entity id",
    ///      "type": "string"
    ///    },
    ///    "idp_metadata_source": {
    ///      "description": "the source of an identity provider metadata
    /// descriptor",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/IdpMetadataSource"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "signing_keypair": {
    ///      "description": "request signing key pair",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/DerEncodedKeyPair"
    ///        }
    ///      ]
    ///    },
    ///    "slo_url": {
    ///      "description": "service provider endpoint where the idp should send
    /// log out requests",
    ///      "type": "string"
    ///    },
    ///    "sp_client_id": {
    ///      "description": "sp's client id",
    ///      "type": "string"
    ///    },
    ///    "technical_contact_email": {
    ///      "description": "customer's technical contact for saml
    /// configuration",
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SamlIdentityProviderCreate {
        /// service provider endpoint where the response will be sent
        pub acs_url: String,
        pub description: String,
        /// If set, SAML attributes with this name will be considered to denote
        /// a user's group membership, where the attribute value(s) should be a
        /// comma-separated list of group names.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub group_attribute_name: Option<String>,
        /// idp's entity id
        pub idp_entity_id: String,
        /// the source of an identity provider metadata descriptor
        pub idp_metadata_source: IdpMetadataSource,
        pub name: Name,
        /// request signing key pair
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub signing_keypair: Option<DerEncodedKeyPair>,
        /// service provider endpoint where the idp should send log out requests
        pub slo_url: String,
        /// sp's client id
        pub sp_client_id: String,
        /// customer's technical contact for saml configuration
        pub technical_contact_email: String,
    }

    impl From<&SamlIdentityProviderCreate> for SamlIdentityProviderCreate {
        fn from(value: &SamlIdentityProviderCreate) -> Self {
            value.clone()
        }
    }

    impl SamlIdentityProviderCreate {
        pub fn builder() -> builder::SamlIdentityProviderCreate {
            Default::default()
        }
    }

    /// The service intended to use this certificate.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The service intended to use this certificate.",
    ///  "oneOf": [
    ///    {
    ///      "description": "This certificate is intended for access to the
    /// external API.",
    ///      "type": "string",
    ///      "enum": [
    ///        "external_api"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum ServiceUsingCertificate {
        /// This certificate is intended for access to the external API.
        #[serde(rename = "external_api")]
        ExternalApi,
    }

    impl From<&ServiceUsingCertificate> for ServiceUsingCertificate {
        fn from(value: &ServiceUsingCertificate) -> Self {
            value.clone()
        }
    }

    impl ToString for ServiceUsingCertificate {
        fn to_string(&self) -> String {
            match *self {
                Self::ExternalApi => "external_api".to_string(),
            }
        }
    }

    impl std::str::FromStr for ServiceUsingCertificate {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "external_api" => Ok(Self::ExternalApi),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for ServiceUsingCertificate {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for ServiceUsingCertificate {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for ServiceUsingCertificate {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// View of a Silo
    ///
    /// A Silo is the highest level unit of isolation.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a Silo\n\nA Silo is the highest level unit of
    /// isolation.",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "discoverable",
    ///    "id",
    ///    "identity_mode",
    ///    "mapped_fleet_roles",
    ///    "name",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "discoverable": {
    ///      "description": "A silo where discoverable is false can be retrieved only by its id - it will not be part of the \"list all silos\" output.",
    ///      "type": "boolean"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "identity_mode": {
    ///      "description": "How users and groups are managed in this Silo",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SiloIdentityMode"
    ///        }
    ///      ]
    ///    },
    ///    "mapped_fleet_roles": {
    ///      "description": "Mapping of which Fleet roles are conferred by each
    /// Silo role\n\nThe default is that no Fleet roles are conferred by any
    /// Silo roles unless there's a corresponding entry in this map.",
    ///      "type": "object",
    ///      "additionalProperties": {
    ///        "type": "array",
    ///        "items": {
    ///          "$ref": "#/components/schemas/FleetRole"
    ///        },
    ///        "uniqueItems": true
    ///      }
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Silo {
        /// human-readable free-form text about a resource
        pub description: String,
        /// A silo where discoverable is false can be retrieved only by its id -
        /// it will not be part of the "list all silos" output.
        pub discoverable: bool,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// How users and groups are managed in this Silo
        pub identity_mode: SiloIdentityMode,
        /// Mapping of which Fleet roles are conferred by each Silo role
        ///
        /// The default is that no Fleet roles are conferred by any Silo roles
        /// unless there's a corresponding entry in this map.
        pub mapped_fleet_roles: std::collections::HashMap<String, Vec<FleetRole>>,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Silo> for Silo {
        fn from(value: &Silo) -> Self {
            value.clone()
        }
    }

    impl Silo {
        pub fn builder() -> builder::Silo {
            Default::default()
        }
    }

    /// Create-time parameters for a `Silo`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for a `Silo`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "discoverable",
    ///    "identity_mode",
    ///    "name",
    ///    "quotas",
    ///    "tls_certificates"
    ///  ],
    ///  "properties": {
    ///    "admin_group_name": {
    ///      "description": "If set, this group will be created during Silo
    /// creation and granted the \"Silo Admin\" role. Identity providers can
    /// assert that users belong to this group and those users can log in and
    /// further initialize the Silo.\n\nNote that if configuring a SAML based
    /// identity provider, group_attribute_name must be set for users to be
    /// considered part of a group. See `SamlIdentityProviderCreate` for more
    /// information.",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    },
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "discoverable": {
    ///      "type": "boolean"
    ///    },
    ///    "identity_mode": {
    ///      "$ref": "#/components/schemas/SiloIdentityMode"
    ///    },
    ///    "mapped_fleet_roles": {
    ///      "description": "Mapping of which Fleet roles are conferred by each
    /// Silo role\n\nThe default is that no Fleet roles are conferred by any
    /// Silo roles unless there's a corresponding entry in this map.",
    ///      "default": {},
    ///      "type": "object",
    ///      "additionalProperties": {
    ///        "type": "array",
    ///        "items": {
    ///          "$ref": "#/components/schemas/FleetRole"
    ///        },
    ///        "uniqueItems": true
    ///      }
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "quotas": {
    ///      "description": "Limits the amount of provisionable CPU, memory, and
    /// storage in the Silo. CPU and memory are only consumed by running
    /// instances, while storage is consumed by any disk or snapshot. A value of
    /// 0 means that resource is *not* provisionable.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SiloQuotasCreate"
    ///        }
    ///      ]
    ///    },
    ///    "tls_certificates": {
    ///      "description": "Initial TLS certificates to be used for the new
    /// Silo's console and API endpoints.  These should be valid for the Silo's
    /// DNS name(s).",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/CertificateCreate"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SiloCreate {
        /// If set, this group will be created during Silo creation and granted
        /// the "Silo Admin" role. Identity providers can assert that users
        /// belong to this group and those users can log in and further
        /// initialize the Silo.
        ///
        /// Note that if configuring a SAML based identity provider,
        /// group_attribute_name must be set for users to be considered part of
        /// a group. See `SamlIdentityProviderCreate` for more information.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub admin_group_name: Option<String>,
        pub description: String,
        pub discoverable: bool,
        pub identity_mode: SiloIdentityMode,
        /// Mapping of which Fleet roles are conferred by each Silo role
        ///
        /// The default is that no Fleet roles are conferred by any Silo roles
        /// unless there's a corresponding entry in this map.
        #[serde(default, skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub mapped_fleet_roles: std::collections::HashMap<String, Vec<FleetRole>>,
        pub name: Name,
        /// Limits the amount of provisionable CPU, memory, and storage in the
        /// Silo. CPU and memory are only consumed by running instances, while
        /// storage is consumed by any disk or snapshot. A value of 0 means that
        /// resource is *not* provisionable.
        pub quotas: SiloQuotasCreate,
        /// Initial TLS certificates to be used for the new Silo's console and
        /// API endpoints.  These should be valid for the Silo's DNS name(s).
        pub tls_certificates: Vec<CertificateCreate>,
    }

    impl From<&SiloCreate> for SiloCreate {
        fn from(value: &SiloCreate) -> Self {
            value.clone()
        }
    }

    impl SiloCreate {
        pub fn builder() -> builder::SiloCreate {
            Default::default()
        }
    }

    /// Describes how identities are managed and users are authenticated in this
    /// Silo
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Describes how identities are managed and users are
    /// authenticated in this Silo",
    ///  "oneOf": [
    ///    {
    ///      "description": "Users are authenticated with SAML using an external
    /// authentication provider.  The system updates information about users and
    /// groups only during successful authentication (i.e,. \"JIT provisioning\"
    /// of users and groups).",
    ///      "type": "string",
    ///      "enum": [
    ///        "saml_jit"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The system is the source of truth about users.
    /// There is no linkage to an external authentication provider or identity
    /// provider.",
    ///      "type": "string",
    ///      "enum": [
    ///        "local_only"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum SiloIdentityMode {
        /// Users are authenticated with SAML using an external authentication
        /// provider.  The system updates information about users and groups
        /// only during successful authentication (i.e,. "JIT provisioning" of
        /// users and groups).
        #[serde(rename = "saml_jit")]
        SamlJit,
        /// The system is the source of truth about users.  There is no linkage
        /// to an external authentication provider or identity provider.
        #[serde(rename = "local_only")]
        LocalOnly,
    }

    impl From<&SiloIdentityMode> for SiloIdentityMode {
        fn from(value: &SiloIdentityMode) -> Self {
            value.clone()
        }
    }

    impl ToString for SiloIdentityMode {
        fn to_string(&self) -> String {
            match *self {
                Self::SamlJit => "saml_jit".to_string(),
                Self::LocalOnly => "local_only".to_string(),
            }
        }
    }

    impl std::str::FromStr for SiloIdentityMode {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "saml_jit" => Ok(Self::SamlJit),
                "local_only" => Ok(Self::LocalOnly),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for SiloIdentityMode {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for SiloIdentityMode {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for SiloIdentityMode {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// A collection of resource counts used to set the virtual capacity of a
    /// silo
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A collection of resource counts used to set the virtual
    /// capacity of a silo",
    ///  "type": "object",
    ///  "required": [
    ///    "cpus",
    ///    "memory",
    ///    "silo_id",
    ///    "storage"
    ///  ],
    ///  "properties": {
    ///    "cpus": {
    ///      "description": "Number of virtual CPUs",
    ///      "type": "integer",
    ///      "format": "int64"
    ///    },
    ///    "memory": {
    ///      "description": "Amount of memory in bytes",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    },
    ///    "silo_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "storage": {
    ///      "description": "Amount of disk storage in bytes",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SiloQuotas {
        /// Number of virtual CPUs
        pub cpus: i64,
        /// Amount of memory in bytes
        pub memory: ByteCount,
        pub silo_id: uuid::Uuid,
        /// Amount of disk storage in bytes
        pub storage: ByteCount,
    }

    impl From<&SiloQuotas> for SiloQuotas {
        fn from(value: &SiloQuotas) -> Self {
            value.clone()
        }
    }

    impl SiloQuotas {
        pub fn builder() -> builder::SiloQuotas {
            Default::default()
        }
    }

    /// The amount of provisionable resources for a Silo
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The amount of provisionable resources for a Silo",
    ///  "type": "object",
    ///  "required": [
    ///    "cpus",
    ///    "memory",
    ///    "storage"
    ///  ],
    ///  "properties": {
    ///    "cpus": {
    ///      "description": "The amount of virtual CPUs available for running
    /// instances in the Silo",
    ///      "type": "integer",
    ///      "format": "int64"
    ///    },
    ///    "memory": {
    ///      "description": "The amount of RAM (in bytes) available for running
    /// instances in the Silo",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    },
    ///    "storage": {
    ///      "description": "The amount of storage (in bytes) available for
    /// disks or snapshots",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SiloQuotasCreate {
        /// The amount of virtual CPUs available for running instances in the
        /// Silo
        pub cpus: i64,
        /// The amount of RAM (in bytes) available for running instances in the
        /// Silo
        pub memory: ByteCount,
        /// The amount of storage (in bytes) available for disks or snapshots
        pub storage: ByteCount,
    }

    impl From<&SiloQuotasCreate> for SiloQuotasCreate {
        fn from(value: &SiloQuotasCreate) -> Self {
            value.clone()
        }
    }

    impl SiloQuotasCreate {
        pub fn builder() -> builder::SiloQuotasCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SiloQuotas"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SiloQuotasResultsPage {
        /// list of items on this page of results
        pub items: Vec<SiloQuotas>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&SiloQuotasResultsPage> for SiloQuotasResultsPage {
        fn from(value: &SiloQuotasResultsPage) -> Self {
            value.clone()
        }
    }

    impl SiloQuotasResultsPage {
        pub fn builder() -> builder::SiloQuotasResultsPage {
            Default::default()
        }
    }

    /// Updateable properties of a Silo's resource limits. If a value is omitted
    /// it will not be updated.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Updateable properties of a Silo's resource limits. If a
    /// value is omitted it will not be updated.",
    ///  "type": "object",
    ///  "properties": {
    ///    "cpus": {
    ///      "description": "The amount of virtual CPUs available for running
    /// instances in the Silo",
    ///      "type": [
    ///        "integer",
    ///        "null"
    ///      ],
    ///      "format": "int64"
    ///    },
    ///    "memory": {
    ///      "description": "The amount of RAM (in bytes) available for running
    /// instances in the Silo",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    },
    ///    "storage": {
    ///      "description": "The amount of storage (in bytes) available for
    /// disks or snapshots",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SiloQuotasUpdate {
        /// The amount of virtual CPUs available for running instances in the
        /// Silo
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub cpus: Option<i64>,
        /// The amount of RAM (in bytes) available for running instances in the
        /// Silo
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub memory: Option<ByteCount>,
        /// The amount of storage (in bytes) available for disks or snapshots
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub storage: Option<ByteCount>,
    }

    impl From<&SiloQuotasUpdate> for SiloQuotasUpdate {
        fn from(value: &SiloQuotasUpdate) -> Self {
            value.clone()
        }
    }

    impl SiloQuotasUpdate {
        pub fn builder() -> builder::SiloQuotasUpdate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Silo"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SiloResultsPage {
        /// list of items on this page of results
        pub items: Vec<Silo>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&SiloResultsPage> for SiloResultsPage {
        fn from(value: &SiloResultsPage) -> Self {
            value.clone()
        }
    }

    impl SiloResultsPage {
        pub fn builder() -> builder::SiloResultsPage {
            Default::default()
        }
    }

    /// SiloRole
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "string",
    ///  "enum": [
    ///    "admin",
    ///    "collaborator",
    ///    "viewer"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum SiloRole {
        #[serde(rename = "admin")]
        Admin,
        #[serde(rename = "collaborator")]
        Collaborator,
        #[serde(rename = "viewer")]
        Viewer,
    }

    impl From<&SiloRole> for SiloRole {
        fn from(value: &SiloRole) -> Self {
            value.clone()
        }
    }

    impl ToString for SiloRole {
        fn to_string(&self) -> String {
            match *self {
                Self::Admin => "admin".to_string(),
                Self::Collaborator => "collaborator".to_string(),
                Self::Viewer => "viewer".to_string(),
            }
        }
    }

    impl std::str::FromStr for SiloRole {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "admin" => Ok(Self::Admin),
                "collaborator" => Ok(Self::Collaborator),
                "viewer" => Ok(Self::Viewer),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for SiloRole {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for SiloRole {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for SiloRole {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// Policy for a particular resource
    ///
    /// Note that the Policy only describes access granted explicitly for this
    /// resource.  The policies of parent resources can also cause a user to
    /// have access to this resource.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Policy for a particular resource\n\nNote that the
    /// Policy only describes access granted explicitly for this resource.  The
    /// policies of parent resources can also cause a user to have access to
    /// this resource.",
    ///  "type": "object",
    ///  "required": [
    ///    "role_assignments"
    ///  ],
    ///  "properties": {
    ///    "role_assignments": {
    ///      "description": "Roles directly assigned on this resource",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SiloRoleRoleAssignment"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SiloRolePolicy {
        /// Roles directly assigned on this resource
        pub role_assignments: Vec<SiloRoleRoleAssignment>,
    }

    impl From<&SiloRolePolicy> for SiloRolePolicy {
        fn from(value: &SiloRolePolicy) -> Self {
            value.clone()
        }
    }

    impl SiloRolePolicy {
        pub fn builder() -> builder::SiloRolePolicy {
            Default::default()
        }
    }

    /// Describes the assignment of a particular role on a particular resource
    /// to a particular identity (user, group, etc.)
    ///
    /// The resource is not part of this structure.  Rather, `RoleAssignment`s
    /// are put into a `Policy` and that Policy is applied to a particular
    /// resource.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Describes the assignment of a particular role on a
    /// particular resource to a particular identity (user, group, etc.)\n\nThe
    /// resource is not part of this structure.  Rather, `RoleAssignment`s are
    /// put into a `Policy` and that Policy is applied to a particular
    /// resource.",
    ///  "type": "object",
    ///  "required": [
    ///    "identity_id",
    ///    "identity_type",
    ///    "role_name"
    ///  ],
    ///  "properties": {
    ///    "identity_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "identity_type": {
    ///      "$ref": "#/components/schemas/IdentityType"
    ///    },
    ///    "role_name": {
    ///      "$ref": "#/components/schemas/SiloRole"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SiloRoleRoleAssignment {
        pub identity_id: uuid::Uuid,
        pub identity_type: IdentityType,
        pub role_name: SiloRole,
    }

    impl From<&SiloRoleRoleAssignment> for SiloRoleRoleAssignment {
        fn from(value: &SiloRoleRoleAssignment) -> Self {
            value.clone()
        }
    }

    impl SiloRoleRoleAssignment {
        pub fn builder() -> builder::SiloRoleRoleAssignment {
            Default::default()
        }
    }

    /// View of a silo's resource utilization and capacity
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a silo's resource utilization and capacity",
    ///  "type": "object",
    ///  "required": [
    ///    "allocated",
    ///    "provisioned",
    ///    "silo_id",
    ///    "silo_name"
    ///  ],
    ///  "properties": {
    ///    "allocated": {
    ///      "description": "Accounts for the total amount of resources reserved
    /// for silos via their quotas",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VirtualResourceCounts"
    ///        }
    ///      ]
    ///    },
    ///    "provisioned": {
    ///      "description": "Accounts for resources allocated by in silos like
    /// CPU or memory for running instances and storage for disks and snapshots
    /// Note that CPU and memory resources associated with a stopped instances
    /// are not counted here",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VirtualResourceCounts"
    ///        }
    ///      ]
    ///    },
    ///    "silo_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "silo_name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SiloUtilization {
        /// Accounts for the total amount of resources reserved for silos via
        /// their quotas
        pub allocated: VirtualResourceCounts,
        /// Accounts for resources allocated by in silos like CPU or memory for
        /// running instances and storage for disks and snapshots Note that CPU
        /// and memory resources associated with a stopped instances are not
        /// counted here
        pub provisioned: VirtualResourceCounts,
        pub silo_id: uuid::Uuid,
        pub silo_name: Name,
    }

    impl From<&SiloUtilization> for SiloUtilization {
        fn from(value: &SiloUtilization) -> Self {
            value.clone()
        }
    }

    impl SiloUtilization {
        pub fn builder() -> builder::SiloUtilization {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SiloUtilization"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SiloUtilizationResultsPage {
        /// list of items on this page of results
        pub items: Vec<SiloUtilization>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&SiloUtilizationResultsPage> for SiloUtilizationResultsPage {
        fn from(value: &SiloUtilizationResultsPage) -> Self {
            value.clone()
        }
    }

    impl SiloUtilizationResultsPage {
        pub fn builder() -> builder::SiloUtilizationResultsPage {
            Default::default()
        }
    }

    /// An operator's view of a Sled.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "An operator's view of a Sled.",
    ///  "type": "object",
    ///  "required": [
    ///    "baseboard",
    ///    "id",
    ///    "provision_state",
    ///    "rack_id",
    ///    "time_created",
    ///    "time_modified",
    ///    "usable_hardware_threads",
    ///    "usable_physical_ram"
    ///  ],
    ///  "properties": {
    ///    "baseboard": {
    ///      "$ref": "#/components/schemas/Baseboard"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "provision_state": {
    ///      "description": "The provision state of the sled.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SledProvisionState"
    ///        }
    ///      ]
    ///    },
    ///    "rack_id": {
    ///      "description": "The rack to which this Sled is currently attached",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "usable_hardware_threads": {
    ///      "description": "The number of hardware threads which can execute on
    /// this sled",
    ///      "type": "integer",
    ///      "format": "uint32",
    ///      "minimum": 0.0
    ///    },
    ///    "usable_physical_ram": {
    ///      "description": "Amount of RAM which may be used by the Sled's OS",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Sled {
        pub baseboard: Baseboard,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// The provision state of the sled.
        pub provision_state: SledProvisionState,
        /// The rack to which this Sled is currently attached
        pub rack_id: uuid::Uuid,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        /// The number of hardware threads which can execute on this sled
        pub usable_hardware_threads: u32,
        /// Amount of RAM which may be used by the Sled's OS
        pub usable_physical_ram: ByteCount,
    }

    impl From<&Sled> for Sled {
        fn from(value: &Sled) -> Self {
            value.clone()
        }
    }

    impl Sled {
        pub fn builder() -> builder::Sled {
            Default::default()
        }
    }

    /// An operator's view of an instance running on a given sled
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "An operator's view of an instance running on a given
    /// sled",
    ///  "type": "object",
    ///  "required": [
    ///    "active_sled_id",
    ///    "id",
    ///    "memory",
    ///    "name",
    ///    "ncpus",
    ///    "project_name",
    ///    "silo_name",
    ///    "state",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "active_sled_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "memory": {
    ///      "type": "integer",
    ///      "format": "int64"
    ///    },
    ///    "migration_id": {
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "ncpus": {
    ///      "type": "integer",
    ///      "format": "int64"
    ///    },
    ///    "project_name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "silo_name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "state": {
    ///      "$ref": "#/components/schemas/InstanceState"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SledInstance {
        pub active_sled_id: uuid::Uuid,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        pub memory: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub migration_id: Option<uuid::Uuid>,
        pub name: Name,
        pub ncpus: i64,
        pub project_name: Name,
        pub silo_name: Name,
        pub state: InstanceState,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&SledInstance> for SledInstance {
        fn from(value: &SledInstance) -> Self {
            value.clone()
        }
    }

    impl SledInstance {
        pub fn builder() -> builder::SledInstance {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SledInstance"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SledInstanceResultsPage {
        /// list of items on this page of results
        pub items: Vec<SledInstance>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&SledInstanceResultsPage> for SledInstanceResultsPage {
        fn from(value: &SledInstanceResultsPage) -> Self {
            value.clone()
        }
    }

    impl SledInstanceResultsPage {
        pub fn builder() -> builder::SledInstanceResultsPage {
            Default::default()
        }
    }

    /// The provision state of a sled.
    ///
    /// This controls whether new resources are going to be provisioned on this
    /// sled.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The provision state of a sled.\n\nThis controls whether
    /// new resources are going to be provisioned on this sled.",
    ///  "oneOf": [
    ///    {
    ///      "description": "New resources will be provisioned on this sled.",
    ///      "type": "string",
    ///      "enum": [
    ///        "provisionable"
    ///      ]
    ///    },
    ///    {
    ///      "description": "New resources will not be provisioned on this sled.
    /// However, existing resources will continue to be on this sled unless
    /// manually migrated off.",
    ///      "type": "string",
    ///      "enum": [
    ///        "non_provisionable"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum SledProvisionState {
        /// New resources will be provisioned on this sled.
        #[serde(rename = "provisionable")]
        Provisionable,
        /// New resources will not be provisioned on this sled. However,
        /// existing resources will continue to be on this sled unless manually
        /// migrated off.
        #[serde(rename = "non_provisionable")]
        NonProvisionable,
    }

    impl From<&SledProvisionState> for SledProvisionState {
        fn from(value: &SledProvisionState) -> Self {
            value.clone()
        }
    }

    impl ToString for SledProvisionState {
        fn to_string(&self) -> String {
            match *self {
                Self::Provisionable => "provisionable".to_string(),
                Self::NonProvisionable => "non_provisionable".to_string(),
            }
        }
    }

    impl std::str::FromStr for SledProvisionState {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "provisionable" => Ok(Self::Provisionable),
                "non_provisionable" => Ok(Self::NonProvisionable),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for SledProvisionState {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for SledProvisionState {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for SledProvisionState {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// Parameters for `sled_set_provision_state`.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for `sled_set_provision_state`.",
    ///  "type": "object",
    ///  "required": [
    ///    "state"
    ///  ],
    ///  "properties": {
    ///    "state": {
    ///      "description": "The provision state.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SledProvisionState"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SledProvisionStateParams {
        /// The provision state.
        pub state: SledProvisionState,
    }

    impl From<&SledProvisionStateParams> for SledProvisionStateParams {
        fn from(value: &SledProvisionStateParams) -> Self {
            value.clone()
        }
    }

    impl SledProvisionStateParams {
        pub fn builder() -> builder::SledProvisionStateParams {
            Default::default()
        }
    }

    /// Response to `sled_set_provision_state`.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Response to `sled_set_provision_state`.",
    ///  "type": "object",
    ///  "required": [
    ///    "new_state",
    ///    "old_state"
    ///  ],
    ///  "properties": {
    ///    "new_state": {
    ///      "description": "The new provision state.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SledProvisionState"
    ///        }
    ///      ]
    ///    },
    ///    "old_state": {
    ///      "description": "The old provision state.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SledProvisionState"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SledProvisionStateResponse {
        /// The new provision state.
        pub new_state: SledProvisionState,
        /// The old provision state.
        pub old_state: SledProvisionState,
    }

    impl From<&SledProvisionStateResponse> for SledProvisionStateResponse {
        fn from(value: &SledProvisionStateResponse) -> Self {
            value.clone()
        }
    }

    impl SledProvisionStateResponse {
        pub fn builder() -> builder::SledProvisionStateResponse {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Sled"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SledResultsPage {
        /// list of items on this page of results
        pub items: Vec<Sled>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&SledResultsPage> for SledResultsPage {
        fn from(value: &SledResultsPage) -> Self {
            value.clone()
        }
    }

    impl SledResultsPage {
        pub fn builder() -> builder::SledResultsPage {
            Default::default()
        }
    }

    /// View of a Snapshot
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a Snapshot",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "disk_id",
    ///    "id",
    ///    "name",
    ///    "project_id",
    ///    "size",
    ///    "state",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "disk_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "project_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "size": {
    ///      "$ref": "#/components/schemas/ByteCount"
    ///    },
    ///    "state": {
    ///      "$ref": "#/components/schemas/SnapshotState"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Snapshot {
        /// human-readable free-form text about a resource
        pub description: String,
        pub disk_id: uuid::Uuid,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        pub project_id: uuid::Uuid,
        pub size: ByteCount,
        pub state: SnapshotState,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Snapshot> for Snapshot {
        fn from(value: &Snapshot) -> Self {
            value.clone()
        }
    }

    impl Snapshot {
        pub fn builder() -> builder::Snapshot {
            Default::default()
        }
    }

    /// Create-time parameters for a `Snapshot`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for a `Snapshot`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "disk",
    ///    "name"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "disk": {
    ///      "description": "The disk to be snapshotted",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SnapshotCreate {
        pub description: String,
        /// The disk to be snapshotted
        pub disk: NameOrId,
        pub name: Name,
    }

    impl From<&SnapshotCreate> for SnapshotCreate {
        fn from(value: &SnapshotCreate) -> Self {
            value.clone()
        }
    }

    impl SnapshotCreate {
        pub fn builder() -> builder::SnapshotCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Snapshot"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SnapshotResultsPage {
        /// list of items on this page of results
        pub items: Vec<Snapshot>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&SnapshotResultsPage> for SnapshotResultsPage {
        fn from(value: &SnapshotResultsPage) -> Self {
            value.clone()
        }
    }

    impl SnapshotResultsPage {
        pub fn builder() -> builder::SnapshotResultsPage {
            Default::default()
        }
    }

    /// SnapshotState
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "string",
    ///  "enum": [
    ///    "creating",
    ///    "ready",
    ///    "faulted",
    ///    "destroyed"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum SnapshotState {
        #[serde(rename = "creating")]
        Creating,
        #[serde(rename = "ready")]
        Ready,
        #[serde(rename = "faulted")]
        Faulted,
        #[serde(rename = "destroyed")]
        Destroyed,
    }

    impl From<&SnapshotState> for SnapshotState {
        fn from(value: &SnapshotState) -> Self {
            value.clone()
        }
    }

    impl ToString for SnapshotState {
        fn to_string(&self) -> String {
            match *self {
                Self::Creating => "creating".to_string(),
                Self::Ready => "ready".to_string(),
                Self::Faulted => "faulted".to_string(),
                Self::Destroyed => "destroyed".to_string(),
            }
        }
    }

    impl std::str::FromStr for SnapshotState {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "creating" => Ok(Self::Creating),
                "ready" => Ok(Self::Ready),
                "faulted" => Ok(Self::Faulted),
                "destroyed" => Ok(Self::Destroyed),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for SnapshotState {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for SnapshotState {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for SnapshotState {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// View of an SSH Key
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of an SSH Key",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "name",
    ///    "public_key",
    ///    "silo_user_id",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "public_key": {
    ///      "description": "SSH public key, e.g., `\"ssh-ed25519
    /// AAAAC3NzaC...\"`",
    ///      "type": "string"
    ///    },
    ///    "silo_user_id": {
    ///      "description": "The user to whom this key belongs",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SshKey {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// SSH public key, e.g., `"ssh-ed25519 AAAAC3NzaC..."`
        pub public_key: String,
        /// The user to whom this key belongs
        pub silo_user_id: uuid::Uuid,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&SshKey> for SshKey {
        fn from(value: &SshKey) -> Self {
            value.clone()
        }
    }

    impl SshKey {
        pub fn builder() -> builder::SshKey {
            Default::default()
        }
    }

    /// Create-time parameters for an `SshKey`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for an `SshKey`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "name",
    ///    "public_key"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "public_key": {
    ///      "description": "SSH public key, e.g., `\"ssh-ed25519
    /// AAAAC3NzaC...\"`",
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SshKeyCreate {
        pub description: String,
        pub name: Name,
        /// SSH public key, e.g., `"ssh-ed25519 AAAAC3NzaC..."`
        pub public_key: String,
    }

    impl From<&SshKeyCreate> for SshKeyCreate {
        fn from(value: &SshKeyCreate) -> Self {
            value.clone()
        }
    }

    impl SshKeyCreate {
        pub fn builder() -> builder::SshKeyCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SshKey"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SshKeyResultsPage {
        /// list of items on this page of results
        pub items: Vec<SshKey>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&SshKeyResultsPage> for SshKeyResultsPage {
        fn from(value: &SshKeyResultsPage) -> Self {
            value.clone()
        }
    }

    impl SshKeyResultsPage {
        pub fn builder() -> builder::SshKeyResultsPage {
            Default::default()
        }
    }

    /// An operator's view of a Switch.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "An operator's view of a Switch.",
    ///  "type": "object",
    ///  "required": [
    ///    "baseboard",
    ///    "id",
    ///    "rack_id",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "baseboard": {
    ///      "$ref": "#/components/schemas/Baseboard"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "rack_id": {
    ///      "description": "The rack to which this Switch is currently
    /// attached",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Switch {
        pub baseboard: Baseboard,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// The rack to which this Switch is currently attached
        pub rack_id: uuid::Uuid,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Switch> for Switch {
        fn from(value: &Switch) -> Self {
            value.clone()
        }
    }

    impl Switch {
        pub fn builder() -> builder::Switch {
            Default::default()
        }
    }

    /// A layer-3 switch interface configuration. When IPv6 is enabled, a link
    /// local address will be created for the interface.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A layer-3 switch interface configuration. When IPv6 is
    /// enabled, a link local address will be created for the interface.",
    ///  "type": "object",
    ///  "required": [
    ///    "kind",
    ///    "v6_enabled"
    ///  ],
    ///  "properties": {
    ///    "kind": {
    ///      "description": "What kind of switch interface this configuration
    /// represents.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SwitchInterfaceKind"
    ///        }
    ///      ]
    ///    },
    ///    "v6_enabled": {
    ///      "description": "Whether or not IPv6 is enabled.",
    ///      "type": "boolean"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchInterfaceConfig {
        /// What kind of switch interface this configuration represents.
        pub kind: SwitchInterfaceKind,
        /// Whether or not IPv6 is enabled.
        pub v6_enabled: bool,
    }

    impl From<&SwitchInterfaceConfig> for SwitchInterfaceConfig {
        fn from(value: &SwitchInterfaceConfig) -> Self {
            value.clone()
        }
    }

    impl SwitchInterfaceConfig {
        pub fn builder() -> builder::SwitchInterfaceConfig {
            Default::default()
        }
    }

    /// Indicates the kind for a switch interface.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Indicates the kind for a switch interface.",
    ///  "oneOf": [
    ///    {
    ///      "description": "Primary interfaces are associated with physical
    /// links. There is exactly one primary interface per physical link.",
    ///      "type": "object",
    ///      "required": [
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "primary"
    ///          ]
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "VLAN interfaces allow physical interfaces to be
    /// multiplexed onto multiple logical links, each distinguished by a 12-bit
    /// 802.1Q Ethernet tag.",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "vid"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "vlan"
    ///          ]
    ///        },
    ///        "vid": {
    ///          "description": "The virtual network id (VID) that distinguishes
    /// this interface and is used for producing and consuming 802.1Q Ethernet
    /// tags. This field has a maximum value of 4095 as 802.1Q tags are twelve
    /// bits.",
    ///          "type": "integer",
    ///          "format": "uint16",
    ///          "minimum": 0.0
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Loopback interfaces are anchors for IP addresses
    /// that are not specific to any particular port.",
    ///      "type": "object",
    ///      "required": [
    ///        "type"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "loopback"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type", content = "vid")]
    pub enum SwitchInterfaceKind {
        #[serde(rename = "primary")]
        Primary,
        /// VLAN interfaces allow physical interfaces to be multiplexed onto
        /// multiple logical links, each distinguished by a 12-bit 802.1Q
        /// Ethernet tag.
        #[serde(rename = "vlan")]
        Vlan(u16),
        #[serde(rename = "loopback")]
        Loopback,
    }

    impl From<&SwitchInterfaceKind> for SwitchInterfaceKind {
        fn from(value: &SwitchInterfaceKind) -> Self {
            value.clone()
        }
    }

    impl From<u16> for SwitchInterfaceKind {
        fn from(value: u16) -> Self {
            Self::Vlan(value)
        }
    }

    /// Identifies switch physical location
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Identifies switch physical location",
    ///  "oneOf": [
    ///    {
    ///      "description": "Switch in upper slot",
    ///      "type": "string",
    ///      "enum": [
    ///        "switch0"
    ///      ]
    ///    },
    ///    {
    ///      "description": "Switch in lower slot",
    ///      "type": "string",
    ///      "enum": [
    ///        "switch1"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum SwitchLocation {
        /// Switch in upper slot
        #[serde(rename = "switch0")]
        Switch0,
        /// Switch in lower slot
        #[serde(rename = "switch1")]
        Switch1,
    }

    impl From<&SwitchLocation> for SwitchLocation {
        fn from(value: &SwitchLocation) -> Self {
            value.clone()
        }
    }

    impl ToString for SwitchLocation {
        fn to_string(&self) -> String {
            match *self {
                Self::Switch0 => "switch0".to_string(),
                Self::Switch1 => "switch1".to_string(),
            }
        }
    }

    impl std::str::FromStr for SwitchLocation {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "switch0" => Ok(Self::Switch0),
                "switch1" => Ok(Self::Switch1),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for SwitchLocation {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for SwitchLocation {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for SwitchLocation {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// A switch port represents a physical external port on a rack switch.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A switch port represents a physical external port on a
    /// rack switch.",
    ///  "type": "object",
    ///  "required": [
    ///    "id",
    ///    "port_name",
    ///    "rack_id",
    ///    "switch_location"
    ///  ],
    ///  "properties": {
    ///    "id": {
    ///      "description": "The id of the switch port.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "port_name": {
    ///      "description": "The name of this switch port.",
    ///      "type": "string"
    ///    },
    ///    "port_settings_id": {
    ///      "description": "The primary settings group of this switch port.
    /// Will be `None` until this switch port is configured.",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ],
    ///      "format": "uuid"
    ///    },
    ///    "rack_id": {
    ///      "description": "The rack this switch port belongs to.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "switch_location": {
    ///      "description": "The switch location of this switch port.",
    ///      "type": "string"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPort {
        /// The id of the switch port.
        pub id: uuid::Uuid,
        /// The name of this switch port.
        pub port_name: String,
        /// The primary settings group of this switch port. Will be `None` until
        /// this switch port is configured.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub port_settings_id: Option<uuid::Uuid>,
        /// The rack this switch port belongs to.
        pub rack_id: uuid::Uuid,
        /// The switch location of this switch port.
        pub switch_location: String,
    }

    impl From<&SwitchPort> for SwitchPort {
        fn from(value: &SwitchPort) -> Self {
            value.clone()
        }
    }

    impl SwitchPort {
        pub fn builder() -> builder::SwitchPort {
            Default::default()
        }
    }

    /// An IP address configuration for a port settings object.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "An IP address configuration for a port settings
    /// object.",
    ///  "type": "object",
    ///  "required": [
    ///    "address",
    ///    "address_lot_block_id",
    ///    "interface_name",
    ///    "port_settings_id"
    ///  ],
    ///  "properties": {
    ///    "address": {
    ///      "description": "The IP address and prefix.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/IpNet"
    ///        }
    ///      ]
    ///    },
    ///    "address_lot_block_id": {
    ///      "description": "The id of the address lot block this address is
    /// drawn from.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "interface_name": {
    ///      "description": "The interface name this address belongs to.",
    ///      "type": "string"
    ///    },
    ///    "port_settings_id": {
    ///      "description": "The port settings object this address configuration
    /// belongs to.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortAddressConfig {
        /// The IP address and prefix.
        pub address: IpNet,
        /// The id of the address lot block this address is drawn from.
        pub address_lot_block_id: uuid::Uuid,
        /// The interface name this address belongs to.
        pub interface_name: String,
        /// The port settings object this address configuration belongs to.
        pub port_settings_id: uuid::Uuid,
    }

    impl From<&SwitchPortAddressConfig> for SwitchPortAddressConfig {
        fn from(value: &SwitchPortAddressConfig) -> Self {
            value.clone()
        }
    }

    impl SwitchPortAddressConfig {
        pub fn builder() -> builder::SwitchPortAddressConfig {
            Default::default()
        }
    }

    /// Parameters for applying settings to switch ports.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for applying settings to switch ports.",
    ///  "type": "object",
    ///  "required": [
    ///    "port_settings"
    ///  ],
    ///  "properties": {
    ///    "port_settings": {
    ///      "description": "A name or id to use when applying switch port
    /// settings.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/NameOrId"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortApplySettings {
        /// A name or id to use when applying switch port settings.
        pub port_settings: NameOrId,
    }

    impl From<&SwitchPortApplySettings> for SwitchPortApplySettings {
        fn from(value: &SwitchPortApplySettings) -> Self {
            value.clone()
        }
    }

    impl SwitchPortApplySettings {
        pub fn builder() -> builder::SwitchPortApplySettings {
            Default::default()
        }
    }

    /// A BGP peer configuration for a port settings object.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A BGP peer configuration for a port settings object.",
    ///  "type": "object",
    ///  "required": [
    ///    "addr",
    ///    "bgp_config_id",
    ///    "interface_name",
    ///    "port_settings_id"
    ///  ],
    ///  "properties": {
    ///    "addr": {
    ///      "description": "The address of the peer.",
    ///      "type": "string",
    ///      "format": "ip"
    ///    },
    ///    "bgp_config_id": {
    ///      "description": "The id of the global BGP configuration referenced
    /// by this peer configuration.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "interface_name": {
    ///      "description": "The interface name used to establish a peer
    /// session.",
    ///      "type": "string"
    ///    },
    ///    "port_settings_id": {
    ///      "description": "The port settings object this BGP configuration
    /// belongs to.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortBgpPeerConfig {
        /// The address of the peer.
        pub addr: std::net::IpAddr,
        /// The id of the global BGP configuration referenced by this peer
        /// configuration.
        pub bgp_config_id: uuid::Uuid,
        /// The interface name used to establish a peer session.
        pub interface_name: String,
        /// The port settings object this BGP configuration belongs to.
        pub port_settings_id: uuid::Uuid,
    }

    impl From<&SwitchPortBgpPeerConfig> for SwitchPortBgpPeerConfig {
        fn from(value: &SwitchPortBgpPeerConfig) -> Self {
            value.clone()
        }
    }

    impl SwitchPortBgpPeerConfig {
        pub fn builder() -> builder::SwitchPortBgpPeerConfig {
            Default::default()
        }
    }

    /// Physical switch port configuration.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Physical switch port configuration.",
    ///  "type": "object",
    ///  "required": [
    ///    "geometry"
    ///  ],
    ///  "properties": {
    ///    "geometry": {
    ///      "description": "Link geometry for the switch port.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SwitchPortGeometry"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortConfig {
        /// Link geometry for the switch port.
        pub geometry: SwitchPortGeometry,
    }

    impl From<&SwitchPortConfig> for SwitchPortConfig {
        fn from(value: &SwitchPortConfig) -> Self {
            value.clone()
        }
    }

    impl SwitchPortConfig {
        pub fn builder() -> builder::SwitchPortConfig {
            Default::default()
        }
    }

    /// The link geometry associated with a switch port.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The link geometry associated with a switch port.",
    ///  "oneOf": [
    ///    {
    ///      "description": "The port contains a single QSFP28 link with four
    /// lanes.",
    ///      "type": "string",
    ///      "enum": [
    ///        "qsfp28x1"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The port contains two QSFP28 links each with two
    /// lanes.",
    ///      "type": "string",
    ///      "enum": [
    ///        "qsfp28x2"
    ///      ]
    ///    },
    ///    {
    ///      "description": "The port contains four SFP28 links each with one
    /// lane.",
    ///      "type": "string",
    ///      "enum": [
    ///        "sfp28x4"
    ///      ]
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum SwitchPortGeometry {
        /// The port contains a single QSFP28 link with four lanes.
        #[serde(rename = "qsfp28x1")]
        Qsfp28x1,
        /// The port contains two QSFP28 links each with two lanes.
        #[serde(rename = "qsfp28x2")]
        Qsfp28x2,
        /// The port contains four SFP28 links each with one lane.
        #[serde(rename = "sfp28x4")]
        Sfp28x4,
    }

    impl From<&SwitchPortGeometry> for SwitchPortGeometry {
        fn from(value: &SwitchPortGeometry) -> Self {
            value.clone()
        }
    }

    impl ToString for SwitchPortGeometry {
        fn to_string(&self) -> String {
            match *self {
                Self::Qsfp28x1 => "qsfp28x1".to_string(),
                Self::Qsfp28x2 => "qsfp28x2".to_string(),
                Self::Sfp28x4 => "sfp28x4".to_string(),
            }
        }
    }

    impl std::str::FromStr for SwitchPortGeometry {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "qsfp28x1" => Ok(Self::Qsfp28x1),
                "qsfp28x2" => Ok(Self::Qsfp28x2),
                "sfp28x4" => Ok(Self::Sfp28x4),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for SwitchPortGeometry {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for SwitchPortGeometry {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for SwitchPortGeometry {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// A link configuration for a port settings object.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A link configuration for a port settings object.",
    ///  "type": "object",
    ///  "required": [
    ///    "link_name",
    ///    "lldp_service_config_id",
    ///    "mtu",
    ///    "port_settings_id"
    ///  ],
    ///  "properties": {
    ///    "link_name": {
    ///      "description": "The name of this link.",
    ///      "type": "string"
    ///    },
    ///    "lldp_service_config_id": {
    ///      "description": "The link-layer discovery protocol service
    /// configuration id for this link.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "mtu": {
    ///      "description": "The maximum transmission unit for this link.",
    ///      "type": "integer",
    ///      "format": "uint16",
    ///      "minimum": 0.0
    ///    },
    ///    "port_settings_id": {
    ///      "description": "The port settings this link configuration belongs
    /// to.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortLinkConfig {
        /// The name of this link.
        pub link_name: String,
        /// The link-layer discovery protocol service configuration id for this
        /// link.
        pub lldp_service_config_id: uuid::Uuid,
        /// The maximum transmission unit for this link.
        pub mtu: u16,
        /// The port settings this link configuration belongs to.
        pub port_settings_id: uuid::Uuid,
    }

    impl From<&SwitchPortLinkConfig> for SwitchPortLinkConfig {
        fn from(value: &SwitchPortLinkConfig) -> Self {
            value.clone()
        }
    }

    impl SwitchPortLinkConfig {
        pub fn builder() -> builder::SwitchPortLinkConfig {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SwitchPort"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortResultsPage {
        /// list of items on this page of results
        pub items: Vec<SwitchPort>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&SwitchPortResultsPage> for SwitchPortResultsPage {
        fn from(value: &SwitchPortResultsPage) -> Self {
            value.clone()
        }
    }

    impl SwitchPortResultsPage {
        pub fn builder() -> builder::SwitchPortResultsPage {
            Default::default()
        }
    }

    /// A route configuration for a port settings object.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A route configuration for a port settings object.",
    ///  "type": "object",
    ///  "required": [
    ///    "dst",
    ///    "gw",
    ///    "interface_name",
    ///    "port_settings_id"
    ///  ],
    ///  "properties": {
    ///    "dst": {
    ///      "description": "The route's destination network.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/IpNet"
    ///        }
    ///      ]
    ///    },
    ///    "gw": {
    ///      "description": "The route's gateway address.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/IpNet"
    ///        }
    ///      ]
    ///    },
    ///    "interface_name": {
    ///      "description": "The interface name this route configuration is
    /// assigned to.",
    ///      "type": "string"
    ///    },
    ///    "port_settings_id": {
    ///      "description": "The port settings object this route configuration
    /// belongs to.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "vlan_id": {
    ///      "description": "The VLAN identifier for the route. Use this if the
    /// gateway is reachable over an 802.1Q tagged L2 segment.",
    ///      "type": [
    ///        "integer",
    ///        "null"
    ///      ],
    ///      "format": "uint16",
    ///      "minimum": 0.0
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortRouteConfig {
        /// The route's destination network.
        pub dst: IpNet,
        /// The route's gateway address.
        pub gw: IpNet,
        /// The interface name this route configuration is assigned to.
        pub interface_name: String,
        /// The port settings object this route configuration belongs to.
        pub port_settings_id: uuid::Uuid,
        /// The VLAN identifier for the route. Use this if the gateway is
        /// reachable over an 802.1Q tagged L2 segment.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub vlan_id: Option<u16>,
    }

    impl From<&SwitchPortRouteConfig> for SwitchPortRouteConfig {
        fn from(value: &SwitchPortRouteConfig) -> Self {
            value.clone()
        }
    }

    impl SwitchPortRouteConfig {
        pub fn builder() -> builder::SwitchPortRouteConfig {
            Default::default()
        }
    }

    /// A switch port settings identity whose id may be used to view additional
    /// details.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A switch port settings identity whose id may be used to
    /// view additional details.",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "name",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortSettings {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&SwitchPortSettings> for SwitchPortSettings {
        fn from(value: &SwitchPortSettings) -> Self {
            value.clone()
        }
    }

    impl SwitchPortSettings {
        pub fn builder() -> builder::SwitchPortSettings {
            Default::default()
        }
    }

    /// Parameters for creating switch port settings. Switch port settings are
    /// the central data structure for setting up external networking. Switch
    /// port settings include link, interface, route, address and dynamic
    /// network protocol configuration.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for creating switch port settings. Switch
    /// port settings are the central data structure for setting up external
    /// networking. Switch port settings include link, interface, route, address
    /// and dynamic network protocol configuration.",
    ///  "type": "object",
    ///  "required": [
    ///    "addresses",
    ///    "bgp_peers",
    ///    "description",
    ///    "groups",
    ///    "interfaces",
    ///    "links",
    ///    "name",
    ///    "port_config",
    ///    "routes"
    ///  ],
    ///  "properties": {
    ///    "addresses": {
    ///      "description": "Addresses indexed by interface name.",
    ///      "type": "object",
    ///      "additionalProperties": {
    ///        "$ref": "#/components/schemas/AddressConfig"
    ///      }
    ///    },
    ///    "bgp_peers": {
    ///      "description": "BGP peers indexed by interface name.",
    ///      "type": "object",
    ///      "additionalProperties": {
    ///        "$ref": "#/components/schemas/BgpPeerConfig"
    ///      }
    ///    },
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "groups": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/NameOrId"
    ///      }
    ///    },
    ///    "interfaces": {
    ///      "description": "Interfaces indexed by link name.",
    ///      "type": "object",
    ///      "additionalProperties": {
    ///        "$ref": "#/components/schemas/SwitchInterfaceConfig"
    ///      }
    ///    },
    ///    "links": {
    ///      "description": "Links indexed by phy name. On ports that are not
    /// broken out, this is always phy0. On a 2x breakout the options are phy0
    /// and phy1, on 4x phy0-phy3, etc.",
    ///      "type": "object",
    ///      "additionalProperties": {
    ///        "$ref": "#/components/schemas/LinkConfig"
    ///      }
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "port_config": {
    ///      "$ref": "#/components/schemas/SwitchPortConfig"
    ///    },
    ///    "routes": {
    ///      "description": "Routes indexed by interface name.",
    ///      "type": "object",
    ///      "additionalProperties": {
    ///        "$ref": "#/components/schemas/RouteConfig"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortSettingsCreate {
        /// Addresses indexed by interface name.
        pub addresses: std::collections::HashMap<String, AddressConfig>,
        /// BGP peers indexed by interface name.
        pub bgp_peers: std::collections::HashMap<String, BgpPeerConfig>,
        pub description: String,
        pub groups: Vec<NameOrId>,
        /// Interfaces indexed by link name.
        pub interfaces: std::collections::HashMap<String, SwitchInterfaceConfig>,
        /// Links indexed by phy name. On ports that are not broken out, this is
        /// always phy0. On a 2x breakout the options are phy0 and phy1, on 4x
        /// phy0-phy3, etc.
        pub links: std::collections::HashMap<String, LinkConfig>,
        pub name: Name,
        pub port_config: SwitchPortConfig,
        /// Routes indexed by interface name.
        pub routes: std::collections::HashMap<String, RouteConfig>,
    }

    impl From<&SwitchPortSettingsCreate> for SwitchPortSettingsCreate {
        fn from(value: &SwitchPortSettingsCreate) -> Self {
            value.clone()
        }
    }

    impl SwitchPortSettingsCreate {
        pub fn builder() -> builder::SwitchPortSettingsCreate {
            Default::default()
        }
    }

    /// This structure maps a port settings object to a port settings groups.
    /// Port settings objects may inherit settings from groups. This mapping
    /// defines the relationship between settings objects and the groups they
    /// reference.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "This structure maps a port settings object to a port
    /// settings groups. Port settings objects may inherit settings from groups.
    /// This mapping defines the relationship between settings objects and the
    /// groups they reference.",
    ///  "type": "object",
    ///  "required": [
    ///    "port_settings_group_id",
    ///    "port_settings_id"
    ///  ],
    ///  "properties": {
    ///    "port_settings_group_id": {
    ///      "description": "The id of a port settings group being referenced by
    /// a port settings object.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "port_settings_id": {
    ///      "description": "The id of a port settings object referencing a port
    /// settings group.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortSettingsGroups {
        /// The id of a port settings group being referenced by a port settings
        /// object.
        pub port_settings_group_id: uuid::Uuid,
        /// The id of a port settings object referencing a port settings group.
        pub port_settings_id: uuid::Uuid,
    }

    impl From<&SwitchPortSettingsGroups> for SwitchPortSettingsGroups {
        fn from(value: &SwitchPortSettingsGroups) -> Self {
            value.clone()
        }
    }

    impl SwitchPortSettingsGroups {
        pub fn builder() -> builder::SwitchPortSettingsGroups {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SwitchPortSettings"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortSettingsResultsPage {
        /// list of items on this page of results
        pub items: Vec<SwitchPortSettings>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&SwitchPortSettingsResultsPage> for SwitchPortSettingsResultsPage {
        fn from(value: &SwitchPortSettingsResultsPage) -> Self {
            value.clone()
        }
    }

    impl SwitchPortSettingsResultsPage {
        pub fn builder() -> builder::SwitchPortSettingsResultsPage {
            Default::default()
        }
    }

    /// This structure contains all port settings information in one place. It's
    /// a convenience data structure for getting a complete view of a particular
    /// port's settings.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "This structure contains all port settings information
    /// in one place. It's a convenience data structure for getting a complete
    /// view of a particular port's settings.",
    ///  "type": "object",
    ///  "required": [
    ///    "addresses",
    ///    "bgp_peers",
    ///    "groups",
    ///    "interfaces",
    ///    "link_lldp",
    ///    "links",
    ///    "port",
    ///    "routes",
    ///    "settings",
    ///    "vlan_interfaces"
    ///  ],
    ///  "properties": {
    ///    "addresses": {
    ///      "description": "Layer 3 IP address settings.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SwitchPortAddressConfig"
    ///      }
    ///    },
    ///    "bgp_peers": {
    ///      "description": "BGP peer settings.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SwitchPortBgpPeerConfig"
    ///      }
    ///    },
    ///    "groups": {
    ///      "description": "Switch port settings included from other switch
    /// port settings groups.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SwitchPortSettingsGroups"
    ///      }
    ///    },
    ///    "interfaces": {
    ///      "description": "Layer 3 interface settings.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SwitchInterfaceConfig"
    ///      }
    ///    },
    ///    "link_lldp": {
    ///      "description": "Link-layer discovery protocol (LLDP) settings.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/LldpServiceConfig"
    ///      }
    ///    },
    ///    "links": {
    ///      "description": "Layer 2 link settings.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SwitchPortLinkConfig"
    ///      }
    ///    },
    ///    "port": {
    ///      "description": "Layer 1 physical port settings.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SwitchPortConfig"
    ///        }
    ///      ]
    ///    },
    ///    "routes": {
    ///      "description": "IP route settings.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SwitchPortRouteConfig"
    ///      }
    ///    },
    ///    "settings": {
    ///      "description": "The primary switch port settings handle.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/SwitchPortSettings"
    ///        }
    ///      ]
    ///    },
    ///    "vlan_interfaces": {
    ///      "description": "Vlan interface settings.",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/SwitchVlanInterfaceConfig"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchPortSettingsView {
        /// Layer 3 IP address settings.
        pub addresses: Vec<SwitchPortAddressConfig>,
        /// BGP peer settings.
        pub bgp_peers: Vec<SwitchPortBgpPeerConfig>,
        /// Switch port settings included from other switch port settings
        /// groups.
        pub groups: Vec<SwitchPortSettingsGroups>,
        /// Layer 3 interface settings.
        pub interfaces: Vec<SwitchInterfaceConfig>,
        /// Link-layer discovery protocol (LLDP) settings.
        pub link_lldp: Vec<LldpServiceConfig>,
        /// Layer 2 link settings.
        pub links: Vec<SwitchPortLinkConfig>,
        /// Layer 1 physical port settings.
        pub port: SwitchPortConfig,
        /// IP route settings.
        pub routes: Vec<SwitchPortRouteConfig>,
        /// The primary switch port settings handle.
        pub settings: SwitchPortSettings,
        /// Vlan interface settings.
        pub vlan_interfaces: Vec<SwitchVlanInterfaceConfig>,
    }

    impl From<&SwitchPortSettingsView> for SwitchPortSettingsView {
        fn from(value: &SwitchPortSettingsView) -> Self {
            value.clone()
        }
    }

    impl SwitchPortSettingsView {
        pub fn builder() -> builder::SwitchPortSettingsView {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Switch"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchResultsPage {
        /// list of items on this page of results
        pub items: Vec<Switch>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&SwitchResultsPage> for SwitchResultsPage {
        fn from(value: &SwitchResultsPage) -> Self {
            value.clone()
        }
    }

    impl SwitchResultsPage {
        pub fn builder() -> builder::SwitchResultsPage {
            Default::default()
        }
    }

    /// A switch port VLAN interface configuration for a port settings object.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A switch port VLAN interface configuration for a port
    /// settings object.",
    ///  "type": "object",
    ///  "required": [
    ///    "interface_config_id",
    ///    "vlan_id"
    ///  ],
    ///  "properties": {
    ///    "interface_config_id": {
    ///      "description": "The switch interface configuration this VLAN
    /// interface configuration belongs to.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "vlan_id": {
    ///      "description": "The virtual network id for this interface that is
    /// used for producing and consuming 802.1Q Ethernet tags. This field has a
    /// maximum value of 4095 as 802.1Q tags are twelve bits.",
    ///      "type": "integer",
    ///      "format": "uint16",
    ///      "minimum": 0.0
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct SwitchVlanInterfaceConfig {
        /// The switch interface configuration this VLAN interface configuration
        /// belongs to.
        pub interface_config_id: uuid::Uuid,
        /// The virtual network id for this interface that is used for producing
        /// and consuming 802.1Q Ethernet tags. This field has a maximum value
        /// of 4095 as 802.1Q tags are twelve bits.
        pub vlan_id: u16,
    }

    impl From<&SwitchVlanInterfaceConfig> for SwitchVlanInterfaceConfig {
        fn from(value: &SwitchVlanInterfaceConfig) -> Self {
            value.clone()
        }
    }

    impl SwitchVlanInterfaceConfig {
        pub fn builder() -> builder::SwitchVlanInterfaceConfig {
            Default::default()
        }
    }

    /// SystemMetricName
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "string",
    ///  "enum": [
    ///    "virtual_disk_space_provisioned",
    ///    "cpus_provisioned",
    ///    "ram_provisioned"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum SystemMetricName {
        #[serde(rename = "virtual_disk_space_provisioned")]
        VirtualDiskSpaceProvisioned,
        #[serde(rename = "cpus_provisioned")]
        CpusProvisioned,
        #[serde(rename = "ram_provisioned")]
        RamProvisioned,
    }

    impl From<&SystemMetricName> for SystemMetricName {
        fn from(value: &SystemMetricName) -> Self {
            value.clone()
        }
    }

    impl ToString for SystemMetricName {
        fn to_string(&self) -> String {
            match *self {
                Self::VirtualDiskSpaceProvisioned => "virtual_disk_space_provisioned".to_string(),
                Self::CpusProvisioned => "cpus_provisioned".to_string(),
                Self::RamProvisioned => "ram_provisioned".to_string(),
            }
        }
    }

    impl std::str::FromStr for SystemMetricName {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "virtual_disk_space_provisioned" => Ok(Self::VirtualDiskSpaceProvisioned),
                "cpus_provisioned" => Ok(Self::CpusProvisioned),
                "ram_provisioned" => Ok(Self::RamProvisioned),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for SystemMetricName {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for SystemMetricName {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for SystemMetricName {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// A sled that has not been added to an initialized rack yet
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A sled that has not been added to an initialized rack
    /// yet",
    ///  "type": "object",
    ///  "required": [
    ///    "baseboard",
    ///    "cubby",
    ///    "rack_id"
    ///  ],
    ///  "properties": {
    ///    "baseboard": {
    ///      "$ref": "#/components/schemas/Baseboard"
    ///    },
    ///    "cubby": {
    ///      "type": "integer",
    ///      "format": "uint16",
    ///      "minimum": 0.0
    ///    },
    ///    "rack_id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct UninitializedSled {
        pub baseboard: Baseboard,
        pub cubby: u16,
        pub rack_id: uuid::Uuid,
    }

    impl From<&UninitializedSled> for UninitializedSled {
        fn from(value: &UninitializedSled) -> Self {
            value.clone()
        }
    }

    impl UninitializedSled {
        pub fn builder() -> builder::UninitializedSled {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/UninitializedSled"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct UninitializedSledResultsPage {
        /// list of items on this page of results
        pub items: Vec<UninitializedSled>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&UninitializedSledResultsPage> for UninitializedSledResultsPage {
        fn from(value: &UninitializedSledResultsPage) -> Self {
            value.clone()
        }
    }

    impl UninitializedSledResultsPage {
        pub fn builder() -> builder::UninitializedSledResultsPage {
            Default::default()
        }
    }

    /// View of a User
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a User",
    ///  "type": "object",
    ///  "required": [
    ///    "display_name",
    ///    "id",
    ///    "silo_id"
    ///  ],
    ///  "properties": {
    ///    "display_name": {
    ///      "description": "Human-readable name that can identify the user",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "silo_id": {
    ///      "description": "Uuid of the silo to which this user belongs",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct User {
        /// Human-readable name that can identify the user
        pub display_name: String,
        pub id: uuid::Uuid,
        /// Uuid of the silo to which this user belongs
        pub silo_id: uuid::Uuid,
    }

    impl From<&User> for User {
        fn from(value: &User) -> Self {
            value.clone()
        }
    }

    impl User {
        pub fn builder() -> builder::User {
            Default::default()
        }
    }

    /// View of a Built-in User
    ///
    /// A Built-in User is explicitly created as opposed to being derived from
    /// an Identify Provider.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a Built-in User\n\nA Built-in User is
    /// explicitly created as opposed to being derived from an Identify
    /// Provider.",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "name",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct UserBuiltin {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&UserBuiltin> for UserBuiltin {
        fn from(value: &UserBuiltin) -> Self {
            value.clone()
        }
    }

    impl UserBuiltin {
        pub fn builder() -> builder::UserBuiltin {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/UserBuiltin"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct UserBuiltinResultsPage {
        /// list of items on this page of results
        pub items: Vec<UserBuiltin>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&UserBuiltinResultsPage> for UserBuiltinResultsPage {
        fn from(value: &UserBuiltinResultsPage) -> Self {
            value.clone()
        }
    }

    impl UserBuiltinResultsPage {
        pub fn builder() -> builder::UserBuiltinResultsPage {
            Default::default()
        }
    }

    /// Create-time parameters for a `User`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for a `User`",
    ///  "type": "object",
    ///  "required": [
    ///    "external_id",
    ///    "password"
    ///  ],
    ///  "properties": {
    ///    "external_id": {
    ///      "description": "username used to log in",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/UserId"
    ///        }
    ///      ]
    ///    },
    ///    "password": {
    ///      "description": "how to set the user's login password",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/UserPassword"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct UserCreate {
        /// username used to log in
        pub external_id: UserId,
        /// how to set the user's login password
        pub password: UserPassword,
    }

    impl From<&UserCreate> for UserCreate {
        fn from(value: &UserCreate) -> Self {
            value.clone()
        }
    }

    impl UserCreate {
        pub fn builder() -> builder::UserCreate {
            Default::default()
        }
    }

    /// Names must begin with a lower case ASCII letter, be composed exclusively
    /// of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end
    /// with a '-'. Names cannot be a UUID though they may contain a UUID.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "title": "A name unique within the parent collection",
    ///  "description": "Names must begin with a lower case ASCII letter, be
    /// composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and
    /// '-', and may not end with a '-'. Names cannot be a UUID though they may
    /// contain a UUID.",
    ///  "type": "string",
    ///  "maxLength": 63,
    ///  "minLength": 1,
    ///  "pattern":
    /// "^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*
    /// [a-zA-Z0-9]+)?$"
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, Serialize, schemars :: JsonSchema,
    )]
    pub struct UserId(String);
    impl std::ops::Deref for UserId {
        type Target = String;
        fn deref(&self) -> &String {
            &self.0
        }
    }

    impl From<UserId> for String {
        fn from(value: UserId) -> Self {
            value.0
        }
    }

    impl From<&UserId> for UserId {
        fn from(value: &UserId) -> Self {
            value.clone()
        }
    }

    impl std::str::FromStr for UserId {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            if value.len() > 63usize {
                return Err("longer than 63 characters");
            }
            if value.len() < 1usize {
                return Err("shorter than 1 characters");
            }
            if regress :: Regex :: new ("^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$") . unwrap () . find (value) . is_none () { return Err ("doesn't match pattern \"^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$\"") ; }
            Ok(Self(value.to_string()))
        }
    }

    impl std::convert::TryFrom<&str> for UserId {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for UserId {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for UserId {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl<'de> serde::Deserialize<'de> for UserId {
        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            String::deserialize(deserializer)?
                .parse()
                .map_err(|e: &'static str| <D::Error as serde::de::Error>::custom(e.to_string()))
        }
    }

    /// Parameters for setting a user's password
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Parameters for setting a user's password",
    ///  "oneOf": [
    ///    {
    ///      "description": "Sets the user's password to the provided value",
    ///      "type": "object",
    ///      "required": [
    ///        "mode",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "mode": {
    ///          "type": "string",
    ///          "enum": [
    ///            "password"
    ///          ]
    ///        },
    ///        "value": {
    ///          "$ref": "#/components/schemas/Password"
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "Invalidates any current password (disabling
    /// password authentication)",
    ///      "type": "object",
    ///      "required": [
    ///        "mode"
    ///      ],
    ///      "properties": {
    ///        "mode": {
    ///          "type": "string",
    ///          "enum": [
    ///            "login_disallowed"
    ///          ]
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "mode", content = "value")]
    pub enum UserPassword {
        /// Sets the user's password to the provided value
        #[serde(rename = "password")]
        Password(Password),
        #[serde(rename = "login_disallowed")]
        LoginDisallowed,
    }

    impl From<&UserPassword> for UserPassword {
        fn from(value: &UserPassword) -> Self {
            value.clone()
        }
    }

    impl From<Password> for UserPassword {
        fn from(value: Password) -> Self {
            Self::Password(value)
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/User"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct UserResultsPage {
        /// list of items on this page of results
        pub items: Vec<User>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&UserResultsPage> for UserResultsPage {
        fn from(value: &UserResultsPage) -> Self {
            value.clone()
        }
    }

    impl UserResultsPage {
        pub fn builder() -> builder::UserResultsPage {
            Default::default()
        }
    }

    /// Credentials for local user login
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Credentials for local user login",
    ///  "type": "object",
    ///  "required": [
    ///    "password",
    ///    "username"
    ///  ],
    ///  "properties": {
    ///    "password": {
    ///      "$ref": "#/components/schemas/Password"
    ///    },
    ///    "username": {
    ///      "$ref": "#/components/schemas/UserId"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct UsernamePasswordCredentials {
        pub password: Password,
        pub username: UserId,
    }

    impl From<&UsernamePasswordCredentials> for UsernamePasswordCredentials {
        fn from(value: &UsernamePasswordCredentials) -> Self {
            value.clone()
        }
    }

    impl UsernamePasswordCredentials {
        pub fn builder() -> builder::UsernamePasswordCredentials {
            Default::default()
        }
    }

    /// View of the current silo's resource utilization and capacity
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of the current silo's resource utilization and
    /// capacity",
    ///  "type": "object",
    ///  "required": [
    ///    "capacity",
    ///    "provisioned"
    ///  ],
    ///  "properties": {
    ///    "capacity": {
    ///      "description": "The total amount of resources that can be
    /// provisioned in this silo Actions that would exceed this limit will
    /// fail",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VirtualResourceCounts"
    ///        }
    ///      ]
    ///    },
    ///    "provisioned": {
    ///      "description": "Accounts for resources allocated to running
    /// instances or storage allocated via disks or snapshots Note that CPU and
    /// memory resources associated with a stopped instances are not counted
    /// here whereas associated disks will still be counted",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VirtualResourceCounts"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Utilization {
        /// The total amount of resources that can be provisioned in this silo
        /// Actions that would exceed this limit will fail
        pub capacity: VirtualResourceCounts,
        /// Accounts for resources allocated to running instances or storage
        /// allocated via disks or snapshots Note that CPU and memory resources
        /// associated with a stopped instances are not counted here whereas
        /// associated disks will still be counted
        pub provisioned: VirtualResourceCounts,
    }

    impl From<&Utilization> for Utilization {
        fn from(value: &Utilization) -> Self {
            value.clone()
        }
    }

    impl Utilization {
        pub fn builder() -> builder::Utilization {
            Default::default()
        }
    }

    /// A collection of resource counts used to describe capacity and
    /// utilization
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A collection of resource counts used to describe
    /// capacity and utilization",
    ///  "type": "object",
    ///  "required": [
    ///    "cpus",
    ///    "memory",
    ///    "storage"
    ///  ],
    ///  "properties": {
    ///    "cpus": {
    ///      "description": "Number of virtual CPUs",
    ///      "type": "integer",
    ///      "format": "int64"
    ///    },
    ///    "memory": {
    ///      "description": "Amount of memory in bytes",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    },
    ///    "storage": {
    ///      "description": "Amount of disk storage in bytes",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/ByteCount"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VirtualResourceCounts {
        /// Number of virtual CPUs
        pub cpus: i64,
        /// Amount of memory in bytes
        pub memory: ByteCount,
        /// Amount of disk storage in bytes
        pub storage: ByteCount,
    }

    impl From<&VirtualResourceCounts> for VirtualResourceCounts {
        fn from(value: &VirtualResourceCounts) -> Self {
            value.clone()
        }
    }

    impl VirtualResourceCounts {
        pub fn builder() -> builder::VirtualResourceCounts {
            Default::default()
        }
    }

    /// View of a VPC
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "View of a VPC",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "dns_name",
    ///    "id",
    ///    "ipv6_prefix",
    ///    "name",
    ///    "project_id",
    ///    "system_router_id",
    ///    "time_created",
    ///    "time_modified"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "dns_name": {
    ///      "description": "The name used for the VPC in DNS.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "ipv6_prefix": {
    ///      "description": "The unique local IPv6 address range for subnets in
    /// this VPC",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv6Net"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "project_id": {
    ///      "description": "id for the project containing this VPC",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "system_router_id": {
    ///      "description": "id for the system router where subnet default
    /// routes are registered",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct Vpc {
        /// human-readable free-form text about a resource
        pub description: String,
        /// The name used for the VPC in DNS.
        pub dns_name: Name,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// The unique local IPv6 address range for subnets in this VPC
        pub ipv6_prefix: Ipv6Net,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// id for the project containing this VPC
        pub project_id: uuid::Uuid,
        /// id for the system router where subnet default routes are registered
        pub system_router_id: uuid::Uuid,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
    }

    impl From<&Vpc> for Vpc {
        fn from(value: &Vpc) -> Self {
            value.clone()
        }
    }

    impl Vpc {
        pub fn builder() -> builder::Vpc {
            Default::default()
        }
    }

    /// Create-time parameters for a `Vpc`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for a `Vpc`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "dns_name",
    ///    "name"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "dns_name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    },
    ///    "ipv6_prefix": {
    ///      "description": "The IPv6 prefix for this VPC\n\nAll IPv6 subnets
    /// created from this VPC must be taken from this range, which should be a
    /// Unique Local Address in the range `fd00::/48`. The default VPC Subnet
    /// will have the first `/64` range from this prefix.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv6Net"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcCreate {
        pub description: String,
        pub dns_name: Name,
        /// The IPv6 prefix for this VPC
        ///
        /// All IPv6 subnets created from this VPC must be taken from this
        /// range, which should be a Unique Local Address in the range
        /// `fd00::/48`. The default VPC Subnet will have the first `/64` range
        /// from this prefix.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub ipv6_prefix: Option<Ipv6Net>,
        pub name: Name,
    }

    impl From<&VpcCreate> for VpcCreate {
        fn from(value: &VpcCreate) -> Self {
            value.clone()
        }
    }

    impl VpcCreate {
        pub fn builder() -> builder::VpcCreate {
            Default::default()
        }
    }

    /// A single rule in a VPC firewall
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single rule in a VPC firewall",
    ///  "type": "object",
    ///  "required": [
    ///    "action",
    ///    "description",
    ///    "direction",
    ///    "filters",
    ///    "id",
    ///    "name",
    ///    "priority",
    ///    "status",
    ///    "targets",
    ///    "time_created",
    ///    "time_modified",
    ///    "vpc_id"
    ///  ],
    ///  "properties": {
    ///    "action": {
    ///      "description": "whether traffic matching the rule should be allowed
    /// or dropped",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VpcFirewallRuleAction"
    ///        }
    ///      ]
    ///    },
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "direction": {
    ///      "description": "whether this rule is for incoming or outgoing
    /// traffic",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VpcFirewallRuleDirection"
    ///        }
    ///      ]
    ///    },
    ///    "filters": {
    ///      "description": "reductions on the scope of the rule",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VpcFirewallRuleFilter"
    ///        }
    ///      ]
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "priority": {
    ///      "description": "the relative priority of this rule",
    ///      "type": "integer",
    ///      "format": "uint16",
    ///      "minimum": 0.0
    ///    },
    ///    "status": {
    ///      "description": "whether this rule is in effect",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VpcFirewallRuleStatus"
    ///        }
    ///      ]
    ///    },
    ///    "targets": {
    ///      "description": "list of sets of instances that the rule applies
    /// to",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/VpcFirewallRuleTarget"
    ///      }
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "vpc_id": {
    ///      "description": "the VPC to which this rule belongs",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcFirewallRule {
        /// whether traffic matching the rule should be allowed or dropped
        pub action: VpcFirewallRuleAction,
        /// human-readable free-form text about a resource
        pub description: String,
        /// whether this rule is for incoming or outgoing traffic
        pub direction: VpcFirewallRuleDirection,
        /// reductions on the scope of the rule
        pub filters: VpcFirewallRuleFilter,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// the relative priority of this rule
        pub priority: u16,
        /// whether this rule is in effect
        pub status: VpcFirewallRuleStatus,
        /// list of sets of instances that the rule applies to
        pub targets: Vec<VpcFirewallRuleTarget>,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        /// the VPC to which this rule belongs
        pub vpc_id: uuid::Uuid,
    }

    impl From<&VpcFirewallRule> for VpcFirewallRule {
        fn from(value: &VpcFirewallRule) -> Self {
            value.clone()
        }
    }

    impl VpcFirewallRule {
        pub fn builder() -> builder::VpcFirewallRule {
            Default::default()
        }
    }

    /// VpcFirewallRuleAction
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "string",
    ///  "enum": [
    ///    "allow",
    ///    "deny"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum VpcFirewallRuleAction {
        #[serde(rename = "allow")]
        Allow,
        #[serde(rename = "deny")]
        Deny,
    }

    impl From<&VpcFirewallRuleAction> for VpcFirewallRuleAction {
        fn from(value: &VpcFirewallRuleAction) -> Self {
            value.clone()
        }
    }

    impl ToString for VpcFirewallRuleAction {
        fn to_string(&self) -> String {
            match *self {
                Self::Allow => "allow".to_string(),
                Self::Deny => "deny".to_string(),
            }
        }
    }

    impl std::str::FromStr for VpcFirewallRuleAction {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "allow" => Ok(Self::Allow),
                "deny" => Ok(Self::Deny),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for VpcFirewallRuleAction {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for VpcFirewallRuleAction {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for VpcFirewallRuleAction {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// VpcFirewallRuleDirection
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "string",
    ///  "enum": [
    ///    "inbound",
    ///    "outbound"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum VpcFirewallRuleDirection {
        #[serde(rename = "inbound")]
        Inbound,
        #[serde(rename = "outbound")]
        Outbound,
    }

    impl From<&VpcFirewallRuleDirection> for VpcFirewallRuleDirection {
        fn from(value: &VpcFirewallRuleDirection) -> Self {
            value.clone()
        }
    }

    impl ToString for VpcFirewallRuleDirection {
        fn to_string(&self) -> String {
            match *self {
                Self::Inbound => "inbound".to_string(),
                Self::Outbound => "outbound".to_string(),
            }
        }
    }

    impl std::str::FromStr for VpcFirewallRuleDirection {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "inbound" => Ok(Self::Inbound),
                "outbound" => Ok(Self::Outbound),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for VpcFirewallRuleDirection {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for VpcFirewallRuleDirection {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for VpcFirewallRuleDirection {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// Filter for a firewall rule. A given packet must match every field that
    /// is present for the rule to apply to it. A packet matches a field if any
    /// entry in that field matches the packet.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Filter for a firewall rule. A given packet must match
    /// every field that is present for the rule to apply to it. A packet
    /// matches a field if any entry in that field matches the packet.",
    ///  "type": "object",
    ///  "properties": {
    ///    "hosts": {
    ///      "description": "If present, the sources (if incoming) or
    /// destinations (if outgoing) this rule applies to.",
    ///      "type": [
    ///        "array",
    ///        "null"
    ///      ],
    ///      "items": {
    ///        "$ref": "#/components/schemas/VpcFirewallRuleHostFilter"
    ///      }
    ///    },
    ///    "ports": {
    ///      "description": "If present, the destination ports this rule applies
    /// to.",
    ///      "type": [
    ///        "array",
    ///        "null"
    ///      ],
    ///      "items": {
    ///        "$ref": "#/components/schemas/L4PortRange"
    ///      }
    ///    },
    ///    "protocols": {
    ///      "description": "If present, the networking protocols this rule
    /// applies to.",
    ///      "type": [
    ///        "array",
    ///        "null"
    ///      ],
    ///      "items": {
    ///        "$ref": "#/components/schemas/VpcFirewallRuleProtocol"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcFirewallRuleFilter {
        /// If present, the sources (if incoming) or destinations (if outgoing)
        /// this rule applies to.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub hosts: Option<Vec<VpcFirewallRuleHostFilter>>,
        /// If present, the destination ports this rule applies to.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub ports: Option<Vec<L4PortRange>>,
        /// If present, the networking protocols this rule applies to.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub protocols: Option<Vec<VpcFirewallRuleProtocol>>,
    }

    impl From<&VpcFirewallRuleFilter> for VpcFirewallRuleFilter {
        fn from(value: &VpcFirewallRuleFilter) -> Self {
            value.clone()
        }
    }

    impl VpcFirewallRuleFilter {
        pub fn builder() -> builder::VpcFirewallRuleFilter {
            Default::default()
        }
    }

    /// The `VpcFirewallRuleHostFilter` is used to filter traffic on the basis
    /// of its source or destination host.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The `VpcFirewallRuleHostFilter` is used to filter
    /// traffic on the basis of its source or destination host.",
    ///  "oneOf": [
    ///    {
    ///      "description": "The rule applies to traffic from/to all instances
    /// in the VPC",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "vpc"
    ///          ]
    ///        },
    ///        "value": {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "The rule applies to traffic from/to all instances
    /// in the VPC Subnet",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "subnet"
    ///          ]
    ///        },
    ///        "value": {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "The rule applies to traffic from/to this specific
    /// instance",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "instance"
    ///          ]
    ///        },
    ///        "value": {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "The rule applies to traffic from/to a specific IP
    /// address",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "ip"
    ///          ]
    ///        },
    ///        "value": {
    ///          "type": "string",
    ///          "format": "ip"
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "The rule applies to traffic from/to a specific IP
    /// subnet",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "ip_net"
    ///          ]
    ///        },
    ///        "value": {
    ///          "$ref": "#/components/schemas/IpNet"
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type", content = "value")]
    pub enum VpcFirewallRuleHostFilter {
        /// The rule applies to traffic from/to all instances in the VPC
        #[serde(rename = "vpc")]
        Vpc(Name),
        /// The rule applies to traffic from/to all instances in the VPC Subnet
        #[serde(rename = "subnet")]
        Subnet(Name),
        /// The rule applies to traffic from/to this specific instance
        #[serde(rename = "instance")]
        Instance(Name),
        /// The rule applies to traffic from/to a specific IP address
        #[serde(rename = "ip")]
        Ip(std::net::IpAddr),
        /// The rule applies to traffic from/to a specific IP subnet
        #[serde(rename = "ip_net")]
        IpNet(IpNet),
    }

    impl From<&VpcFirewallRuleHostFilter> for VpcFirewallRuleHostFilter {
        fn from(value: &VpcFirewallRuleHostFilter) -> Self {
            value.clone()
        }
    }

    impl From<std::net::IpAddr> for VpcFirewallRuleHostFilter {
        fn from(value: std::net::IpAddr) -> Self {
            Self::Ip(value)
        }
    }

    impl From<IpNet> for VpcFirewallRuleHostFilter {
        fn from(value: IpNet) -> Self {
            Self::IpNet(value)
        }
    }

    /// The protocols that may be specified in a firewall rule's filter
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "The protocols that may be specified in a firewall
    /// rule's filter",
    ///  "type": "string",
    ///  "enum": [
    ///    "TCP",
    ///    "UDP",
    ///    "ICMP"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum VpcFirewallRuleProtocol {
        #[serde(rename = "TCP")]
        Tcp,
        #[serde(rename = "UDP")]
        Udp,
        #[serde(rename = "ICMP")]
        Icmp,
    }

    impl From<&VpcFirewallRuleProtocol> for VpcFirewallRuleProtocol {
        fn from(value: &VpcFirewallRuleProtocol) -> Self {
            value.clone()
        }
    }

    impl ToString for VpcFirewallRuleProtocol {
        fn to_string(&self) -> String {
            match *self {
                Self::Tcp => "TCP".to_string(),
                Self::Udp => "UDP".to_string(),
                Self::Icmp => "ICMP".to_string(),
            }
        }
    }

    impl std::str::FromStr for VpcFirewallRuleProtocol {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "TCP" => Ok(Self::Tcp),
                "UDP" => Ok(Self::Udp),
                "ICMP" => Ok(Self::Icmp),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for VpcFirewallRuleProtocol {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for VpcFirewallRuleProtocol {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for VpcFirewallRuleProtocol {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// VpcFirewallRuleStatus
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "type": "string",
    ///  "enum": [
    ///    "disabled",
    ///    "enabled"
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(
        Clone,
        Copy,
        Debug,
        Deserialize,
        Eq,
        Hash,
        Ord,
        PartialEq,
        PartialOrd,
        Serialize,
        schemars :: JsonSchema,
    )]
    pub enum VpcFirewallRuleStatus {
        #[serde(rename = "disabled")]
        Disabled,
        #[serde(rename = "enabled")]
        Enabled,
    }

    impl From<&VpcFirewallRuleStatus> for VpcFirewallRuleStatus {
        fn from(value: &VpcFirewallRuleStatus) -> Self {
            value.clone()
        }
    }

    impl ToString for VpcFirewallRuleStatus {
        fn to_string(&self) -> String {
            match *self {
                Self::Disabled => "disabled".to_string(),
                Self::Enabled => "enabled".to_string(),
            }
        }
    }

    impl std::str::FromStr for VpcFirewallRuleStatus {
        type Err = &'static str;
        fn from_str(value: &str) -> Result<Self, &'static str> {
            match value {
                "disabled" => Ok(Self::Disabled),
                "enabled" => Ok(Self::Enabled),
                _ => Err("invalid value"),
            }
        }
    }

    impl std::convert::TryFrom<&str> for VpcFirewallRuleStatus {
        type Error = &'static str;
        fn try_from(value: &str) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<&String> for VpcFirewallRuleStatus {
        type Error = &'static str;
        fn try_from(value: &String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    impl std::convert::TryFrom<String> for VpcFirewallRuleStatus {
        type Error = &'static str;
        fn try_from(value: String) -> Result<Self, &'static str> {
            value.parse()
        }
    }

    /// A `VpcFirewallRuleTarget` is used to specify the set of `Instance`s to
    /// which a firewall rule applies.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A `VpcFirewallRuleTarget` is used to specify the set of
    /// `Instance`s to which a firewall rule applies.",
    ///  "oneOf": [
    ///    {
    ///      "description": "The rule applies to all instances in the VPC",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "vpc"
    ///          ]
    ///        },
    ///        "value": {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "The rule applies to all instances in the VPC
    /// Subnet",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "subnet"
    ///          ]
    ///        },
    ///        "value": {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "The rule applies to this specific instance",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "instance"
    ///          ]
    ///        },
    ///        "value": {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "The rule applies to a specific IP address",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "ip"
    ///          ]
    ///        },
    ///        "value": {
    ///          "type": "string",
    ///          "format": "ip"
    ///        }
    ///      }
    ///    },
    ///    {
    ///      "description": "The rule applies to a specific IP subnet",
    ///      "type": "object",
    ///      "required": [
    ///        "type",
    ///        "value"
    ///      ],
    ///      "properties": {
    ///        "type": {
    ///          "type": "string",
    ///          "enum": [
    ///            "ip_net"
    ///          ]
    ///        },
    ///        "value": {
    ///          "$ref": "#/components/schemas/IpNet"
    ///        }
    ///      }
    ///    }
    ///  ]
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    #[serde(tag = "type", content = "value")]
    pub enum VpcFirewallRuleTarget {
        /// The rule applies to all instances in the VPC
        #[serde(rename = "vpc")]
        Vpc(Name),
        /// The rule applies to all instances in the VPC Subnet
        #[serde(rename = "subnet")]
        Subnet(Name),
        /// The rule applies to this specific instance
        #[serde(rename = "instance")]
        Instance(Name),
        /// The rule applies to a specific IP address
        #[serde(rename = "ip")]
        Ip(std::net::IpAddr),
        /// The rule applies to a specific IP subnet
        #[serde(rename = "ip_net")]
        IpNet(IpNet),
    }

    impl From<&VpcFirewallRuleTarget> for VpcFirewallRuleTarget {
        fn from(value: &VpcFirewallRuleTarget) -> Self {
            value.clone()
        }
    }

    impl From<std::net::IpAddr> for VpcFirewallRuleTarget {
        fn from(value: std::net::IpAddr) -> Self {
            Self::Ip(value)
        }
    }

    impl From<IpNet> for VpcFirewallRuleTarget {
        fn from(value: IpNet) -> Self {
            Self::IpNet(value)
        }
    }

    /// A single rule in a VPC firewall
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single rule in a VPC firewall",
    ///  "type": "object",
    ///  "required": [
    ///    "action",
    ///    "description",
    ///    "direction",
    ///    "filters",
    ///    "name",
    ///    "priority",
    ///    "status",
    ///    "targets"
    ///  ],
    ///  "properties": {
    ///    "action": {
    ///      "description": "whether traffic matching the rule should be allowed
    /// or dropped",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VpcFirewallRuleAction"
    ///        }
    ///      ]
    ///    },
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "direction": {
    ///      "description": "whether this rule is for incoming or outgoing
    /// traffic",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VpcFirewallRuleDirection"
    ///        }
    ///      ]
    ///    },
    ///    "filters": {
    ///      "description": "reductions on the scope of the rule",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VpcFirewallRuleFilter"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "description": "name of the rule, unique to this VPC",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "priority": {
    ///      "description": "the relative priority of this rule",
    ///      "type": "integer",
    ///      "format": "uint16",
    ///      "minimum": 0.0
    ///    },
    ///    "status": {
    ///      "description": "whether this rule is in effect",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/VpcFirewallRuleStatus"
    ///        }
    ///      ]
    ///    },
    ///    "targets": {
    ///      "description": "list of sets of instances that the rule applies
    /// to",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/VpcFirewallRuleTarget"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcFirewallRuleUpdate {
        /// whether traffic matching the rule should be allowed or dropped
        pub action: VpcFirewallRuleAction,
        /// human-readable free-form text about a resource
        pub description: String,
        /// whether this rule is for incoming or outgoing traffic
        pub direction: VpcFirewallRuleDirection,
        /// reductions on the scope of the rule
        pub filters: VpcFirewallRuleFilter,
        /// name of the rule, unique to this VPC
        pub name: Name,
        /// the relative priority of this rule
        pub priority: u16,
        /// whether this rule is in effect
        pub status: VpcFirewallRuleStatus,
        /// list of sets of instances that the rule applies to
        pub targets: Vec<VpcFirewallRuleTarget>,
    }

    impl From<&VpcFirewallRuleUpdate> for VpcFirewallRuleUpdate {
        fn from(value: &VpcFirewallRuleUpdate) -> Self {
            value.clone()
        }
    }

    impl VpcFirewallRuleUpdate {
        pub fn builder() -> builder::VpcFirewallRuleUpdate {
            Default::default()
        }
    }

    /// Updateable properties of a `Vpc`'s firewall Note that VpcFirewallRules
    /// are implicitly created along with a Vpc, so there is no explicit
    /// creation.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Updateable properties of a `Vpc`'s firewall Note that
    /// VpcFirewallRules are implicitly created along with a Vpc, so there is no
    /// explicit creation.",
    ///  "type": "object",
    ///  "required": [
    ///    "rules"
    ///  ],
    ///  "properties": {
    ///    "rules": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/VpcFirewallRuleUpdate"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcFirewallRuleUpdateParams {
        pub rules: Vec<VpcFirewallRuleUpdate>,
    }

    impl From<&VpcFirewallRuleUpdateParams> for VpcFirewallRuleUpdateParams {
        fn from(value: &VpcFirewallRuleUpdateParams) -> Self {
            value.clone()
        }
    }

    impl VpcFirewallRuleUpdateParams {
        pub fn builder() -> builder::VpcFirewallRuleUpdateParams {
            Default::default()
        }
    }

    /// Collection of a Vpc's firewall rules
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Collection of a Vpc's firewall rules",
    ///  "type": "object",
    ///  "required": [
    ///    "rules"
    ///  ],
    ///  "properties": {
    ///    "rules": {
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/VpcFirewallRule"
    ///      }
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcFirewallRules {
        pub rules: Vec<VpcFirewallRule>,
    }

    impl From<&VpcFirewallRules> for VpcFirewallRules {
        fn from(value: &VpcFirewallRules) -> Self {
            value.clone()
        }
    }

    impl VpcFirewallRules {
        pub fn builder() -> builder::VpcFirewallRules {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/Vpc"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcResultsPage {
        /// list of items on this page of results
        pub items: Vec<Vpc>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&VpcResultsPage> for VpcResultsPage {
        fn from(value: &VpcResultsPage) -> Self {
            value.clone()
        }
    }

    impl VpcResultsPage {
        pub fn builder() -> builder::VpcResultsPage {
            Default::default()
        }
    }

    /// A VPC subnet represents a logical grouping for instances that allows
    /// network traffic between them, within a IPv4 subnetwork or optionall an
    /// IPv6 subnetwork.
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A VPC subnet represents a logical grouping for
    /// instances that allows network traffic between them, within a IPv4
    /// subnetwork or optionall an IPv6 subnetwork.",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "id",
    ///    "ipv4_block",
    ///    "ipv6_block",
    ///    "name",
    ///    "time_created",
    ///    "time_modified",
    ///    "vpc_id"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "description": "human-readable free-form text about a resource",
    ///      "type": "string"
    ///    },
    ///    "id": {
    ///      "description": "unique, immutable, system-controlled identifier for
    /// each resource",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    },
    ///    "ipv4_block": {
    ///      "description": "The IPv4 subnet CIDR block.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv4Net"
    ///        }
    ///      ]
    ///    },
    ///    "ipv6_block": {
    ///      "description": "The IPv6 subnet CIDR block.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv6Net"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "description": "unique, mutable, user-controlled identifier for
    /// each resource",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "time_created": {
    ///      "description": "timestamp when this resource was created",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "time_modified": {
    ///      "description": "timestamp when this resource was last modified",
    ///      "type": "string",
    ///      "format": "date-time"
    ///    },
    ///    "vpc_id": {
    ///      "description": "The VPC to which the subnet belongs.",
    ///      "type": "string",
    ///      "format": "uuid"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcSubnet {
        /// human-readable free-form text about a resource
        pub description: String,
        /// unique, immutable, system-controlled identifier for each resource
        pub id: uuid::Uuid,
        /// The IPv4 subnet CIDR block.
        pub ipv4_block: Ipv4Net,
        /// The IPv6 subnet CIDR block.
        pub ipv6_block: Ipv6Net,
        /// unique, mutable, user-controlled identifier for each resource
        pub name: Name,
        /// timestamp when this resource was created
        pub time_created: chrono::DateTime<chrono::offset::Utc>,
        /// timestamp when this resource was last modified
        pub time_modified: chrono::DateTime<chrono::offset::Utc>,
        /// The VPC to which the subnet belongs.
        pub vpc_id: uuid::Uuid,
    }

    impl From<&VpcSubnet> for VpcSubnet {
        fn from(value: &VpcSubnet) -> Self {
            value.clone()
        }
    }

    impl VpcSubnet {
        pub fn builder() -> builder::VpcSubnet {
            Default::default()
        }
    }

    /// Create-time parameters for a `VpcSubnet`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Create-time parameters for a `VpcSubnet`",
    ///  "type": "object",
    ///  "required": [
    ///    "description",
    ///    "ipv4_block",
    ///    "name"
    ///  ],
    ///  "properties": {
    ///    "description": {
    ///      "type": "string"
    ///    },
    ///    "ipv4_block": {
    ///      "description": "The IPv4 address range for this subnet.\n\nIt must
    /// be allocated from an RFC 1918 private address range, and must not
    /// overlap with any other existing subnet in the VPC.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv4Net"
    ///        }
    ///      ]
    ///    },
    ///    "ipv6_block": {
    ///      "description": "The IPv6 address range for this subnet.\n\nIt must
    /// be allocated from the RFC 4193 Unique Local Address range, with the
    /// prefix equal to the parent VPC's prefix. A random `/64` block will be
    /// assigned if one is not provided. It must not overlap with any existing
    /// subnet in the VPC.",
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Ipv6Net"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "$ref": "#/components/schemas/Name"
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcSubnetCreate {
        pub description: String,
        /// The IPv4 address range for this subnet.
        ///
        /// It must be allocated from an RFC 1918 private address range, and
        /// must not overlap with any other existing subnet in the VPC.
        pub ipv4_block: Ipv4Net,
        /// The IPv6 address range for this subnet.
        ///
        /// It must be allocated from the RFC 4193 Unique Local Address range,
        /// with the prefix equal to the parent VPC's prefix. A random `/64`
        /// block will be assigned if one is not provided. It must not overlap
        /// with any existing subnet in the VPC.
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub ipv6_block: Option<Ipv6Net>,
        pub name: Name,
    }

    impl From<&VpcSubnetCreate> for VpcSubnetCreate {
        fn from(value: &VpcSubnetCreate) -> Self {
            value.clone()
        }
    }

    impl VpcSubnetCreate {
        pub fn builder() -> builder::VpcSubnetCreate {
            Default::default()
        }
    }

    /// A single page of results
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "A single page of results",
    ///  "type": "object",
    ///  "required": [
    ///    "items"
    ///  ],
    ///  "properties": {
    ///    "items": {
    ///      "description": "list of items on this page of results",
    ///      "type": "array",
    ///      "items": {
    ///        "$ref": "#/components/schemas/VpcSubnet"
    ///      }
    ///    },
    ///    "next_page": {
    ///      "description": "token used to fetch the next page of results (if
    /// any)",
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcSubnetResultsPage {
        /// list of items on this page of results
        pub items: Vec<VpcSubnet>,
        /// token used to fetch the next page of results (if any)
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub next_page: Option<String>,
    }

    impl From<&VpcSubnetResultsPage> for VpcSubnetResultsPage {
        fn from(value: &VpcSubnetResultsPage) -> Self {
            value.clone()
        }
    }

    impl VpcSubnetResultsPage {
        pub fn builder() -> builder::VpcSubnetResultsPage {
            Default::default()
        }
    }

    /// Updateable properties of a `VpcSubnet`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Updateable properties of a `VpcSubnet`",
    ///  "type": "object",
    ///  "properties": {
    ///    "description": {
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    },
    ///    "name": {
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcSubnetUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }

    impl From<&VpcSubnetUpdate> for VpcSubnetUpdate {
        fn from(value: &VpcSubnetUpdate) -> Self {
            value.clone()
        }
    }

    impl VpcSubnetUpdate {
        pub fn builder() -> builder::VpcSubnetUpdate {
            Default::default()
        }
    }

    /// Updateable properties of a `Vpc`
    ///
    /// <details><summary>JSON schema</summary>
    ///
    /// ```json
    /// {
    ///  "description": "Updateable properties of a `Vpc`",
    ///  "type": "object",
    ///  "properties": {
    ///    "description": {
    ///      "type": [
    ///        "string",
    ///        "null"
    ///      ]
    ///    },
    ///    "dns_name": {
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    },
    ///    "name": {
    ///      "allOf": [
    ///        {
    ///          "$ref": "#/components/schemas/Name"
    ///        }
    ///      ]
    ///    }
    ///  }
    /// }
    /// ```
    /// </details>
    #[derive(Clone, Debug, Deserialize, Serialize, schemars :: JsonSchema)]
    pub struct VpcUpdate {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub description: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub dns_name: Option<Name>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        pub name: Option<Name>,
    }

    impl From<&VpcUpdate> for VpcUpdate {
        fn from(value: &VpcUpdate) -> Self {
            value.clone()
        }
    }

    impl VpcUpdate {
        pub fn builder() -> builder::VpcUpdate {
            Default::default()
        }
    }

    pub mod builder {
        #[derive(Clone, Debug)]
        pub struct Address {
            address: Result<super::IpNet, String>,
            address_lot: Result<super::NameOrId, String>,
        }

        impl Default for Address {
            fn default() -> Self {
                Self {
                    address: Err("no value supplied for address".to_string()),
                    address_lot: Err("no value supplied for address_lot".to_string()),
                }
            }
        }

        impl Address {
            pub fn address<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IpNet>,
                T::Error: std::fmt::Display,
            {
                self.address = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for address: {}", e));
                self
            }
            pub fn address_lot<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::NameOrId>,
                T::Error: std::fmt::Display,
            {
                self.address_lot = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for address_lot: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Address> for super::Address {
            type Error = String;
            fn try_from(value: Address) -> Result<Self, String> {
                Ok(Self {
                    address: value.address?,
                    address_lot: value.address_lot?,
                })
            }
        }

        impl From<super::Address> for Address {
            fn from(value: super::Address) -> Self {
                Self {
                    address: Ok(value.address),
                    address_lot: Ok(value.address_lot),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct AddressConfig {
            addresses: Result<Vec<super::Address>, String>,
        }

        impl Default for AddressConfig {
            fn default() -> Self {
                Self {
                    addresses: Err("no value supplied for addresses".to_string()),
                }
            }
        }

        impl AddressConfig {
            pub fn addresses<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Address>>,
                T::Error: std::fmt::Display,
            {
                self.addresses = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for addresses: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<AddressConfig> for super::AddressConfig {
            type Error = String;
            fn try_from(value: AddressConfig) -> Result<Self, String> {
                Ok(Self {
                    addresses: value.addresses?,
                })
            }
        }

        impl From<super::AddressConfig> for AddressConfig {
            fn from(value: super::AddressConfig) -> Self {
                Self {
                    addresses: Ok(value.addresses),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct AddressLot {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            kind: Result<super::AddressLotKind, String>,
            name: Result<super::Name, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for AddressLot {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    kind: Err("no value supplied for kind".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl AddressLot {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn kind<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::AddressLotKind>,
                T::Error: std::fmt::Display,
            {
                self.kind = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for kind: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<AddressLot> for super::AddressLot {
            type Error = String;
            fn try_from(value: AddressLot) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    kind: value.kind?,
                    name: value.name?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::AddressLot> for AddressLot {
            fn from(value: super::AddressLot) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    kind: Ok(value.kind),
                    name: Ok(value.name),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct AddressLotBlock {
            first_address: Result<std::net::IpAddr, String>,
            id: Result<uuid::Uuid, String>,
            last_address: Result<std::net::IpAddr, String>,
        }

        impl Default for AddressLotBlock {
            fn default() -> Self {
                Self {
                    first_address: Err("no value supplied for first_address".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    last_address: Err("no value supplied for last_address".to_string()),
                }
            }
        }

        impl AddressLotBlock {
            pub fn first_address<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.first_address = value.try_into().map_err(|e| {
                    format!("error converting supplied value for first_address: {}", e)
                });
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn last_address<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.last_address = value.try_into().map_err(|e| {
                    format!("error converting supplied value for last_address: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<AddressLotBlock> for super::AddressLotBlock {
            type Error = String;
            fn try_from(value: AddressLotBlock) -> Result<Self, String> {
                Ok(Self {
                    first_address: value.first_address?,
                    id: value.id?,
                    last_address: value.last_address?,
                })
            }
        }

        impl From<super::AddressLotBlock> for AddressLotBlock {
            fn from(value: super::AddressLotBlock) -> Self {
                Self {
                    first_address: Ok(value.first_address),
                    id: Ok(value.id),
                    last_address: Ok(value.last_address),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct AddressLotBlockCreate {
            first_address: Result<std::net::IpAddr, String>,
            last_address: Result<std::net::IpAddr, String>,
        }

        impl Default for AddressLotBlockCreate {
            fn default() -> Self {
                Self {
                    first_address: Err("no value supplied for first_address".to_string()),
                    last_address: Err("no value supplied for last_address".to_string()),
                }
            }
        }

        impl AddressLotBlockCreate {
            pub fn first_address<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.first_address = value.try_into().map_err(|e| {
                    format!("error converting supplied value for first_address: {}", e)
                });
                self
            }
            pub fn last_address<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.last_address = value.try_into().map_err(|e| {
                    format!("error converting supplied value for last_address: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<AddressLotBlockCreate> for super::AddressLotBlockCreate {
            type Error = String;
            fn try_from(value: AddressLotBlockCreate) -> Result<Self, String> {
                Ok(Self {
                    first_address: value.first_address?,
                    last_address: value.last_address?,
                })
            }
        }

        impl From<super::AddressLotBlockCreate> for AddressLotBlockCreate {
            fn from(value: super::AddressLotBlockCreate) -> Self {
                Self {
                    first_address: Ok(value.first_address),
                    last_address: Ok(value.last_address),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct AddressLotBlockResultsPage {
            items: Result<Vec<super::AddressLotBlock>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for AddressLotBlockResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl AddressLotBlockResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::AddressLotBlock>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<AddressLotBlockResultsPage> for super::AddressLotBlockResultsPage {
            type Error = String;
            fn try_from(value: AddressLotBlockResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::AddressLotBlockResultsPage> for AddressLotBlockResultsPage {
            fn from(value: super::AddressLotBlockResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct AddressLotCreate {
            blocks: Result<Vec<super::AddressLotBlockCreate>, String>,
            description: Result<String, String>,
            kind: Result<super::AddressLotKind, String>,
            name: Result<super::Name, String>,
        }

        impl Default for AddressLotCreate {
            fn default() -> Self {
                Self {
                    blocks: Err("no value supplied for blocks".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    kind: Err("no value supplied for kind".to_string()),
                    name: Err("no value supplied for name".to_string()),
                }
            }
        }

        impl AddressLotCreate {
            pub fn blocks<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::AddressLotBlockCreate>>,
                T::Error: std::fmt::Display,
            {
                self.blocks = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for blocks: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn kind<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::AddressLotKind>,
                T::Error: std::fmt::Display,
            {
                self.kind = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for kind: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<AddressLotCreate> for super::AddressLotCreate {
            type Error = String;
            fn try_from(value: AddressLotCreate) -> Result<Self, String> {
                Ok(Self {
                    blocks: value.blocks?,
                    description: value.description?,
                    kind: value.kind?,
                    name: value.name?,
                })
            }
        }

        impl From<super::AddressLotCreate> for AddressLotCreate {
            fn from(value: super::AddressLotCreate) -> Self {
                Self {
                    blocks: Ok(value.blocks),
                    description: Ok(value.description),
                    kind: Ok(value.kind),
                    name: Ok(value.name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct AddressLotCreateResponse {
            blocks: Result<Vec<super::AddressLotBlock>, String>,
            lot: Result<super::AddressLot, String>,
        }

        impl Default for AddressLotCreateResponse {
            fn default() -> Self {
                Self {
                    blocks: Err("no value supplied for blocks".to_string()),
                    lot: Err("no value supplied for lot".to_string()),
                }
            }
        }

        impl AddressLotCreateResponse {
            pub fn blocks<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::AddressLotBlock>>,
                T::Error: std::fmt::Display,
            {
                self.blocks = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for blocks: {}", e));
                self
            }
            pub fn lot<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::AddressLot>,
                T::Error: std::fmt::Display,
            {
                self.lot = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for lot: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<AddressLotCreateResponse> for super::AddressLotCreateResponse {
            type Error = String;
            fn try_from(value: AddressLotCreateResponse) -> Result<Self, String> {
                Ok(Self {
                    blocks: value.blocks?,
                    lot: value.lot?,
                })
            }
        }

        impl From<super::AddressLotCreateResponse> for AddressLotCreateResponse {
            fn from(value: super::AddressLotCreateResponse) -> Self {
                Self {
                    blocks: Ok(value.blocks),
                    lot: Ok(value.lot),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct AddressLotResultsPage {
            items: Result<Vec<super::AddressLot>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for AddressLotResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl AddressLotResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::AddressLot>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<AddressLotResultsPage> for super::AddressLotResultsPage {
            type Error = String;
            fn try_from(value: AddressLotResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::AddressLotResultsPage> for AddressLotResultsPage {
            fn from(value: super::AddressLotResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Baseboard {
            part: Result<String, String>,
            revision: Result<i64, String>,
            serial: Result<String, String>,
        }

        impl Default for Baseboard {
            fn default() -> Self {
                Self {
                    part: Err("no value supplied for part".to_string()),
                    revision: Err("no value supplied for revision".to_string()),
                    serial: Err("no value supplied for serial".to_string()),
                }
            }
        }

        impl Baseboard {
            pub fn part<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.part = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for part: {}", e));
                self
            }
            pub fn revision<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<i64>,
                T::Error: std::fmt::Display,
            {
                self.revision = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for revision: {}", e));
                self
            }
            pub fn serial<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.serial = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for serial: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Baseboard> for super::Baseboard {
            type Error = String;
            fn try_from(value: Baseboard) -> Result<Self, String> {
                Ok(Self {
                    part: value.part?,
                    revision: value.revision?,
                    serial: value.serial?,
                })
            }
        }

        impl From<super::Baseboard> for Baseboard {
            fn from(value: super::Baseboard) -> Self {
                Self {
                    part: Ok(value.part),
                    revision: Ok(value.revision),
                    serial: Ok(value.serial),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpAnnounceSet {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for BgpAnnounceSet {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl BgpAnnounceSet {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<BgpAnnounceSet> for super::BgpAnnounceSet {
            type Error = String;
            fn try_from(value: BgpAnnounceSet) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    name: value.name?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::BgpAnnounceSet> for BgpAnnounceSet {
            fn from(value: super::BgpAnnounceSet) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpAnnounceSetCreate {
            announcement: Result<Vec<super::BgpAnnouncementCreate>, String>,
            description: Result<String, String>,
            name: Result<super::Name, String>,
        }

        impl Default for BgpAnnounceSetCreate {
            fn default() -> Self {
                Self {
                    announcement: Err("no value supplied for announcement".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    name: Err("no value supplied for name".to_string()),
                }
            }
        }

        impl BgpAnnounceSetCreate {
            pub fn announcement<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::BgpAnnouncementCreate>>,
                T::Error: std::fmt::Display,
            {
                self.announcement = value.try_into().map_err(|e| {
                    format!("error converting supplied value for announcement: {}", e)
                });
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<BgpAnnounceSetCreate> for super::BgpAnnounceSetCreate {
            type Error = String;
            fn try_from(value: BgpAnnounceSetCreate) -> Result<Self, String> {
                Ok(Self {
                    announcement: value.announcement?,
                    description: value.description?,
                    name: value.name?,
                })
            }
        }

        impl From<super::BgpAnnounceSetCreate> for BgpAnnounceSetCreate {
            fn from(value: super::BgpAnnounceSetCreate) -> Self {
                Self {
                    announcement: Ok(value.announcement),
                    description: Ok(value.description),
                    name: Ok(value.name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpAnnouncement {
            address_lot_block_id: Result<uuid::Uuid, String>,
            announce_set_id: Result<uuid::Uuid, String>,
            network: Result<super::IpNet, String>,
        }

        impl Default for BgpAnnouncement {
            fn default() -> Self {
                Self {
                    address_lot_block_id: Err(
                        "no value supplied for address_lot_block_id".to_string()
                    ),
                    announce_set_id: Err("no value supplied for announce_set_id".to_string()),
                    network: Err("no value supplied for network".to_string()),
                }
            }
        }

        impl BgpAnnouncement {
            pub fn address_lot_block_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.address_lot_block_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for address_lot_block_id: {}",
                        e
                    )
                });
                self
            }
            pub fn announce_set_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.announce_set_id = value.try_into().map_err(|e| {
                    format!("error converting supplied value for announce_set_id: {}", e)
                });
                self
            }
            pub fn network<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IpNet>,
                T::Error: std::fmt::Display,
            {
                self.network = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for network: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<BgpAnnouncement> for super::BgpAnnouncement {
            type Error = String;
            fn try_from(value: BgpAnnouncement) -> Result<Self, String> {
                Ok(Self {
                    address_lot_block_id: value.address_lot_block_id?,
                    announce_set_id: value.announce_set_id?,
                    network: value.network?,
                })
            }
        }

        impl From<super::BgpAnnouncement> for BgpAnnouncement {
            fn from(value: super::BgpAnnouncement) -> Self {
                Self {
                    address_lot_block_id: Ok(value.address_lot_block_id),
                    announce_set_id: Ok(value.announce_set_id),
                    network: Ok(value.network),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpAnnouncementCreate {
            address_lot_block: Result<super::NameOrId, String>,
            network: Result<super::IpNet, String>,
        }

        impl Default for BgpAnnouncementCreate {
            fn default() -> Self {
                Self {
                    address_lot_block: Err("no value supplied for address_lot_block".to_string()),
                    network: Err("no value supplied for network".to_string()),
                }
            }
        }

        impl BgpAnnouncementCreate {
            pub fn address_lot_block<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::NameOrId>,
                T::Error: std::fmt::Display,
            {
                self.address_lot_block = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for address_lot_block: {}",
                        e
                    )
                });
                self
            }
            pub fn network<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IpNet>,
                T::Error: std::fmt::Display,
            {
                self.network = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for network: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<BgpAnnouncementCreate> for super::BgpAnnouncementCreate {
            type Error = String;
            fn try_from(value: BgpAnnouncementCreate) -> Result<Self, String> {
                Ok(Self {
                    address_lot_block: value.address_lot_block?,
                    network: value.network?,
                })
            }
        }

        impl From<super::BgpAnnouncementCreate> for BgpAnnouncementCreate {
            fn from(value: super::BgpAnnouncementCreate) -> Self {
                Self {
                    address_lot_block: Ok(value.address_lot_block),
                    network: Ok(value.network),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpConfig {
            asn: Result<u32, String>,
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            vrf: Result<Option<String>, String>,
        }

        impl Default for BgpConfig {
            fn default() -> Self {
                Self {
                    asn: Err("no value supplied for asn".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                    vrf: Ok(Default::default()),
                }
            }
        }

        impl BgpConfig {
            pub fn asn<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.asn = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for asn: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
            pub fn vrf<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.vrf = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for vrf: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<BgpConfig> for super::BgpConfig {
            type Error = String;
            fn try_from(value: BgpConfig) -> Result<Self, String> {
                Ok(Self {
                    asn: value.asn?,
                    description: value.description?,
                    id: value.id?,
                    name: value.name?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                    vrf: value.vrf?,
                })
            }
        }

        impl From<super::BgpConfig> for BgpConfig {
            fn from(value: super::BgpConfig) -> Self {
                Self {
                    asn: Ok(value.asn),
                    description: Ok(value.description),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                    vrf: Ok(value.vrf),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpConfigCreate {
            asn: Result<u32, String>,
            bgp_announce_set_id: Result<super::NameOrId, String>,
            description: Result<String, String>,
            name: Result<super::Name, String>,
            vrf: Result<Option<super::Name>, String>,
        }

        impl Default for BgpConfigCreate {
            fn default() -> Self {
                Self {
                    asn: Err("no value supplied for asn".to_string()),
                    bgp_announce_set_id: Err(
                        "no value supplied for bgp_announce_set_id".to_string()
                    ),
                    description: Err("no value supplied for description".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    vrf: Ok(Default::default()),
                }
            }
        }

        impl BgpConfigCreate {
            pub fn asn<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.asn = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for asn: {}", e));
                self
            }
            pub fn bgp_announce_set_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::NameOrId>,
                T::Error: std::fmt::Display,
            {
                self.bgp_announce_set_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for bgp_announce_set_id: {}",
                        e
                    )
                });
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn vrf<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Name>>,
                T::Error: std::fmt::Display,
            {
                self.vrf = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for vrf: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<BgpConfigCreate> for super::BgpConfigCreate {
            type Error = String;
            fn try_from(value: BgpConfigCreate) -> Result<Self, String> {
                Ok(Self {
                    asn: value.asn?,
                    bgp_announce_set_id: value.bgp_announce_set_id?,
                    description: value.description?,
                    name: value.name?,
                    vrf: value.vrf?,
                })
            }
        }

        impl From<super::BgpConfigCreate> for BgpConfigCreate {
            fn from(value: super::BgpConfigCreate) -> Self {
                Self {
                    asn: Ok(value.asn),
                    bgp_announce_set_id: Ok(value.bgp_announce_set_id),
                    description: Ok(value.description),
                    name: Ok(value.name),
                    vrf: Ok(value.vrf),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpConfigResultsPage {
            items: Result<Vec<super::BgpConfig>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for BgpConfigResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl BgpConfigResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::BgpConfig>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<BgpConfigResultsPage> for super::BgpConfigResultsPage {
            type Error = String;
            fn try_from(value: BgpConfigResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::BgpConfigResultsPage> for BgpConfigResultsPage {
            fn from(value: super::BgpConfigResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpImportedRouteIpv4 {
            id: Result<u32, String>,
            nexthop: Result<std::net::Ipv4Addr, String>,
            prefix: Result<super::Ipv4Net, String>,
            switch: Result<super::SwitchLocation, String>,
        }

        impl Default for BgpImportedRouteIpv4 {
            fn default() -> Self {
                Self {
                    id: Err("no value supplied for id".to_string()),
                    nexthop: Err("no value supplied for nexthop".to_string()),
                    prefix: Err("no value supplied for prefix".to_string()),
                    switch: Err("no value supplied for switch".to_string()),
                }
            }
        }

        impl BgpImportedRouteIpv4 {
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn nexthop<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::Ipv4Addr>,
                T::Error: std::fmt::Display,
            {
                self.nexthop = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for nexthop: {}", e));
                self
            }
            pub fn prefix<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Ipv4Net>,
                T::Error: std::fmt::Display,
            {
                self.prefix = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for prefix: {}", e));
                self
            }
            pub fn switch<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SwitchLocation>,
                T::Error: std::fmt::Display,
            {
                self.switch = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for switch: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<BgpImportedRouteIpv4> for super::BgpImportedRouteIpv4 {
            type Error = String;
            fn try_from(value: BgpImportedRouteIpv4) -> Result<Self, String> {
                Ok(Self {
                    id: value.id?,
                    nexthop: value.nexthop?,
                    prefix: value.prefix?,
                    switch: value.switch?,
                })
            }
        }

        impl From<super::BgpImportedRouteIpv4> for BgpImportedRouteIpv4 {
            fn from(value: super::BgpImportedRouteIpv4) -> Self {
                Self {
                    id: Ok(value.id),
                    nexthop: Ok(value.nexthop),
                    prefix: Ok(value.prefix),
                    switch: Ok(value.switch),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpPeer {
            addr: Result<std::net::IpAddr, String>,
            bgp_announce_set: Result<super::NameOrId, String>,
            bgp_config: Result<super::NameOrId, String>,
            connect_retry: Result<u32, String>,
            delay_open: Result<u32, String>,
            hold_time: Result<u32, String>,
            idle_hold_time: Result<u32, String>,
            interface_name: Result<String, String>,
            keepalive: Result<u32, String>,
        }

        impl Default for BgpPeer {
            fn default() -> Self {
                Self {
                    addr: Err("no value supplied for addr".to_string()),
                    bgp_announce_set: Err("no value supplied for bgp_announce_set".to_string()),
                    bgp_config: Err("no value supplied for bgp_config".to_string()),
                    connect_retry: Err("no value supplied for connect_retry".to_string()),
                    delay_open: Err("no value supplied for delay_open".to_string()),
                    hold_time: Err("no value supplied for hold_time".to_string()),
                    idle_hold_time: Err("no value supplied for idle_hold_time".to_string()),
                    interface_name: Err("no value supplied for interface_name".to_string()),
                    keepalive: Err("no value supplied for keepalive".to_string()),
                }
            }
        }

        impl BgpPeer {
            pub fn addr<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.addr = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for addr: {}", e));
                self
            }
            pub fn bgp_announce_set<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::NameOrId>,
                T::Error: std::fmt::Display,
            {
                self.bgp_announce_set = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for bgp_announce_set: {}",
                        e
                    )
                });
                self
            }
            pub fn bgp_config<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::NameOrId>,
                T::Error: std::fmt::Display,
            {
                self.bgp_config = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bgp_config: {}", e));
                self
            }
            pub fn connect_retry<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.connect_retry = value.try_into().map_err(|e| {
                    format!("error converting supplied value for connect_retry: {}", e)
                });
                self
            }
            pub fn delay_open<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.delay_open = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for delay_open: {}", e));
                self
            }
            pub fn hold_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.hold_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for hold_time: {}", e));
                self
            }
            pub fn idle_hold_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.idle_hold_time = value.try_into().map_err(|e| {
                    format!("error converting supplied value for idle_hold_time: {}", e)
                });
                self
            }
            pub fn interface_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.interface_name = value.try_into().map_err(|e| {
                    format!("error converting supplied value for interface_name: {}", e)
                });
                self
            }
            pub fn keepalive<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.keepalive = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for keepalive: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<BgpPeer> for super::BgpPeer {
            type Error = String;
            fn try_from(value: BgpPeer) -> Result<Self, String> {
                Ok(Self {
                    addr: value.addr?,
                    bgp_announce_set: value.bgp_announce_set?,
                    bgp_config: value.bgp_config?,
                    connect_retry: value.connect_retry?,
                    delay_open: value.delay_open?,
                    hold_time: value.hold_time?,
                    idle_hold_time: value.idle_hold_time?,
                    interface_name: value.interface_name?,
                    keepalive: value.keepalive?,
                })
            }
        }

        impl From<super::BgpPeer> for BgpPeer {
            fn from(value: super::BgpPeer) -> Self {
                Self {
                    addr: Ok(value.addr),
                    bgp_announce_set: Ok(value.bgp_announce_set),
                    bgp_config: Ok(value.bgp_config),
                    connect_retry: Ok(value.connect_retry),
                    delay_open: Ok(value.delay_open),
                    hold_time: Ok(value.hold_time),
                    idle_hold_time: Ok(value.idle_hold_time),
                    interface_name: Ok(value.interface_name),
                    keepalive: Ok(value.keepalive),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpPeerConfig {
            peers: Result<Vec<super::BgpPeer>, String>,
        }

        impl Default for BgpPeerConfig {
            fn default() -> Self {
                Self {
                    peers: Err("no value supplied for peers".to_string()),
                }
            }
        }

        impl BgpPeerConfig {
            pub fn peers<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::BgpPeer>>,
                T::Error: std::fmt::Display,
            {
                self.peers = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for peers: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<BgpPeerConfig> for super::BgpPeerConfig {
            type Error = String;
            fn try_from(value: BgpPeerConfig) -> Result<Self, String> {
                Ok(Self {
                    peers: value.peers?,
                })
            }
        }

        impl From<super::BgpPeerConfig> for BgpPeerConfig {
            fn from(value: super::BgpPeerConfig) -> Self {
                Self {
                    peers: Ok(value.peers),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct BgpPeerStatus {
            addr: Result<std::net::IpAddr, String>,
            local_asn: Result<u32, String>,
            remote_asn: Result<u32, String>,
            state: Result<super::BgpPeerState, String>,
            state_duration_millis: Result<u64, String>,
            switch: Result<super::SwitchLocation, String>,
        }

        impl Default for BgpPeerStatus {
            fn default() -> Self {
                Self {
                    addr: Err("no value supplied for addr".to_string()),
                    local_asn: Err("no value supplied for local_asn".to_string()),
                    remote_asn: Err("no value supplied for remote_asn".to_string()),
                    state: Err("no value supplied for state".to_string()),
                    state_duration_millis: Err(
                        "no value supplied for state_duration_millis".to_string()
                    ),
                    switch: Err("no value supplied for switch".to_string()),
                }
            }
        }

        impl BgpPeerStatus {
            pub fn addr<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.addr = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for addr: {}", e));
                self
            }
            pub fn local_asn<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.local_asn = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for local_asn: {}", e));
                self
            }
            pub fn remote_asn<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.remote_asn = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for remote_asn: {}", e));
                self
            }
            pub fn state<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BgpPeerState>,
                T::Error: std::fmt::Display,
            {
                self.state = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for state: {}", e));
                self
            }
            pub fn state_duration_millis<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.state_duration_millis = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for state_duration_millis: {}",
                        e
                    )
                });
                self
            }
            pub fn switch<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SwitchLocation>,
                T::Error: std::fmt::Display,
            {
                self.switch = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for switch: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<BgpPeerStatus> for super::BgpPeerStatus {
            type Error = String;
            fn try_from(value: BgpPeerStatus) -> Result<Self, String> {
                Ok(Self {
                    addr: value.addr?,
                    local_asn: value.local_asn?,
                    remote_asn: value.remote_asn?,
                    state: value.state?,
                    state_duration_millis: value.state_duration_millis?,
                    switch: value.switch?,
                })
            }
        }

        impl From<super::BgpPeerStatus> for BgpPeerStatus {
            fn from(value: super::BgpPeerStatus) -> Self {
                Self {
                    addr: Ok(value.addr),
                    local_asn: Ok(value.local_asn),
                    remote_asn: Ok(value.remote_asn),
                    state: Ok(value.state),
                    state_duration_millis: Ok(value.state_duration_millis),
                    switch: Ok(value.switch),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Bindouble {
            count: Result<u64, String>,
            range: Result<super::BinRangedouble, String>,
        }

        impl Default for Bindouble {
            fn default() -> Self {
                Self {
                    count: Err("no value supplied for count".to_string()),
                    range: Err("no value supplied for range".to_string()),
                }
            }
        }

        impl Bindouble {
            pub fn count<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.count = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for count: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BinRangedouble>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Bindouble> for super::Bindouble {
            type Error = String;
            fn try_from(value: Bindouble) -> Result<Self, String> {
                Ok(Self {
                    count: value.count?,
                    range: value.range?,
                })
            }
        }

        impl From<super::Bindouble> for Bindouble {
            fn from(value: super::Bindouble) -> Self {
                Self {
                    count: Ok(value.count),
                    range: Ok(value.range),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Binfloat {
            count: Result<u64, String>,
            range: Result<super::BinRangefloat, String>,
        }

        impl Default for Binfloat {
            fn default() -> Self {
                Self {
                    count: Err("no value supplied for count".to_string()),
                    range: Err("no value supplied for range".to_string()),
                }
            }
        }

        impl Binfloat {
            pub fn count<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.count = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for count: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BinRangefloat>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Binfloat> for super::Binfloat {
            type Error = String;
            fn try_from(value: Binfloat) -> Result<Self, String> {
                Ok(Self {
                    count: value.count?,
                    range: value.range?,
                })
            }
        }

        impl From<super::Binfloat> for Binfloat {
            fn from(value: super::Binfloat) -> Self {
                Self {
                    count: Ok(value.count),
                    range: Ok(value.range),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Binint16 {
            count: Result<u64, String>,
            range: Result<super::BinRangeint16, String>,
        }

        impl Default for Binint16 {
            fn default() -> Self {
                Self {
                    count: Err("no value supplied for count".to_string()),
                    range: Err("no value supplied for range".to_string()),
                }
            }
        }

        impl Binint16 {
            pub fn count<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.count = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for count: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BinRangeint16>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Binint16> for super::Binint16 {
            type Error = String;
            fn try_from(value: Binint16) -> Result<Self, String> {
                Ok(Self {
                    count: value.count?,
                    range: value.range?,
                })
            }
        }

        impl From<super::Binint16> for Binint16 {
            fn from(value: super::Binint16) -> Self {
                Self {
                    count: Ok(value.count),
                    range: Ok(value.range),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Binint32 {
            count: Result<u64, String>,
            range: Result<super::BinRangeint32, String>,
        }

        impl Default for Binint32 {
            fn default() -> Self {
                Self {
                    count: Err("no value supplied for count".to_string()),
                    range: Err("no value supplied for range".to_string()),
                }
            }
        }

        impl Binint32 {
            pub fn count<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.count = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for count: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BinRangeint32>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Binint32> for super::Binint32 {
            type Error = String;
            fn try_from(value: Binint32) -> Result<Self, String> {
                Ok(Self {
                    count: value.count?,
                    range: value.range?,
                })
            }
        }

        impl From<super::Binint32> for Binint32 {
            fn from(value: super::Binint32) -> Self {
                Self {
                    count: Ok(value.count),
                    range: Ok(value.range),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Binint64 {
            count: Result<u64, String>,
            range: Result<super::BinRangeint64, String>,
        }

        impl Default for Binint64 {
            fn default() -> Self {
                Self {
                    count: Err("no value supplied for count".to_string()),
                    range: Err("no value supplied for range".to_string()),
                }
            }
        }

        impl Binint64 {
            pub fn count<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.count = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for count: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BinRangeint64>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Binint64> for super::Binint64 {
            type Error = String;
            fn try_from(value: Binint64) -> Result<Self, String> {
                Ok(Self {
                    count: value.count?,
                    range: value.range?,
                })
            }
        }

        impl From<super::Binint64> for Binint64 {
            fn from(value: super::Binint64) -> Self {
                Self {
                    count: Ok(value.count),
                    range: Ok(value.range),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Binint8 {
            count: Result<u64, String>,
            range: Result<super::BinRangeint8, String>,
        }

        impl Default for Binint8 {
            fn default() -> Self {
                Self {
                    count: Err("no value supplied for count".to_string()),
                    range: Err("no value supplied for range".to_string()),
                }
            }
        }

        impl Binint8 {
            pub fn count<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.count = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for count: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BinRangeint8>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Binint8> for super::Binint8 {
            type Error = String;
            fn try_from(value: Binint8) -> Result<Self, String> {
                Ok(Self {
                    count: value.count?,
                    range: value.range?,
                })
            }
        }

        impl From<super::Binint8> for Binint8 {
            fn from(value: super::Binint8) -> Self {
                Self {
                    count: Ok(value.count),
                    range: Ok(value.range),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Binuint16 {
            count: Result<u64, String>,
            range: Result<super::BinRangeuint16, String>,
        }

        impl Default for Binuint16 {
            fn default() -> Self {
                Self {
                    count: Err("no value supplied for count".to_string()),
                    range: Err("no value supplied for range".to_string()),
                }
            }
        }

        impl Binuint16 {
            pub fn count<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.count = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for count: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BinRangeuint16>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Binuint16> for super::Binuint16 {
            type Error = String;
            fn try_from(value: Binuint16) -> Result<Self, String> {
                Ok(Self {
                    count: value.count?,
                    range: value.range?,
                })
            }
        }

        impl From<super::Binuint16> for Binuint16 {
            fn from(value: super::Binuint16) -> Self {
                Self {
                    count: Ok(value.count),
                    range: Ok(value.range),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Binuint32 {
            count: Result<u64, String>,
            range: Result<super::BinRangeuint32, String>,
        }

        impl Default for Binuint32 {
            fn default() -> Self {
                Self {
                    count: Err("no value supplied for count".to_string()),
                    range: Err("no value supplied for range".to_string()),
                }
            }
        }

        impl Binuint32 {
            pub fn count<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.count = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for count: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BinRangeuint32>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Binuint32> for super::Binuint32 {
            type Error = String;
            fn try_from(value: Binuint32) -> Result<Self, String> {
                Ok(Self {
                    count: value.count?,
                    range: value.range?,
                })
            }
        }

        impl From<super::Binuint32> for Binuint32 {
            fn from(value: super::Binuint32) -> Self {
                Self {
                    count: Ok(value.count),
                    range: Ok(value.range),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Binuint64 {
            count: Result<u64, String>,
            range: Result<super::BinRangeuint64, String>,
        }

        impl Default for Binuint64 {
            fn default() -> Self {
                Self {
                    count: Err("no value supplied for count".to_string()),
                    range: Err("no value supplied for range".to_string()),
                }
            }
        }

        impl Binuint64 {
            pub fn count<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.count = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for count: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BinRangeuint64>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Binuint64> for super::Binuint64 {
            type Error = String;
            fn try_from(value: Binuint64) -> Result<Self, String> {
                Ok(Self {
                    count: value.count?,
                    range: value.range?,
                })
            }
        }

        impl From<super::Binuint64> for Binuint64 {
            fn from(value: super::Binuint64) -> Self {
                Self {
                    count: Ok(value.count),
                    range: Ok(value.range),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Binuint8 {
            count: Result<u64, String>,
            range: Result<super::BinRangeuint8, String>,
        }

        impl Default for Binuint8 {
            fn default() -> Self {
                Self {
                    count: Err("no value supplied for count".to_string()),
                    range: Err("no value supplied for range".to_string()),
                }
            }
        }

        impl Binuint8 {
            pub fn count<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.count = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for count: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::BinRangeuint8>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Binuint8> for super::Binuint8 {
            type Error = String;
            fn try_from(value: Binuint8) -> Result<Self, String> {
                Ok(Self {
                    count: value.count?,
                    range: value.range?,
                })
            }
        }

        impl From<super::Binuint8> for Binuint8 {
            fn from(value: super::Binuint8) -> Self {
                Self {
                    count: Ok(value.count),
                    range: Ok(value.range),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Certificate {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            service: Result<super::ServiceUsingCertificate, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Certificate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    service: Err("no value supplied for service".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl Certificate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn service<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ServiceUsingCertificate>,
                T::Error: std::fmt::Display,
            {
                self.service = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for service: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<Certificate> for super::Certificate {
            type Error = String;
            fn try_from(value: Certificate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    name: value.name?,
                    service: value.service?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::Certificate> for Certificate {
            fn from(value: super::Certificate) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    service: Ok(value.service),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct CertificateCreate {
            cert: Result<String, String>,
            description: Result<String, String>,
            key: Result<String, String>,
            name: Result<super::Name, String>,
            service: Result<super::ServiceUsingCertificate, String>,
        }

        impl Default for CertificateCreate {
            fn default() -> Self {
                Self {
                    cert: Err("no value supplied for cert".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    key: Err("no value supplied for key".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    service: Err("no value supplied for service".to_string()),
                }
            }
        }

        impl CertificateCreate {
            pub fn cert<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.cert = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for cert: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn key<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.key = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for key: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn service<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ServiceUsingCertificate>,
                T::Error: std::fmt::Display,
            {
                self.service = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for service: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<CertificateCreate> for super::CertificateCreate {
            type Error = String;
            fn try_from(value: CertificateCreate) -> Result<Self, String> {
                Ok(Self {
                    cert: value.cert?,
                    description: value.description?,
                    key: value.key?,
                    name: value.name?,
                    service: value.service?,
                })
            }
        }

        impl From<super::CertificateCreate> for CertificateCreate {
            fn from(value: super::CertificateCreate) -> Self {
                Self {
                    cert: Ok(value.cert),
                    description: Ok(value.description),
                    key: Ok(value.key),
                    name: Ok(value.name),
                    service: Ok(value.service),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct CertificateResultsPage {
            items: Result<Vec<super::Certificate>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for CertificateResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl CertificateResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Certificate>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<CertificateResultsPage> for super::CertificateResultsPage {
            type Error = String;
            fn try_from(value: CertificateResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::CertificateResultsPage> for CertificateResultsPage {
            fn from(value: super::CertificateResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Cumulativedouble {
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            value: Result<f64, String>,
        }

        impl Default for Cumulativedouble {
            fn default() -> Self {
                Self {
                    start_time: Err("no value supplied for start_time".to_string()),
                    value: Err("no value supplied for value".to_string()),
                }
            }
        }

        impl Cumulativedouble {
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
            pub fn value<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<f64>,
                T::Error: std::fmt::Display,
            {
                self.value = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for value: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Cumulativedouble> for super::Cumulativedouble {
            type Error = String;
            fn try_from(value: Cumulativedouble) -> Result<Self, String> {
                Ok(Self {
                    start_time: value.start_time?,
                    value: value.value?,
                })
            }
        }

        impl From<super::Cumulativedouble> for Cumulativedouble {
            fn from(value: super::Cumulativedouble) -> Self {
                Self {
                    start_time: Ok(value.start_time),
                    value: Ok(value.value),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Cumulativefloat {
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            value: Result<f32, String>,
        }

        impl Default for Cumulativefloat {
            fn default() -> Self {
                Self {
                    start_time: Err("no value supplied for start_time".to_string()),
                    value: Err("no value supplied for value".to_string()),
                }
            }
        }

        impl Cumulativefloat {
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
            pub fn value<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<f32>,
                T::Error: std::fmt::Display,
            {
                self.value = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for value: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Cumulativefloat> for super::Cumulativefloat {
            type Error = String;
            fn try_from(value: Cumulativefloat) -> Result<Self, String> {
                Ok(Self {
                    start_time: value.start_time?,
                    value: value.value?,
                })
            }
        }

        impl From<super::Cumulativefloat> for Cumulativefloat {
            fn from(value: super::Cumulativefloat) -> Self {
                Self {
                    start_time: Ok(value.start_time),
                    value: Ok(value.value),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Cumulativeint64 {
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            value: Result<i64, String>,
        }

        impl Default for Cumulativeint64 {
            fn default() -> Self {
                Self {
                    start_time: Err("no value supplied for start_time".to_string()),
                    value: Err("no value supplied for value".to_string()),
                }
            }
        }

        impl Cumulativeint64 {
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
            pub fn value<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<i64>,
                T::Error: std::fmt::Display,
            {
                self.value = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for value: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Cumulativeint64> for super::Cumulativeint64 {
            type Error = String;
            fn try_from(value: Cumulativeint64) -> Result<Self, String> {
                Ok(Self {
                    start_time: value.start_time?,
                    value: value.value?,
                })
            }
        }

        impl From<super::Cumulativeint64> for Cumulativeint64 {
            fn from(value: super::Cumulativeint64) -> Self {
                Self {
                    start_time: Ok(value.start_time),
                    value: Ok(value.value),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Cumulativeuint64 {
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            value: Result<u64, String>,
        }

        impl Default for Cumulativeuint64 {
            fn default() -> Self {
                Self {
                    start_time: Err("no value supplied for start_time".to_string()),
                    value: Err("no value supplied for value".to_string()),
                }
            }
        }

        impl Cumulativeuint64 {
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
            pub fn value<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.value = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for value: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Cumulativeuint64> for super::Cumulativeuint64 {
            type Error = String;
            fn try_from(value: Cumulativeuint64) -> Result<Self, String> {
                Ok(Self {
                    start_time: value.start_time?,
                    value: value.value?,
                })
            }
        }

        impl From<super::Cumulativeuint64> for Cumulativeuint64 {
            fn from(value: super::Cumulativeuint64) -> Self {
                Self {
                    start_time: Ok(value.start_time),
                    value: Ok(value.value),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct CurrentUser {
            display_name: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            silo_id: Result<uuid::Uuid, String>,
            silo_name: Result<super::Name, String>,
        }

        impl Default for CurrentUser {
            fn default() -> Self {
                Self {
                    display_name: Err("no value supplied for display_name".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    silo_id: Err("no value supplied for silo_id".to_string()),
                    silo_name: Err("no value supplied for silo_name".to_string()),
                }
            }
        }

        impl CurrentUser {
            pub fn display_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.display_name = value.try_into().map_err(|e| {
                    format!("error converting supplied value for display_name: {}", e)
                });
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn silo_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.silo_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for silo_id: {}", e));
                self
            }
            pub fn silo_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.silo_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for silo_name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<CurrentUser> for super::CurrentUser {
            type Error = String;
            fn try_from(value: CurrentUser) -> Result<Self, String> {
                Ok(Self {
                    display_name: value.display_name?,
                    id: value.id?,
                    silo_id: value.silo_id?,
                    silo_name: value.silo_name?,
                })
            }
        }

        impl From<super::CurrentUser> for CurrentUser {
            fn from(value: super::CurrentUser) -> Self {
                Self {
                    display_name: Ok(value.display_name),
                    id: Ok(value.id),
                    silo_id: Ok(value.silo_id),
                    silo_name: Ok(value.silo_name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct DerEncodedKeyPair {
            private_key: Result<String, String>,
            public_cert: Result<String, String>,
        }

        impl Default for DerEncodedKeyPair {
            fn default() -> Self {
                Self {
                    private_key: Err("no value supplied for private_key".to_string()),
                    public_cert: Err("no value supplied for public_cert".to_string()),
                }
            }
        }

        impl DerEncodedKeyPair {
            pub fn private_key<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.private_key = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for private_key: {}", e));
                self
            }
            pub fn public_cert<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.public_cert = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for public_cert: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<DerEncodedKeyPair> for super::DerEncodedKeyPair {
            type Error = String;
            fn try_from(value: DerEncodedKeyPair) -> Result<Self, String> {
                Ok(Self {
                    private_key: value.private_key?,
                    public_cert: value.public_cert?,
                })
            }
        }

        impl From<super::DerEncodedKeyPair> for DerEncodedKeyPair {
            fn from(value: super::DerEncodedKeyPair) -> Self {
                Self {
                    private_key: Ok(value.private_key),
                    public_cert: Ok(value.public_cert),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct DeviceAccessTokenRequest {
            client_id: Result<uuid::Uuid, String>,
            device_code: Result<String, String>,
            grant_type: Result<String, String>,
        }

        impl Default for DeviceAccessTokenRequest {
            fn default() -> Self {
                Self {
                    client_id: Err("no value supplied for client_id".to_string()),
                    device_code: Err("no value supplied for device_code".to_string()),
                    grant_type: Err("no value supplied for grant_type".to_string()),
                }
            }
        }

        impl DeviceAccessTokenRequest {
            pub fn client_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.client_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for client_id: {}", e));
                self
            }
            pub fn device_code<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.device_code = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for device_code: {}", e));
                self
            }
            pub fn grant_type<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.grant_type = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for grant_type: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<DeviceAccessTokenRequest> for super::DeviceAccessTokenRequest {
            type Error = String;
            fn try_from(value: DeviceAccessTokenRequest) -> Result<Self, String> {
                Ok(Self {
                    client_id: value.client_id?,
                    device_code: value.device_code?,
                    grant_type: value.grant_type?,
                })
            }
        }

        impl From<super::DeviceAccessTokenRequest> for DeviceAccessTokenRequest {
            fn from(value: super::DeviceAccessTokenRequest) -> Self {
                Self {
                    client_id: Ok(value.client_id),
                    device_code: Ok(value.device_code),
                    grant_type: Ok(value.grant_type),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct DeviceAuthRequest {
            client_id: Result<uuid::Uuid, String>,
        }

        impl Default for DeviceAuthRequest {
            fn default() -> Self {
                Self {
                    client_id: Err("no value supplied for client_id".to_string()),
                }
            }
        }

        impl DeviceAuthRequest {
            pub fn client_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.client_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for client_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<DeviceAuthRequest> for super::DeviceAuthRequest {
            type Error = String;
            fn try_from(value: DeviceAuthRequest) -> Result<Self, String> {
                Ok(Self {
                    client_id: value.client_id?,
                })
            }
        }

        impl From<super::DeviceAuthRequest> for DeviceAuthRequest {
            fn from(value: super::DeviceAuthRequest) -> Self {
                Self {
                    client_id: Ok(value.client_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct DeviceAuthVerify {
            user_code: Result<String, String>,
        }

        impl Default for DeviceAuthVerify {
            fn default() -> Self {
                Self {
                    user_code: Err("no value supplied for user_code".to_string()),
                }
            }
        }

        impl DeviceAuthVerify {
            pub fn user_code<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.user_code = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for user_code: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<DeviceAuthVerify> for super::DeviceAuthVerify {
            type Error = String;
            fn try_from(value: DeviceAuthVerify) -> Result<Self, String> {
                Ok(Self {
                    user_code: value.user_code?,
                })
            }
        }

        impl From<super::DeviceAuthVerify> for DeviceAuthVerify {
            fn from(value: super::DeviceAuthVerify) -> Self {
                Self {
                    user_code: Ok(value.user_code),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Disk {
            block_size: Result<super::ByteCount, String>,
            description: Result<String, String>,
            device_path: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            image_id: Result<Option<uuid::Uuid>, String>,
            name: Result<super::Name, String>,
            project_id: Result<uuid::Uuid, String>,
            size: Result<super::ByteCount, String>,
            snapshot_id: Result<Option<uuid::Uuid>, String>,
            state: Result<super::DiskState, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Disk {
            fn default() -> Self {
                Self {
                    block_size: Err("no value supplied for block_size".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    device_path: Err("no value supplied for device_path".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    image_id: Ok(Default::default()),
                    name: Err("no value supplied for name".to_string()),
                    project_id: Err("no value supplied for project_id".to_string()),
                    size: Err("no value supplied for size".to_string()),
                    snapshot_id: Ok(Default::default()),
                    state: Err("no value supplied for state".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl Disk {
            pub fn block_size<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.block_size = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for block_size: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn device_path<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.device_path = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for device_path: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn image_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<uuid::Uuid>>,
                T::Error: std::fmt::Display,
            {
                self.image_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for image_id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn project_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.project_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for project_id: {}", e));
                self
            }
            pub fn size<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.size = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for size: {}", e));
                self
            }
            pub fn snapshot_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<uuid::Uuid>>,
                T::Error: std::fmt::Display,
            {
                self.snapshot_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for snapshot_id: {}", e));
                self
            }
            pub fn state<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::DiskState>,
                T::Error: std::fmt::Display,
            {
                self.state = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for state: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<Disk> for super::Disk {
            type Error = String;
            fn try_from(value: Disk) -> Result<Self, String> {
                Ok(Self {
                    block_size: value.block_size?,
                    description: value.description?,
                    device_path: value.device_path?,
                    id: value.id?,
                    image_id: value.image_id?,
                    name: value.name?,
                    project_id: value.project_id?,
                    size: value.size?,
                    snapshot_id: value.snapshot_id?,
                    state: value.state?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::Disk> for Disk {
            fn from(value: super::Disk) -> Self {
                Self {
                    block_size: Ok(value.block_size),
                    description: Ok(value.description),
                    device_path: Ok(value.device_path),
                    id: Ok(value.id),
                    image_id: Ok(value.image_id),
                    name: Ok(value.name),
                    project_id: Ok(value.project_id),
                    size: Ok(value.size),
                    snapshot_id: Ok(value.snapshot_id),
                    state: Ok(value.state),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct DiskCreate {
            description: Result<String, String>,
            disk_source: Result<super::DiskSource, String>,
            name: Result<super::Name, String>,
            size: Result<super::ByteCount, String>,
        }

        impl Default for DiskCreate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    disk_source: Err("no value supplied for disk_source".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    size: Err("no value supplied for size".to_string()),
                }
            }
        }

        impl DiskCreate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn disk_source<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::DiskSource>,
                T::Error: std::fmt::Display,
            {
                self.disk_source = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for disk_source: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn size<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.size = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for size: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<DiskCreate> for super::DiskCreate {
            type Error = String;
            fn try_from(value: DiskCreate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    disk_source: value.disk_source?,
                    name: value.name?,
                    size: value.size?,
                })
            }
        }

        impl From<super::DiskCreate> for DiskCreate {
            fn from(value: super::DiskCreate) -> Self {
                Self {
                    description: Ok(value.description),
                    disk_source: Ok(value.disk_source),
                    name: Ok(value.name),
                    size: Ok(value.size),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct DiskPath {
            disk: Result<super::NameOrId, String>,
        }

        impl Default for DiskPath {
            fn default() -> Self {
                Self {
                    disk: Err("no value supplied for disk".to_string()),
                }
            }
        }

        impl DiskPath {
            pub fn disk<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::NameOrId>,
                T::Error: std::fmt::Display,
            {
                self.disk = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for disk: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<DiskPath> for super::DiskPath {
            type Error = String;
            fn try_from(value: DiskPath) -> Result<Self, String> {
                Ok(Self { disk: value.disk? })
            }
        }

        impl From<super::DiskPath> for DiskPath {
            fn from(value: super::DiskPath) -> Self {
                Self {
                    disk: Ok(value.disk),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct DiskResultsPage {
            items: Result<Vec<super::Disk>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for DiskResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl DiskResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Disk>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<DiskResultsPage> for super::DiskResultsPage {
            type Error = String;
            fn try_from(value: DiskResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::DiskResultsPage> for DiskResultsPage {
            fn from(value: super::DiskResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Error {
            error_code: Result<Option<String>, String>,
            message: Result<String, String>,
            request_id: Result<String, String>,
        }

        impl Default for Error {
            fn default() -> Self {
                Self {
                    error_code: Ok(Default::default()),
                    message: Err("no value supplied for message".to_string()),
                    request_id: Err("no value supplied for request_id".to_string()),
                }
            }
        }

        impl Error {
            pub fn error_code<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.error_code = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for error_code: {}", e));
                self
            }
            pub fn message<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.message = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for message: {}", e));
                self
            }
            pub fn request_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.request_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for request_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Error> for super::Error {
            type Error = String;
            fn try_from(value: Error) -> Result<Self, String> {
                Ok(Self {
                    error_code: value.error_code?,
                    message: value.message?,
                    request_id: value.request_id?,
                })
            }
        }

        impl From<super::Error> for Error {
            fn from(value: super::Error) -> Self {
                Self {
                    error_code: Ok(value.error_code),
                    message: Ok(value.message),
                    request_id: Ok(value.request_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct ExternalIp {
            ip: Result<std::net::IpAddr, String>,
            kind: Result<super::IpKind, String>,
        }

        impl Default for ExternalIp {
            fn default() -> Self {
                Self {
                    ip: Err("no value supplied for ip".to_string()),
                    kind: Err("no value supplied for kind".to_string()),
                }
            }
        }

        impl ExternalIp {
            pub fn ip<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.ip = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ip: {}", e));
                self
            }
            pub fn kind<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IpKind>,
                T::Error: std::fmt::Display,
            {
                self.kind = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for kind: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<ExternalIp> for super::ExternalIp {
            type Error = String;
            fn try_from(value: ExternalIp) -> Result<Self, String> {
                Ok(Self {
                    ip: value.ip?,
                    kind: value.kind?,
                })
            }
        }

        impl From<super::ExternalIp> for ExternalIp {
            fn from(value: super::ExternalIp) -> Self {
                Self {
                    ip: Ok(value.ip),
                    kind: Ok(value.kind),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct ExternalIpResultsPage {
            items: Result<Vec<super::ExternalIp>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for ExternalIpResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl ExternalIpResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::ExternalIp>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<ExternalIpResultsPage> for super::ExternalIpResultsPage {
            type Error = String;
            fn try_from(value: ExternalIpResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::ExternalIpResultsPage> for ExternalIpResultsPage {
            fn from(value: super::ExternalIpResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct FinalizeDisk {
            snapshot_name: Result<Option<super::Name>, String>,
        }

        impl Default for FinalizeDisk {
            fn default() -> Self {
                Self {
                    snapshot_name: Ok(Default::default()),
                }
            }
        }

        impl FinalizeDisk {
            pub fn snapshot_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Name>>,
                T::Error: std::fmt::Display,
            {
                self.snapshot_name = value.try_into().map_err(|e| {
                    format!("error converting supplied value for snapshot_name: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<FinalizeDisk> for super::FinalizeDisk {
            type Error = String;
            fn try_from(value: FinalizeDisk) -> Result<Self, String> {
                Ok(Self {
                    snapshot_name: value.snapshot_name?,
                })
            }
        }

        impl From<super::FinalizeDisk> for FinalizeDisk {
            fn from(value: super::FinalizeDisk) -> Self {
                Self {
                    snapshot_name: Ok(value.snapshot_name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct FleetRolePolicy {
            role_assignments: Result<Vec<super::FleetRoleRoleAssignment>, String>,
        }

        impl Default for FleetRolePolicy {
            fn default() -> Self {
                Self {
                    role_assignments: Err("no value supplied for role_assignments".to_string()),
                }
            }
        }

        impl FleetRolePolicy {
            pub fn role_assignments<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::FleetRoleRoleAssignment>>,
                T::Error: std::fmt::Display,
            {
                self.role_assignments = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for role_assignments: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<FleetRolePolicy> for super::FleetRolePolicy {
            type Error = String;
            fn try_from(value: FleetRolePolicy) -> Result<Self, String> {
                Ok(Self {
                    role_assignments: value.role_assignments?,
                })
            }
        }

        impl From<super::FleetRolePolicy> for FleetRolePolicy {
            fn from(value: super::FleetRolePolicy) -> Self {
                Self {
                    role_assignments: Ok(value.role_assignments),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct FleetRoleRoleAssignment {
            identity_id: Result<uuid::Uuid, String>,
            identity_type: Result<super::IdentityType, String>,
            role_name: Result<super::FleetRole, String>,
        }

        impl Default for FleetRoleRoleAssignment {
            fn default() -> Self {
                Self {
                    identity_id: Err("no value supplied for identity_id".to_string()),
                    identity_type: Err("no value supplied for identity_type".to_string()),
                    role_name: Err("no value supplied for role_name".to_string()),
                }
            }
        }

        impl FleetRoleRoleAssignment {
            pub fn identity_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.identity_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for identity_id: {}", e));
                self
            }
            pub fn identity_type<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IdentityType>,
                T::Error: std::fmt::Display,
            {
                self.identity_type = value.try_into().map_err(|e| {
                    format!("error converting supplied value for identity_type: {}", e)
                });
                self
            }
            pub fn role_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::FleetRole>,
                T::Error: std::fmt::Display,
            {
                self.role_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for role_name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<FleetRoleRoleAssignment> for super::FleetRoleRoleAssignment {
            type Error = String;
            fn try_from(value: FleetRoleRoleAssignment) -> Result<Self, String> {
                Ok(Self {
                    identity_id: value.identity_id?,
                    identity_type: value.identity_type?,
                    role_name: value.role_name?,
                })
            }
        }

        impl From<super::FleetRoleRoleAssignment> for FleetRoleRoleAssignment {
            fn from(value: super::FleetRoleRoleAssignment) -> Self {
                Self {
                    identity_id: Ok(value.identity_id),
                    identity_type: Ok(value.identity_type),
                    role_name: Ok(value.role_name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct FloatingIp {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            instance_id: Result<Option<uuid::Uuid>, String>,
            ip: Result<std::net::IpAddr, String>,
            name: Result<super::Name, String>,
            project_id: Result<uuid::Uuid, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for FloatingIp {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    instance_id: Ok(Default::default()),
                    ip: Err("no value supplied for ip".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    project_id: Err("no value supplied for project_id".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl FloatingIp {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn instance_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<uuid::Uuid>>,
                T::Error: std::fmt::Display,
            {
                self.instance_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for instance_id: {}", e));
                self
            }
            pub fn ip<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.ip = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ip: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn project_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.project_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for project_id: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<FloatingIp> for super::FloatingIp {
            type Error = String;
            fn try_from(value: FloatingIp) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    instance_id: value.instance_id?,
                    ip: value.ip?,
                    name: value.name?,
                    project_id: value.project_id?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::FloatingIp> for FloatingIp {
            fn from(value: super::FloatingIp) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    instance_id: Ok(value.instance_id),
                    ip: Ok(value.ip),
                    name: Ok(value.name),
                    project_id: Ok(value.project_id),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct FloatingIpCreate {
            address: Result<Option<std::net::IpAddr>, String>,
            description: Result<String, String>,
            name: Result<super::Name, String>,
            pool: Result<Option<super::NameOrId>, String>,
        }

        impl Default for FloatingIpCreate {
            fn default() -> Self {
                Self {
                    address: Ok(Default::default()),
                    description: Err("no value supplied for description".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    pool: Ok(Default::default()),
                }
            }
        }

        impl FloatingIpCreate {
            pub fn address<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<std::net::IpAddr>>,
                T::Error: std::fmt::Display,
            {
                self.address = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for address: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn pool<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::NameOrId>>,
                T::Error: std::fmt::Display,
            {
                self.pool = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for pool: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<FloatingIpCreate> for super::FloatingIpCreate {
            type Error = String;
            fn try_from(value: FloatingIpCreate) -> Result<Self, String> {
                Ok(Self {
                    address: value.address?,
                    description: value.description?,
                    name: value.name?,
                    pool: value.pool?,
                })
            }
        }

        impl From<super::FloatingIpCreate> for FloatingIpCreate {
            fn from(value: super::FloatingIpCreate) -> Self {
                Self {
                    address: Ok(value.address),
                    description: Ok(value.description),
                    name: Ok(value.name),
                    pool: Ok(value.pool),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct FloatingIpResultsPage {
            items: Result<Vec<super::FloatingIp>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for FloatingIpResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl FloatingIpResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::FloatingIp>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<FloatingIpResultsPage> for super::FloatingIpResultsPage {
            type Error = String;
            fn try_from(value: FloatingIpResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::FloatingIpResultsPage> for FloatingIpResultsPage {
            fn from(value: super::FloatingIpResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Group {
            display_name: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            silo_id: Result<uuid::Uuid, String>,
        }

        impl Default for Group {
            fn default() -> Self {
                Self {
                    display_name: Err("no value supplied for display_name".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    silo_id: Err("no value supplied for silo_id".to_string()),
                }
            }
        }

        impl Group {
            pub fn display_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.display_name = value.try_into().map_err(|e| {
                    format!("error converting supplied value for display_name: {}", e)
                });
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn silo_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.silo_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for silo_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Group> for super::Group {
            type Error = String;
            fn try_from(value: Group) -> Result<Self, String> {
                Ok(Self {
                    display_name: value.display_name?,
                    id: value.id?,
                    silo_id: value.silo_id?,
                })
            }
        }

        impl From<super::Group> for Group {
            fn from(value: super::Group) -> Self {
                Self {
                    display_name: Ok(value.display_name),
                    id: Ok(value.id),
                    silo_id: Ok(value.silo_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct GroupResultsPage {
            items: Result<Vec<super::Group>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for GroupResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl GroupResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Group>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<GroupResultsPage> for super::GroupResultsPage {
            type Error = String;
            fn try_from(value: GroupResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::GroupResultsPage> for GroupResultsPage {
            fn from(value: super::GroupResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Histogramdouble {
            bins: Result<Vec<super::Bindouble>, String>,
            n_samples: Result<u64, String>,
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Histogramdouble {
            fn default() -> Self {
                Self {
                    bins: Err("no value supplied for bins".to_string()),
                    n_samples: Err("no value supplied for n_samples".to_string()),
                    start_time: Err("no value supplied for start_time".to_string()),
                }
            }
        }

        impl Histogramdouble {
            pub fn bins<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Bindouble>>,
                T::Error: std::fmt::Display,
            {
                self.bins = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bins: {}", e));
                self
            }
            pub fn n_samples<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.n_samples = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for n_samples: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Histogramdouble> for super::Histogramdouble {
            type Error = String;
            fn try_from(value: Histogramdouble) -> Result<Self, String> {
                Ok(Self {
                    bins: value.bins?,
                    n_samples: value.n_samples?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::Histogramdouble> for Histogramdouble {
            fn from(value: super::Histogramdouble) -> Self {
                Self {
                    bins: Ok(value.bins),
                    n_samples: Ok(value.n_samples),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Histogramfloat {
            bins: Result<Vec<super::Binfloat>, String>,
            n_samples: Result<u64, String>,
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Histogramfloat {
            fn default() -> Self {
                Self {
                    bins: Err("no value supplied for bins".to_string()),
                    n_samples: Err("no value supplied for n_samples".to_string()),
                    start_time: Err("no value supplied for start_time".to_string()),
                }
            }
        }

        impl Histogramfloat {
            pub fn bins<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Binfloat>>,
                T::Error: std::fmt::Display,
            {
                self.bins = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bins: {}", e));
                self
            }
            pub fn n_samples<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.n_samples = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for n_samples: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Histogramfloat> for super::Histogramfloat {
            type Error = String;
            fn try_from(value: Histogramfloat) -> Result<Self, String> {
                Ok(Self {
                    bins: value.bins?,
                    n_samples: value.n_samples?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::Histogramfloat> for Histogramfloat {
            fn from(value: super::Histogramfloat) -> Self {
                Self {
                    bins: Ok(value.bins),
                    n_samples: Ok(value.n_samples),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Histogramint16 {
            bins: Result<Vec<super::Binint16>, String>,
            n_samples: Result<u64, String>,
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Histogramint16 {
            fn default() -> Self {
                Self {
                    bins: Err("no value supplied for bins".to_string()),
                    n_samples: Err("no value supplied for n_samples".to_string()),
                    start_time: Err("no value supplied for start_time".to_string()),
                }
            }
        }

        impl Histogramint16 {
            pub fn bins<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Binint16>>,
                T::Error: std::fmt::Display,
            {
                self.bins = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bins: {}", e));
                self
            }
            pub fn n_samples<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.n_samples = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for n_samples: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Histogramint16> for super::Histogramint16 {
            type Error = String;
            fn try_from(value: Histogramint16) -> Result<Self, String> {
                Ok(Self {
                    bins: value.bins?,
                    n_samples: value.n_samples?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::Histogramint16> for Histogramint16 {
            fn from(value: super::Histogramint16) -> Self {
                Self {
                    bins: Ok(value.bins),
                    n_samples: Ok(value.n_samples),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Histogramint32 {
            bins: Result<Vec<super::Binint32>, String>,
            n_samples: Result<u64, String>,
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Histogramint32 {
            fn default() -> Self {
                Self {
                    bins: Err("no value supplied for bins".to_string()),
                    n_samples: Err("no value supplied for n_samples".to_string()),
                    start_time: Err("no value supplied for start_time".to_string()),
                }
            }
        }

        impl Histogramint32 {
            pub fn bins<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Binint32>>,
                T::Error: std::fmt::Display,
            {
                self.bins = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bins: {}", e));
                self
            }
            pub fn n_samples<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.n_samples = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for n_samples: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Histogramint32> for super::Histogramint32 {
            type Error = String;
            fn try_from(value: Histogramint32) -> Result<Self, String> {
                Ok(Self {
                    bins: value.bins?,
                    n_samples: value.n_samples?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::Histogramint32> for Histogramint32 {
            fn from(value: super::Histogramint32) -> Self {
                Self {
                    bins: Ok(value.bins),
                    n_samples: Ok(value.n_samples),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Histogramint64 {
            bins: Result<Vec<super::Binint64>, String>,
            n_samples: Result<u64, String>,
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Histogramint64 {
            fn default() -> Self {
                Self {
                    bins: Err("no value supplied for bins".to_string()),
                    n_samples: Err("no value supplied for n_samples".to_string()),
                    start_time: Err("no value supplied for start_time".to_string()),
                }
            }
        }

        impl Histogramint64 {
            pub fn bins<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Binint64>>,
                T::Error: std::fmt::Display,
            {
                self.bins = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bins: {}", e));
                self
            }
            pub fn n_samples<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.n_samples = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for n_samples: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Histogramint64> for super::Histogramint64 {
            type Error = String;
            fn try_from(value: Histogramint64) -> Result<Self, String> {
                Ok(Self {
                    bins: value.bins?,
                    n_samples: value.n_samples?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::Histogramint64> for Histogramint64 {
            fn from(value: super::Histogramint64) -> Self {
                Self {
                    bins: Ok(value.bins),
                    n_samples: Ok(value.n_samples),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Histogramint8 {
            bins: Result<Vec<super::Binint8>, String>,
            n_samples: Result<u64, String>,
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Histogramint8 {
            fn default() -> Self {
                Self {
                    bins: Err("no value supplied for bins".to_string()),
                    n_samples: Err("no value supplied for n_samples".to_string()),
                    start_time: Err("no value supplied for start_time".to_string()),
                }
            }
        }

        impl Histogramint8 {
            pub fn bins<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Binint8>>,
                T::Error: std::fmt::Display,
            {
                self.bins = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bins: {}", e));
                self
            }
            pub fn n_samples<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.n_samples = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for n_samples: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Histogramint8> for super::Histogramint8 {
            type Error = String;
            fn try_from(value: Histogramint8) -> Result<Self, String> {
                Ok(Self {
                    bins: value.bins?,
                    n_samples: value.n_samples?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::Histogramint8> for Histogramint8 {
            fn from(value: super::Histogramint8) -> Self {
                Self {
                    bins: Ok(value.bins),
                    n_samples: Ok(value.n_samples),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Histogramuint16 {
            bins: Result<Vec<super::Binuint16>, String>,
            n_samples: Result<u64, String>,
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Histogramuint16 {
            fn default() -> Self {
                Self {
                    bins: Err("no value supplied for bins".to_string()),
                    n_samples: Err("no value supplied for n_samples".to_string()),
                    start_time: Err("no value supplied for start_time".to_string()),
                }
            }
        }

        impl Histogramuint16 {
            pub fn bins<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Binuint16>>,
                T::Error: std::fmt::Display,
            {
                self.bins = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bins: {}", e));
                self
            }
            pub fn n_samples<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.n_samples = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for n_samples: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Histogramuint16> for super::Histogramuint16 {
            type Error = String;
            fn try_from(value: Histogramuint16) -> Result<Self, String> {
                Ok(Self {
                    bins: value.bins?,
                    n_samples: value.n_samples?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::Histogramuint16> for Histogramuint16 {
            fn from(value: super::Histogramuint16) -> Self {
                Self {
                    bins: Ok(value.bins),
                    n_samples: Ok(value.n_samples),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Histogramuint32 {
            bins: Result<Vec<super::Binuint32>, String>,
            n_samples: Result<u64, String>,
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Histogramuint32 {
            fn default() -> Self {
                Self {
                    bins: Err("no value supplied for bins".to_string()),
                    n_samples: Err("no value supplied for n_samples".to_string()),
                    start_time: Err("no value supplied for start_time".to_string()),
                }
            }
        }

        impl Histogramuint32 {
            pub fn bins<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Binuint32>>,
                T::Error: std::fmt::Display,
            {
                self.bins = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bins: {}", e));
                self
            }
            pub fn n_samples<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.n_samples = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for n_samples: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Histogramuint32> for super::Histogramuint32 {
            type Error = String;
            fn try_from(value: Histogramuint32) -> Result<Self, String> {
                Ok(Self {
                    bins: value.bins?,
                    n_samples: value.n_samples?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::Histogramuint32> for Histogramuint32 {
            fn from(value: super::Histogramuint32) -> Self {
                Self {
                    bins: Ok(value.bins),
                    n_samples: Ok(value.n_samples),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Histogramuint64 {
            bins: Result<Vec<super::Binuint64>, String>,
            n_samples: Result<u64, String>,
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Histogramuint64 {
            fn default() -> Self {
                Self {
                    bins: Err("no value supplied for bins".to_string()),
                    n_samples: Err("no value supplied for n_samples".to_string()),
                    start_time: Err("no value supplied for start_time".to_string()),
                }
            }
        }

        impl Histogramuint64 {
            pub fn bins<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Binuint64>>,
                T::Error: std::fmt::Display,
            {
                self.bins = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bins: {}", e));
                self
            }
            pub fn n_samples<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.n_samples = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for n_samples: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Histogramuint64> for super::Histogramuint64 {
            type Error = String;
            fn try_from(value: Histogramuint64) -> Result<Self, String> {
                Ok(Self {
                    bins: value.bins?,
                    n_samples: value.n_samples?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::Histogramuint64> for Histogramuint64 {
            fn from(value: super::Histogramuint64) -> Self {
                Self {
                    bins: Ok(value.bins),
                    n_samples: Ok(value.n_samples),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Histogramuint8 {
            bins: Result<Vec<super::Binuint8>, String>,
            n_samples: Result<u64, String>,
            start_time: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Histogramuint8 {
            fn default() -> Self {
                Self {
                    bins: Err("no value supplied for bins".to_string()),
                    n_samples: Err("no value supplied for n_samples".to_string()),
                    start_time: Err("no value supplied for start_time".to_string()),
                }
            }
        }

        impl Histogramuint8 {
            pub fn bins<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Binuint8>>,
                T::Error: std::fmt::Display,
            {
                self.bins = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bins: {}", e));
                self
            }
            pub fn n_samples<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.n_samples = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for n_samples: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Histogramuint8> for super::Histogramuint8 {
            type Error = String;
            fn try_from(value: Histogramuint8) -> Result<Self, String> {
                Ok(Self {
                    bins: value.bins?,
                    n_samples: value.n_samples?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::Histogramuint8> for Histogramuint8 {
            fn from(value: super::Histogramuint8) -> Self {
                Self {
                    bins: Ok(value.bins),
                    n_samples: Ok(value.n_samples),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct IdentityProvider {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            provider_type: Result<super::IdentityProviderType, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for IdentityProvider {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    provider_type: Err("no value supplied for provider_type".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl IdentityProvider {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn provider_type<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IdentityProviderType>,
                T::Error: std::fmt::Display,
            {
                self.provider_type = value.try_into().map_err(|e| {
                    format!("error converting supplied value for provider_type: {}", e)
                });
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<IdentityProvider> for super::IdentityProvider {
            type Error = String;
            fn try_from(value: IdentityProvider) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    name: value.name?,
                    provider_type: value.provider_type?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::IdentityProvider> for IdentityProvider {
            fn from(value: super::IdentityProvider) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    provider_type: Ok(value.provider_type),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct IdentityProviderResultsPage {
            items: Result<Vec<super::IdentityProvider>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for IdentityProviderResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl IdentityProviderResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::IdentityProvider>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<IdentityProviderResultsPage> for super::IdentityProviderResultsPage {
            type Error = String;
            fn try_from(value: IdentityProviderResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::IdentityProviderResultsPage> for IdentityProviderResultsPage {
            fn from(value: super::IdentityProviderResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Image {
            block_size: Result<super::ByteCount, String>,
            description: Result<String, String>,
            digest: Result<Option<super::Digest>, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            os: Result<String, String>,
            project_id: Result<Option<uuid::Uuid>, String>,
            size: Result<super::ByteCount, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            version: Result<String, String>,
        }

        impl Default for Image {
            fn default() -> Self {
                Self {
                    block_size: Err("no value supplied for block_size".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    digest: Ok(Default::default()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    os: Err("no value supplied for os".to_string()),
                    project_id: Ok(Default::default()),
                    size: Err("no value supplied for size".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                    version: Err("no value supplied for version".to_string()),
                }
            }
        }

        impl Image {
            pub fn block_size<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.block_size = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for block_size: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn digest<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Digest>>,
                T::Error: std::fmt::Display,
            {
                self.digest = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for digest: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn os<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.os = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for os: {}", e));
                self
            }
            pub fn project_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<uuid::Uuid>>,
                T::Error: std::fmt::Display,
            {
                self.project_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for project_id: {}", e));
                self
            }
            pub fn size<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.size = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for size: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
            pub fn version<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.version = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for version: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Image> for super::Image {
            type Error = String;
            fn try_from(value: Image) -> Result<Self, String> {
                Ok(Self {
                    block_size: value.block_size?,
                    description: value.description?,
                    digest: value.digest?,
                    id: value.id?,
                    name: value.name?,
                    os: value.os?,
                    project_id: value.project_id?,
                    size: value.size?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                    version: value.version?,
                })
            }
        }

        impl From<super::Image> for Image {
            fn from(value: super::Image) -> Self {
                Self {
                    block_size: Ok(value.block_size),
                    description: Ok(value.description),
                    digest: Ok(value.digest),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    os: Ok(value.os),
                    project_id: Ok(value.project_id),
                    size: Ok(value.size),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                    version: Ok(value.version),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct ImageCreate {
            description: Result<String, String>,
            name: Result<super::Name, String>,
            os: Result<String, String>,
            source: Result<super::ImageSource, String>,
            version: Result<String, String>,
        }

        impl Default for ImageCreate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    os: Err("no value supplied for os".to_string()),
                    source: Err("no value supplied for source".to_string()),
                    version: Err("no value supplied for version".to_string()),
                }
            }
        }

        impl ImageCreate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn os<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.os = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for os: {}", e));
                self
            }
            pub fn source<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ImageSource>,
                T::Error: std::fmt::Display,
            {
                self.source = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for source: {}", e));
                self
            }
            pub fn version<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.version = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for version: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<ImageCreate> for super::ImageCreate {
            type Error = String;
            fn try_from(value: ImageCreate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    name: value.name?,
                    os: value.os?,
                    source: value.source?,
                    version: value.version?,
                })
            }
        }

        impl From<super::ImageCreate> for ImageCreate {
            fn from(value: super::ImageCreate) -> Self {
                Self {
                    description: Ok(value.description),
                    name: Ok(value.name),
                    os: Ok(value.os),
                    source: Ok(value.source),
                    version: Ok(value.version),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct ImageResultsPage {
            items: Result<Vec<super::Image>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for ImageResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl ImageResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Image>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<ImageResultsPage> for super::ImageResultsPage {
            type Error = String;
            fn try_from(value: ImageResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::ImageResultsPage> for ImageResultsPage {
            fn from(value: super::ImageResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct ImportBlocksBulkWrite {
            base64_encoded_data: Result<String, String>,
            offset: Result<u64, String>,
        }

        impl Default for ImportBlocksBulkWrite {
            fn default() -> Self {
                Self {
                    base64_encoded_data: Err(
                        "no value supplied for base64_encoded_data".to_string()
                    ),
                    offset: Err("no value supplied for offset".to_string()),
                }
            }
        }

        impl ImportBlocksBulkWrite {
            pub fn base64_encoded_data<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.base64_encoded_data = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for base64_encoded_data: {}",
                        e
                    )
                });
                self
            }
            pub fn offset<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.offset = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for offset: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<ImportBlocksBulkWrite> for super::ImportBlocksBulkWrite {
            type Error = String;
            fn try_from(value: ImportBlocksBulkWrite) -> Result<Self, String> {
                Ok(Self {
                    base64_encoded_data: value.base64_encoded_data?,
                    offset: value.offset?,
                })
            }
        }

        impl From<super::ImportBlocksBulkWrite> for ImportBlocksBulkWrite {
            fn from(value: super::ImportBlocksBulkWrite) -> Self {
                Self {
                    base64_encoded_data: Ok(value.base64_encoded_data),
                    offset: Ok(value.offset),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Instance {
            description: Result<String, String>,
            hostname: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            memory: Result<super::ByteCount, String>,
            name: Result<super::Name, String>,
            ncpus: Result<super::InstanceCpuCount, String>,
            project_id: Result<uuid::Uuid, String>,
            run_state: Result<super::InstanceState, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_run_state_updated: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Instance {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    hostname: Err("no value supplied for hostname".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    memory: Err("no value supplied for memory".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    ncpus: Err("no value supplied for ncpus".to_string()),
                    project_id: Err("no value supplied for project_id".to_string()),
                    run_state: Err("no value supplied for run_state".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                    time_run_state_updated: Err(
                        "no value supplied for time_run_state_updated".to_string()
                    ),
                }
            }
        }

        impl Instance {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn hostname<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.hostname = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for hostname: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn memory<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.memory = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for memory: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn ncpus<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::InstanceCpuCount>,
                T::Error: std::fmt::Display,
            {
                self.ncpus = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ncpus: {}", e));
                self
            }
            pub fn project_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.project_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for project_id: {}", e));
                self
            }
            pub fn run_state<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::InstanceState>,
                T::Error: std::fmt::Display,
            {
                self.run_state = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for run_state: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
            pub fn time_run_state_updated<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_run_state_updated = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for time_run_state_updated: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<Instance> for super::Instance {
            type Error = String;
            fn try_from(value: Instance) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    hostname: value.hostname?,
                    id: value.id?,
                    memory: value.memory?,
                    name: value.name?,
                    ncpus: value.ncpus?,
                    project_id: value.project_id?,
                    run_state: value.run_state?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                    time_run_state_updated: value.time_run_state_updated?,
                })
            }
        }

        impl From<super::Instance> for Instance {
            fn from(value: super::Instance) -> Self {
                Self {
                    description: Ok(value.description),
                    hostname: Ok(value.hostname),
                    id: Ok(value.id),
                    memory: Ok(value.memory),
                    name: Ok(value.name),
                    ncpus: Ok(value.ncpus),
                    project_id: Ok(value.project_id),
                    run_state: Ok(value.run_state),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                    time_run_state_updated: Ok(value.time_run_state_updated),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct InstanceCreate {
            description: Result<String, String>,
            disks: Result<Vec<super::InstanceDiskAttachment>, String>,
            external_ips: Result<Vec<super::ExternalIpCreate>, String>,
            hostname: Result<String, String>,
            memory: Result<super::ByteCount, String>,
            name: Result<super::Name, String>,
            ncpus: Result<super::InstanceCpuCount, String>,
            network_interfaces: Result<super::InstanceNetworkInterfaceAttachment, String>,
            start: Result<bool, String>,
            user_data: Result<String, String>,
        }

        impl Default for InstanceCreate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    disks: Ok(Default::default()),
                    external_ips: Ok(Default::default()),
                    hostname: Err("no value supplied for hostname".to_string()),
                    memory: Err("no value supplied for memory".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    ncpus: Err("no value supplied for ncpus".to_string()),
                    network_interfaces: Ok(super::defaults::instance_create_network_interfaces()),
                    start: Ok(super::defaults::default_bool::<true>()),
                    user_data: Ok(Default::default()),
                }
            }
        }

        impl InstanceCreate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn disks<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::InstanceDiskAttachment>>,
                T::Error: std::fmt::Display,
            {
                self.disks = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for disks: {}", e));
                self
            }
            pub fn external_ips<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::ExternalIpCreate>>,
                T::Error: std::fmt::Display,
            {
                self.external_ips = value.try_into().map_err(|e| {
                    format!("error converting supplied value for external_ips: {}", e)
                });
                self
            }
            pub fn hostname<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.hostname = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for hostname: {}", e));
                self
            }
            pub fn memory<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.memory = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for memory: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn ncpus<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::InstanceCpuCount>,
                T::Error: std::fmt::Display,
            {
                self.ncpus = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ncpus: {}", e));
                self
            }
            pub fn network_interfaces<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::InstanceNetworkInterfaceAttachment>,
                T::Error: std::fmt::Display,
            {
                self.network_interfaces = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for network_interfaces: {}",
                        e
                    )
                });
                self
            }
            pub fn start<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.start = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start: {}", e));
                self
            }
            pub fn user_data<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.user_data = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for user_data: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<InstanceCreate> for super::InstanceCreate {
            type Error = String;
            fn try_from(value: InstanceCreate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    disks: value.disks?,
                    external_ips: value.external_ips?,
                    hostname: value.hostname?,
                    memory: value.memory?,
                    name: value.name?,
                    ncpus: value.ncpus?,
                    network_interfaces: value.network_interfaces?,
                    start: value.start?,
                    user_data: value.user_data?,
                })
            }
        }

        impl From<super::InstanceCreate> for InstanceCreate {
            fn from(value: super::InstanceCreate) -> Self {
                Self {
                    description: Ok(value.description),
                    disks: Ok(value.disks),
                    external_ips: Ok(value.external_ips),
                    hostname: Ok(value.hostname),
                    memory: Ok(value.memory),
                    name: Ok(value.name),
                    ncpus: Ok(value.ncpus),
                    network_interfaces: Ok(value.network_interfaces),
                    start: Ok(value.start),
                    user_data: Ok(value.user_data),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct InstanceMigrate {
            dst_sled_id: Result<uuid::Uuid, String>,
        }

        impl Default for InstanceMigrate {
            fn default() -> Self {
                Self {
                    dst_sled_id: Err("no value supplied for dst_sled_id".to_string()),
                }
            }
        }

        impl InstanceMigrate {
            pub fn dst_sled_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.dst_sled_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for dst_sled_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<InstanceMigrate> for super::InstanceMigrate {
            type Error = String;
            fn try_from(value: InstanceMigrate) -> Result<Self, String> {
                Ok(Self {
                    dst_sled_id: value.dst_sled_id?,
                })
            }
        }

        impl From<super::InstanceMigrate> for InstanceMigrate {
            fn from(value: super::InstanceMigrate) -> Self {
                Self {
                    dst_sled_id: Ok(value.dst_sled_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct InstanceNetworkInterface {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            instance_id: Result<uuid::Uuid, String>,
            ip: Result<std::net::IpAddr, String>,
            mac: Result<super::MacAddr, String>,
            name: Result<super::Name, String>,
            primary: Result<bool, String>,
            subnet_id: Result<uuid::Uuid, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            vpc_id: Result<uuid::Uuid, String>,
        }

        impl Default for InstanceNetworkInterface {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    instance_id: Err("no value supplied for instance_id".to_string()),
                    ip: Err("no value supplied for ip".to_string()),
                    mac: Err("no value supplied for mac".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    primary: Err("no value supplied for primary".to_string()),
                    subnet_id: Err("no value supplied for subnet_id".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                    vpc_id: Err("no value supplied for vpc_id".to_string()),
                }
            }
        }

        impl InstanceNetworkInterface {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn instance_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.instance_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for instance_id: {}", e));
                self
            }
            pub fn ip<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.ip = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ip: {}", e));
                self
            }
            pub fn mac<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::MacAddr>,
                T::Error: std::fmt::Display,
            {
                self.mac = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for mac: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn primary<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.primary = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for primary: {}", e));
                self
            }
            pub fn subnet_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.subnet_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for subnet_id: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
            pub fn vpc_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.vpc_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for vpc_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<InstanceNetworkInterface> for super::InstanceNetworkInterface {
            type Error = String;
            fn try_from(value: InstanceNetworkInterface) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    instance_id: value.instance_id?,
                    ip: value.ip?,
                    mac: value.mac?,
                    name: value.name?,
                    primary: value.primary?,
                    subnet_id: value.subnet_id?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                    vpc_id: value.vpc_id?,
                })
            }
        }

        impl From<super::InstanceNetworkInterface> for InstanceNetworkInterface {
            fn from(value: super::InstanceNetworkInterface) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    instance_id: Ok(value.instance_id),
                    ip: Ok(value.ip),
                    mac: Ok(value.mac),
                    name: Ok(value.name),
                    primary: Ok(value.primary),
                    subnet_id: Ok(value.subnet_id),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                    vpc_id: Ok(value.vpc_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct InstanceNetworkInterfaceCreate {
            description: Result<String, String>,
            ip: Result<Option<std::net::IpAddr>, String>,
            name: Result<super::Name, String>,
            subnet_name: Result<super::Name, String>,
            vpc_name: Result<super::Name, String>,
        }

        impl Default for InstanceNetworkInterfaceCreate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    ip: Ok(Default::default()),
                    name: Err("no value supplied for name".to_string()),
                    subnet_name: Err("no value supplied for subnet_name".to_string()),
                    vpc_name: Err("no value supplied for vpc_name".to_string()),
                }
            }
        }

        impl InstanceNetworkInterfaceCreate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn ip<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<std::net::IpAddr>>,
                T::Error: std::fmt::Display,
            {
                self.ip = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ip: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn subnet_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.subnet_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for subnet_name: {}", e));
                self
            }
            pub fn vpc_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.vpc_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for vpc_name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<InstanceNetworkInterfaceCreate>
            for super::InstanceNetworkInterfaceCreate
        {
            type Error = String;
            fn try_from(value: InstanceNetworkInterfaceCreate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    ip: value.ip?,
                    name: value.name?,
                    subnet_name: value.subnet_name?,
                    vpc_name: value.vpc_name?,
                })
            }
        }

        impl From<super::InstanceNetworkInterfaceCreate> for InstanceNetworkInterfaceCreate {
            fn from(value: super::InstanceNetworkInterfaceCreate) -> Self {
                Self {
                    description: Ok(value.description),
                    ip: Ok(value.ip),
                    name: Ok(value.name),
                    subnet_name: Ok(value.subnet_name),
                    vpc_name: Ok(value.vpc_name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct InstanceNetworkInterfaceResultsPage {
            items: Result<Vec<super::InstanceNetworkInterface>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for InstanceNetworkInterfaceResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl InstanceNetworkInterfaceResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::InstanceNetworkInterface>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<InstanceNetworkInterfaceResultsPage>
            for super::InstanceNetworkInterfaceResultsPage
        {
            type Error = String;
            fn try_from(value: InstanceNetworkInterfaceResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::InstanceNetworkInterfaceResultsPage> for InstanceNetworkInterfaceResultsPage {
            fn from(value: super::InstanceNetworkInterfaceResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct InstanceNetworkInterfaceUpdate {
            description: Result<Option<String>, String>,
            name: Result<Option<super::Name>, String>,
            primary: Result<bool, String>,
        }

        impl Default for InstanceNetworkInterfaceUpdate {
            fn default() -> Self {
                Self {
                    description: Ok(Default::default()),
                    name: Ok(Default::default()),
                    primary: Ok(Default::default()),
                }
            }
        }

        impl InstanceNetworkInterfaceUpdate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Name>>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn primary<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.primary = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for primary: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<InstanceNetworkInterfaceUpdate>
            for super::InstanceNetworkInterfaceUpdate
        {
            type Error = String;
            fn try_from(value: InstanceNetworkInterfaceUpdate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    name: value.name?,
                    primary: value.primary?,
                })
            }
        }

        impl From<super::InstanceNetworkInterfaceUpdate> for InstanceNetworkInterfaceUpdate {
            fn from(value: super::InstanceNetworkInterfaceUpdate) -> Self {
                Self {
                    description: Ok(value.description),
                    name: Ok(value.name),
                    primary: Ok(value.primary),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct InstanceResultsPage {
            items: Result<Vec<super::Instance>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for InstanceResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl InstanceResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Instance>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<InstanceResultsPage> for super::InstanceResultsPage {
            type Error = String;
            fn try_from(value: InstanceResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::InstanceResultsPage> for InstanceResultsPage {
            fn from(value: super::InstanceResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct InstanceSerialConsoleData {
            data: Result<Vec<u8>, String>,
            last_byte_offset: Result<u64, String>,
        }

        impl Default for InstanceSerialConsoleData {
            fn default() -> Self {
                Self {
                    data: Err("no value supplied for data".to_string()),
                    last_byte_offset: Err("no value supplied for last_byte_offset".to_string()),
                }
            }
        }

        impl InstanceSerialConsoleData {
            pub fn data<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<u8>>,
                T::Error: std::fmt::Display,
            {
                self.data = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for data: {}", e));
                self
            }
            pub fn last_byte_offset<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u64>,
                T::Error: std::fmt::Display,
            {
                self.last_byte_offset = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for last_byte_offset: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<InstanceSerialConsoleData> for super::InstanceSerialConsoleData {
            type Error = String;
            fn try_from(value: InstanceSerialConsoleData) -> Result<Self, String> {
                Ok(Self {
                    data: value.data?,
                    last_byte_offset: value.last_byte_offset?,
                })
            }
        }

        impl From<super::InstanceSerialConsoleData> for InstanceSerialConsoleData {
            fn from(value: super::InstanceSerialConsoleData) -> Self {
                Self {
                    data: Ok(value.data),
                    last_byte_offset: Ok(value.last_byte_offset),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct IpPool {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            is_default: Result<bool, String>,
            name: Result<super::Name, String>,
            silo_id: Result<Option<uuid::Uuid>, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for IpPool {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    is_default: Err("no value supplied for is_default".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    silo_id: Ok(Default::default()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl IpPool {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn is_default<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.is_default = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for is_default: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn silo_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<uuid::Uuid>>,
                T::Error: std::fmt::Display,
            {
                self.silo_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for silo_id: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<IpPool> for super::IpPool {
            type Error = String;
            fn try_from(value: IpPool) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    is_default: value.is_default?,
                    name: value.name?,
                    silo_id: value.silo_id?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::IpPool> for IpPool {
            fn from(value: super::IpPool) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    is_default: Ok(value.is_default),
                    name: Ok(value.name),
                    silo_id: Ok(value.silo_id),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct IpPoolCreate {
            description: Result<String, String>,
            is_default: Result<bool, String>,
            name: Result<super::Name, String>,
            silo: Result<Option<super::NameOrId>, String>,
        }

        impl Default for IpPoolCreate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    is_default: Ok(Default::default()),
                    name: Err("no value supplied for name".to_string()),
                    silo: Ok(Default::default()),
                }
            }
        }

        impl IpPoolCreate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn is_default<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.is_default = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for is_default: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn silo<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::NameOrId>>,
                T::Error: std::fmt::Display,
            {
                self.silo = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for silo: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<IpPoolCreate> for super::IpPoolCreate {
            type Error = String;
            fn try_from(value: IpPoolCreate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    is_default: value.is_default?,
                    name: value.name?,
                    silo: value.silo?,
                })
            }
        }

        impl From<super::IpPoolCreate> for IpPoolCreate {
            fn from(value: super::IpPoolCreate) -> Self {
                Self {
                    description: Ok(value.description),
                    is_default: Ok(value.is_default),
                    name: Ok(value.name),
                    silo: Ok(value.silo),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct IpPoolRange {
            id: Result<uuid::Uuid, String>,
            ip_pool_id: Result<uuid::Uuid, String>,
            range: Result<super::IpRange, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for IpPoolRange {
            fn default() -> Self {
                Self {
                    id: Err("no value supplied for id".to_string()),
                    ip_pool_id: Err("no value supplied for ip_pool_id".to_string()),
                    range: Err("no value supplied for range".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                }
            }
        }

        impl IpPoolRange {
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn ip_pool_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.ip_pool_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ip_pool_id: {}", e));
                self
            }
            pub fn range<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IpRange>,
                T::Error: std::fmt::Display,
            {
                self.range = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for range: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<IpPoolRange> for super::IpPoolRange {
            type Error = String;
            fn try_from(value: IpPoolRange) -> Result<Self, String> {
                Ok(Self {
                    id: value.id?,
                    ip_pool_id: value.ip_pool_id?,
                    range: value.range?,
                    time_created: value.time_created?,
                })
            }
        }

        impl From<super::IpPoolRange> for IpPoolRange {
            fn from(value: super::IpPoolRange) -> Self {
                Self {
                    id: Ok(value.id),
                    ip_pool_id: Ok(value.ip_pool_id),
                    range: Ok(value.range),
                    time_created: Ok(value.time_created),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct IpPoolRangeResultsPage {
            items: Result<Vec<super::IpPoolRange>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for IpPoolRangeResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl IpPoolRangeResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::IpPoolRange>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<IpPoolRangeResultsPage> for super::IpPoolRangeResultsPage {
            type Error = String;
            fn try_from(value: IpPoolRangeResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::IpPoolRangeResultsPage> for IpPoolRangeResultsPage {
            fn from(value: super::IpPoolRangeResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct IpPoolResultsPage {
            items: Result<Vec<super::IpPool>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for IpPoolResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl IpPoolResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::IpPool>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<IpPoolResultsPage> for super::IpPoolResultsPage {
            type Error = String;
            fn try_from(value: IpPoolResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::IpPoolResultsPage> for IpPoolResultsPage {
            fn from(value: super::IpPoolResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct IpPoolUpdate {
            description: Result<Option<String>, String>,
            name: Result<Option<super::Name>, String>,
        }

        impl Default for IpPoolUpdate {
            fn default() -> Self {
                Self {
                    description: Ok(Default::default()),
                    name: Ok(Default::default()),
                }
            }
        }

        impl IpPoolUpdate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Name>>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<IpPoolUpdate> for super::IpPoolUpdate {
            type Error = String;
            fn try_from(value: IpPoolUpdate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    name: value.name?,
                })
            }
        }

        impl From<super::IpPoolUpdate> for IpPoolUpdate {
            fn from(value: super::IpPoolUpdate) -> Self {
                Self {
                    description: Ok(value.description),
                    name: Ok(value.name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Ipv4Range {
            first: Result<std::net::Ipv4Addr, String>,
            last: Result<std::net::Ipv4Addr, String>,
        }

        impl Default for Ipv4Range {
            fn default() -> Self {
                Self {
                    first: Err("no value supplied for first".to_string()),
                    last: Err("no value supplied for last".to_string()),
                }
            }
        }

        impl Ipv4Range {
            pub fn first<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::Ipv4Addr>,
                T::Error: std::fmt::Display,
            {
                self.first = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for first: {}", e));
                self
            }
            pub fn last<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::Ipv4Addr>,
                T::Error: std::fmt::Display,
            {
                self.last = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for last: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Ipv4Range> for super::Ipv4Range {
            type Error = String;
            fn try_from(value: Ipv4Range) -> Result<Self, String> {
                Ok(Self {
                    first: value.first?,
                    last: value.last?,
                })
            }
        }

        impl From<super::Ipv4Range> for Ipv4Range {
            fn from(value: super::Ipv4Range) -> Self {
                Self {
                    first: Ok(value.first),
                    last: Ok(value.last),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Ipv6Range {
            first: Result<std::net::Ipv6Addr, String>,
            last: Result<std::net::Ipv6Addr, String>,
        }

        impl Default for Ipv6Range {
            fn default() -> Self {
                Self {
                    first: Err("no value supplied for first".to_string()),
                    last: Err("no value supplied for last".to_string()),
                }
            }
        }

        impl Ipv6Range {
            pub fn first<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::Ipv6Addr>,
                T::Error: std::fmt::Display,
            {
                self.first = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for first: {}", e));
                self
            }
            pub fn last<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::Ipv6Addr>,
                T::Error: std::fmt::Display,
            {
                self.last = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for last: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Ipv6Range> for super::Ipv6Range {
            type Error = String;
            fn try_from(value: Ipv6Range) -> Result<Self, String> {
                Ok(Self {
                    first: value.first?,
                    last: value.last?,
                })
            }
        }

        impl From<super::Ipv6Range> for Ipv6Range {
            fn from(value: super::Ipv6Range) -> Self {
                Self {
                    first: Ok(value.first),
                    last: Ok(value.last),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct LinkConfig {
            autoneg: Result<bool, String>,
            fec: Result<super::LinkFec, String>,
            lldp: Result<super::LldpServiceConfig, String>,
            mtu: Result<u16, String>,
            speed: Result<super::LinkSpeed, String>,
        }

        impl Default for LinkConfig {
            fn default() -> Self {
                Self {
                    autoneg: Err("no value supplied for autoneg".to_string()),
                    fec: Err("no value supplied for fec".to_string()),
                    lldp: Err("no value supplied for lldp".to_string()),
                    mtu: Err("no value supplied for mtu".to_string()),
                    speed: Err("no value supplied for speed".to_string()),
                }
            }
        }

        impl LinkConfig {
            pub fn autoneg<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.autoneg = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for autoneg: {}", e));
                self
            }
            pub fn fec<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::LinkFec>,
                T::Error: std::fmt::Display,
            {
                self.fec = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for fec: {}", e));
                self
            }
            pub fn lldp<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::LldpServiceConfig>,
                T::Error: std::fmt::Display,
            {
                self.lldp = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for lldp: {}", e));
                self
            }
            pub fn mtu<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u16>,
                T::Error: std::fmt::Display,
            {
                self.mtu = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for mtu: {}", e));
                self
            }
            pub fn speed<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::LinkSpeed>,
                T::Error: std::fmt::Display,
            {
                self.speed = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for speed: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<LinkConfig> for super::LinkConfig {
            type Error = String;
            fn try_from(value: LinkConfig) -> Result<Self, String> {
                Ok(Self {
                    autoneg: value.autoneg?,
                    fec: value.fec?,
                    lldp: value.lldp?,
                    mtu: value.mtu?,
                    speed: value.speed?,
                })
            }
        }

        impl From<super::LinkConfig> for LinkConfig {
            fn from(value: super::LinkConfig) -> Self {
                Self {
                    autoneg: Ok(value.autoneg),
                    fec: Ok(value.fec),
                    lldp: Ok(value.lldp),
                    mtu: Ok(value.mtu),
                    speed: Ok(value.speed),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct LldpServiceConfig {
            enabled: Result<bool, String>,
            lldp_config: Result<Option<super::NameOrId>, String>,
        }

        impl Default for LldpServiceConfig {
            fn default() -> Self {
                Self {
                    enabled: Err("no value supplied for enabled".to_string()),
                    lldp_config: Ok(Default::default()),
                }
            }
        }

        impl LldpServiceConfig {
            pub fn enabled<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.enabled = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for enabled: {}", e));
                self
            }
            pub fn lldp_config<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::NameOrId>>,
                T::Error: std::fmt::Display,
            {
                self.lldp_config = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for lldp_config: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<LldpServiceConfig> for super::LldpServiceConfig {
            type Error = String;
            fn try_from(value: LldpServiceConfig) -> Result<Self, String> {
                Ok(Self {
                    enabled: value.enabled?,
                    lldp_config: value.lldp_config?,
                })
            }
        }

        impl From<super::LldpServiceConfig> for LldpServiceConfig {
            fn from(value: super::LldpServiceConfig) -> Self {
                Self {
                    enabled: Ok(value.enabled),
                    lldp_config: Ok(value.lldp_config),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct LoopbackAddress {
            address: Result<super::IpNet, String>,
            address_lot_block_id: Result<uuid::Uuid, String>,
            id: Result<uuid::Uuid, String>,
            rack_id: Result<uuid::Uuid, String>,
            switch_location: Result<String, String>,
        }

        impl Default for LoopbackAddress {
            fn default() -> Self {
                Self {
                    address: Err("no value supplied for address".to_string()),
                    address_lot_block_id: Err(
                        "no value supplied for address_lot_block_id".to_string()
                    ),
                    id: Err("no value supplied for id".to_string()),
                    rack_id: Err("no value supplied for rack_id".to_string()),
                    switch_location: Err("no value supplied for switch_location".to_string()),
                }
            }
        }

        impl LoopbackAddress {
            pub fn address<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IpNet>,
                T::Error: std::fmt::Display,
            {
                self.address = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for address: {}", e));
                self
            }
            pub fn address_lot_block_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.address_lot_block_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for address_lot_block_id: {}",
                        e
                    )
                });
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn rack_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.rack_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for rack_id: {}", e));
                self
            }
            pub fn switch_location<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.switch_location = value.try_into().map_err(|e| {
                    format!("error converting supplied value for switch_location: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<LoopbackAddress> for super::LoopbackAddress {
            type Error = String;
            fn try_from(value: LoopbackAddress) -> Result<Self, String> {
                Ok(Self {
                    address: value.address?,
                    address_lot_block_id: value.address_lot_block_id?,
                    id: value.id?,
                    rack_id: value.rack_id?,
                    switch_location: value.switch_location?,
                })
            }
        }

        impl From<super::LoopbackAddress> for LoopbackAddress {
            fn from(value: super::LoopbackAddress) -> Self {
                Self {
                    address: Ok(value.address),
                    address_lot_block_id: Ok(value.address_lot_block_id),
                    id: Ok(value.id),
                    rack_id: Ok(value.rack_id),
                    switch_location: Ok(value.switch_location),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct LoopbackAddressCreate {
            address: Result<std::net::IpAddr, String>,
            address_lot: Result<super::NameOrId, String>,
            anycast: Result<bool, String>,
            mask: Result<u8, String>,
            rack_id: Result<uuid::Uuid, String>,
            switch_location: Result<super::Name, String>,
        }

        impl Default for LoopbackAddressCreate {
            fn default() -> Self {
                Self {
                    address: Err("no value supplied for address".to_string()),
                    address_lot: Err("no value supplied for address_lot".to_string()),
                    anycast: Err("no value supplied for anycast".to_string()),
                    mask: Err("no value supplied for mask".to_string()),
                    rack_id: Err("no value supplied for rack_id".to_string()),
                    switch_location: Err("no value supplied for switch_location".to_string()),
                }
            }
        }

        impl LoopbackAddressCreate {
            pub fn address<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.address = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for address: {}", e));
                self
            }
            pub fn address_lot<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::NameOrId>,
                T::Error: std::fmt::Display,
            {
                self.address_lot = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for address_lot: {}", e));
                self
            }
            pub fn anycast<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.anycast = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for anycast: {}", e));
                self
            }
            pub fn mask<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u8>,
                T::Error: std::fmt::Display,
            {
                self.mask = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for mask: {}", e));
                self
            }
            pub fn rack_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.rack_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for rack_id: {}", e));
                self
            }
            pub fn switch_location<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.switch_location = value.try_into().map_err(|e| {
                    format!("error converting supplied value for switch_location: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<LoopbackAddressCreate> for super::LoopbackAddressCreate {
            type Error = String;
            fn try_from(value: LoopbackAddressCreate) -> Result<Self, String> {
                Ok(Self {
                    address: value.address?,
                    address_lot: value.address_lot?,
                    anycast: value.anycast?,
                    mask: value.mask?,
                    rack_id: value.rack_id?,
                    switch_location: value.switch_location?,
                })
            }
        }

        impl From<super::LoopbackAddressCreate> for LoopbackAddressCreate {
            fn from(value: super::LoopbackAddressCreate) -> Self {
                Self {
                    address: Ok(value.address),
                    address_lot: Ok(value.address_lot),
                    anycast: Ok(value.anycast),
                    mask: Ok(value.mask),
                    rack_id: Ok(value.rack_id),
                    switch_location: Ok(value.switch_location),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct LoopbackAddressResultsPage {
            items: Result<Vec<super::LoopbackAddress>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for LoopbackAddressResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl LoopbackAddressResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::LoopbackAddress>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<LoopbackAddressResultsPage> for super::LoopbackAddressResultsPage {
            type Error = String;
            fn try_from(value: LoopbackAddressResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::LoopbackAddressResultsPage> for LoopbackAddressResultsPage {
            fn from(value: super::LoopbackAddressResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Measurement {
            datum: Result<super::Datum, String>,
            timestamp: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Measurement {
            fn default() -> Self {
                Self {
                    datum: Err("no value supplied for datum".to_string()),
                    timestamp: Err("no value supplied for timestamp".to_string()),
                }
            }
        }

        impl Measurement {
            pub fn datum<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Datum>,
                T::Error: std::fmt::Display,
            {
                self.datum = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for datum: {}", e));
                self
            }
            pub fn timestamp<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.timestamp = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for timestamp: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Measurement> for super::Measurement {
            type Error = String;
            fn try_from(value: Measurement) -> Result<Self, String> {
                Ok(Self {
                    datum: value.datum?,
                    timestamp: value.timestamp?,
                })
            }
        }

        impl From<super::Measurement> for Measurement {
            fn from(value: super::Measurement) -> Self {
                Self {
                    datum: Ok(value.datum),
                    timestamp: Ok(value.timestamp),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct MeasurementResultsPage {
            items: Result<Vec<super::Measurement>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for MeasurementResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl MeasurementResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Measurement>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<MeasurementResultsPage> for super::MeasurementResultsPage {
            type Error = String;
            fn try_from(value: MeasurementResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::MeasurementResultsPage> for MeasurementResultsPage {
            fn from(value: super::MeasurementResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct MissingDatum {
            datum_type: Result<super::DatumType, String>,
            start_time: Result<Option<chrono::DateTime<chrono::offset::Utc>>, String>,
        }

        impl Default for MissingDatum {
            fn default() -> Self {
                Self {
                    datum_type: Err("no value supplied for datum_type".to_string()),
                    start_time: Ok(Default::default()),
                }
            }
        }

        impl MissingDatum {
            pub fn datum_type<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::DatumType>,
                T::Error: std::fmt::Display,
            {
                self.datum_type = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for datum_type: {}", e));
                self
            }
            pub fn start_time<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<chrono::DateTime<chrono::offset::Utc>>>,
                T::Error: std::fmt::Display,
            {
                self.start_time = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for start_time: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<MissingDatum> for super::MissingDatum {
            type Error = String;
            fn try_from(value: MissingDatum) -> Result<Self, String> {
                Ok(Self {
                    datum_type: value.datum_type?,
                    start_time: value.start_time?,
                })
            }
        }

        impl From<super::MissingDatum> for MissingDatum {
            fn from(value: super::MissingDatum) -> Self {
                Self {
                    datum_type: Ok(value.datum_type),
                    start_time: Ok(value.start_time),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct PhysicalDisk {
            form_factor: Result<super::PhysicalDiskKind, String>,
            id: Result<uuid::Uuid, String>,
            model: Result<String, String>,
            serial: Result<String, String>,
            sled_id: Result<Option<uuid::Uuid>, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            vendor: Result<String, String>,
        }

        impl Default for PhysicalDisk {
            fn default() -> Self {
                Self {
                    form_factor: Err("no value supplied for form_factor".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    model: Err("no value supplied for model".to_string()),
                    serial: Err("no value supplied for serial".to_string()),
                    sled_id: Ok(Default::default()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                    vendor: Err("no value supplied for vendor".to_string()),
                }
            }
        }

        impl PhysicalDisk {
            pub fn form_factor<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::PhysicalDiskKind>,
                T::Error: std::fmt::Display,
            {
                self.form_factor = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for form_factor: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn model<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.model = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for model: {}", e));
                self
            }
            pub fn serial<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.serial = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for serial: {}", e));
                self
            }
            pub fn sled_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<uuid::Uuid>>,
                T::Error: std::fmt::Display,
            {
                self.sled_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for sled_id: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
            pub fn vendor<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.vendor = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for vendor: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<PhysicalDisk> for super::PhysicalDisk {
            type Error = String;
            fn try_from(value: PhysicalDisk) -> Result<Self, String> {
                Ok(Self {
                    form_factor: value.form_factor?,
                    id: value.id?,
                    model: value.model?,
                    serial: value.serial?,
                    sled_id: value.sled_id?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                    vendor: value.vendor?,
                })
            }
        }

        impl From<super::PhysicalDisk> for PhysicalDisk {
            fn from(value: super::PhysicalDisk) -> Self {
                Self {
                    form_factor: Ok(value.form_factor),
                    id: Ok(value.id),
                    model: Ok(value.model),
                    serial: Ok(value.serial),
                    sled_id: Ok(value.sled_id),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                    vendor: Ok(value.vendor),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct PhysicalDiskResultsPage {
            items: Result<Vec<super::PhysicalDisk>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for PhysicalDiskResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl PhysicalDiskResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::PhysicalDisk>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<PhysicalDiskResultsPage> for super::PhysicalDiskResultsPage {
            type Error = String;
            fn try_from(value: PhysicalDiskResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::PhysicalDiskResultsPage> for PhysicalDiskResultsPage {
            fn from(value: super::PhysicalDiskResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Ping {
            status: Result<super::PingStatus, String>,
        }

        impl Default for Ping {
            fn default() -> Self {
                Self {
                    status: Err("no value supplied for status".to_string()),
                }
            }
        }

        impl Ping {
            pub fn status<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::PingStatus>,
                T::Error: std::fmt::Display,
            {
                self.status = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for status: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Ping> for super::Ping {
            type Error = String;
            fn try_from(value: Ping) -> Result<Self, String> {
                Ok(Self {
                    status: value.status?,
                })
            }
        }

        impl From<super::Ping> for Ping {
            fn from(value: super::Ping) -> Self {
                Self {
                    status: Ok(value.status),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Project {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Project {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl Project {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<Project> for super::Project {
            type Error = String;
            fn try_from(value: Project) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    name: value.name?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::Project> for Project {
            fn from(value: super::Project) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct ProjectCreate {
            description: Result<String, String>,
            name: Result<super::Name, String>,
        }

        impl Default for ProjectCreate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    name: Err("no value supplied for name".to_string()),
                }
            }
        }

        impl ProjectCreate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<ProjectCreate> for super::ProjectCreate {
            type Error = String;
            fn try_from(value: ProjectCreate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    name: value.name?,
                })
            }
        }

        impl From<super::ProjectCreate> for ProjectCreate {
            fn from(value: super::ProjectCreate) -> Self {
                Self {
                    description: Ok(value.description),
                    name: Ok(value.name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct ProjectResultsPage {
            items: Result<Vec<super::Project>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for ProjectResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl ProjectResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Project>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<ProjectResultsPage> for super::ProjectResultsPage {
            type Error = String;
            fn try_from(value: ProjectResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::ProjectResultsPage> for ProjectResultsPage {
            fn from(value: super::ProjectResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct ProjectRolePolicy {
            role_assignments: Result<Vec<super::ProjectRoleRoleAssignment>, String>,
        }

        impl Default for ProjectRolePolicy {
            fn default() -> Self {
                Self {
                    role_assignments: Err("no value supplied for role_assignments".to_string()),
                }
            }
        }

        impl ProjectRolePolicy {
            pub fn role_assignments<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::ProjectRoleRoleAssignment>>,
                T::Error: std::fmt::Display,
            {
                self.role_assignments = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for role_assignments: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<ProjectRolePolicy> for super::ProjectRolePolicy {
            type Error = String;
            fn try_from(value: ProjectRolePolicy) -> Result<Self, String> {
                Ok(Self {
                    role_assignments: value.role_assignments?,
                })
            }
        }

        impl From<super::ProjectRolePolicy> for ProjectRolePolicy {
            fn from(value: super::ProjectRolePolicy) -> Self {
                Self {
                    role_assignments: Ok(value.role_assignments),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct ProjectRoleRoleAssignment {
            identity_id: Result<uuid::Uuid, String>,
            identity_type: Result<super::IdentityType, String>,
            role_name: Result<super::ProjectRole, String>,
        }

        impl Default for ProjectRoleRoleAssignment {
            fn default() -> Self {
                Self {
                    identity_id: Err("no value supplied for identity_id".to_string()),
                    identity_type: Err("no value supplied for identity_type".to_string()),
                    role_name: Err("no value supplied for role_name".to_string()),
                }
            }
        }

        impl ProjectRoleRoleAssignment {
            pub fn identity_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.identity_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for identity_id: {}", e));
                self
            }
            pub fn identity_type<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IdentityType>,
                T::Error: std::fmt::Display,
            {
                self.identity_type = value.try_into().map_err(|e| {
                    format!("error converting supplied value for identity_type: {}", e)
                });
                self
            }
            pub fn role_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ProjectRole>,
                T::Error: std::fmt::Display,
            {
                self.role_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for role_name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<ProjectRoleRoleAssignment> for super::ProjectRoleRoleAssignment {
            type Error = String;
            fn try_from(value: ProjectRoleRoleAssignment) -> Result<Self, String> {
                Ok(Self {
                    identity_id: value.identity_id?,
                    identity_type: value.identity_type?,
                    role_name: value.role_name?,
                })
            }
        }

        impl From<super::ProjectRoleRoleAssignment> for ProjectRoleRoleAssignment {
            fn from(value: super::ProjectRoleRoleAssignment) -> Self {
                Self {
                    identity_id: Ok(value.identity_id),
                    identity_type: Ok(value.identity_type),
                    role_name: Ok(value.role_name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct ProjectUpdate {
            description: Result<Option<String>, String>,
            name: Result<Option<super::Name>, String>,
        }

        impl Default for ProjectUpdate {
            fn default() -> Self {
                Self {
                    description: Ok(Default::default()),
                    name: Ok(Default::default()),
                }
            }
        }

        impl ProjectUpdate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Name>>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<ProjectUpdate> for super::ProjectUpdate {
            type Error = String;
            fn try_from(value: ProjectUpdate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    name: value.name?,
                })
            }
        }

        impl From<super::ProjectUpdate> for ProjectUpdate {
            fn from(value: super::ProjectUpdate) -> Self {
                Self {
                    description: Ok(value.description),
                    name: Ok(value.name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Rack {
            id: Result<uuid::Uuid, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Rack {
            fn default() -> Self {
                Self {
                    id: Err("no value supplied for id".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl Rack {
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<Rack> for super::Rack {
            type Error = String;
            fn try_from(value: Rack) -> Result<Self, String> {
                Ok(Self {
                    id: value.id?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::Rack> for Rack {
            fn from(value: super::Rack) -> Self {
                Self {
                    id: Ok(value.id),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct RackResultsPage {
            items: Result<Vec<super::Rack>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for RackResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl RackResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Rack>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<RackResultsPage> for super::RackResultsPage {
            type Error = String;
            fn try_from(value: RackResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::RackResultsPage> for RackResultsPage {
            fn from(value: super::RackResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Role {
            description: Result<String, String>,
            name: Result<super::RoleName, String>,
        }

        impl Default for Role {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    name: Err("no value supplied for name".to_string()),
                }
            }
        }

        impl Role {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::RoleName>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Role> for super::Role {
            type Error = String;
            fn try_from(value: Role) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    name: value.name?,
                })
            }
        }

        impl From<super::Role> for Role {
            fn from(value: super::Role) -> Self {
                Self {
                    description: Ok(value.description),
                    name: Ok(value.name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct RoleResultsPage {
            items: Result<Vec<super::Role>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for RoleResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl RoleResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Role>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<RoleResultsPage> for super::RoleResultsPage {
            type Error = String;
            fn try_from(value: RoleResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::RoleResultsPage> for RoleResultsPage {
            fn from(value: super::RoleResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Route {
            dst: Result<super::IpNet, String>,
            gw: Result<std::net::IpAddr, String>,
            vid: Result<Option<u16>, String>,
        }

        impl Default for Route {
            fn default() -> Self {
                Self {
                    dst: Err("no value supplied for dst".to_string()),
                    gw: Err("no value supplied for gw".to_string()),
                    vid: Ok(Default::default()),
                }
            }
        }

        impl Route {
            pub fn dst<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IpNet>,
                T::Error: std::fmt::Display,
            {
                self.dst = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for dst: {}", e));
                self
            }
            pub fn gw<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.gw = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for gw: {}", e));
                self
            }
            pub fn vid<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<u16>>,
                T::Error: std::fmt::Display,
            {
                self.vid = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for vid: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Route> for super::Route {
            type Error = String;
            fn try_from(value: Route) -> Result<Self, String> {
                Ok(Self {
                    dst: value.dst?,
                    gw: value.gw?,
                    vid: value.vid?,
                })
            }
        }

        impl From<super::Route> for Route {
            fn from(value: super::Route) -> Self {
                Self {
                    dst: Ok(value.dst),
                    gw: Ok(value.gw),
                    vid: Ok(value.vid),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct RouteConfig {
            routes: Result<Vec<super::Route>, String>,
        }

        impl Default for RouteConfig {
            fn default() -> Self {
                Self {
                    routes: Err("no value supplied for routes".to_string()),
                }
            }
        }

        impl RouteConfig {
            pub fn routes<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Route>>,
                T::Error: std::fmt::Display,
            {
                self.routes = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for routes: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<RouteConfig> for super::RouteConfig {
            type Error = String;
            fn try_from(value: RouteConfig) -> Result<Self, String> {
                Ok(Self {
                    routes: value.routes?,
                })
            }
        }

        impl From<super::RouteConfig> for RouteConfig {
            fn from(value: super::RouteConfig) -> Self {
                Self {
                    routes: Ok(value.routes),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SamlIdentityProvider {
            acs_url: Result<String, String>,
            description: Result<String, String>,
            group_attribute_name: Result<Option<String>, String>,
            id: Result<uuid::Uuid, String>,
            idp_entity_id: Result<String, String>,
            name: Result<super::Name, String>,
            public_cert: Result<Option<String>, String>,
            slo_url: Result<String, String>,
            sp_client_id: Result<String, String>,
            technical_contact_email: Result<String, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for SamlIdentityProvider {
            fn default() -> Self {
                Self {
                    acs_url: Err("no value supplied for acs_url".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    group_attribute_name: Ok(Default::default()),
                    id: Err("no value supplied for id".to_string()),
                    idp_entity_id: Err("no value supplied for idp_entity_id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    public_cert: Ok(Default::default()),
                    slo_url: Err("no value supplied for slo_url".to_string()),
                    sp_client_id: Err("no value supplied for sp_client_id".to_string()),
                    technical_contact_email: Err(
                        "no value supplied for technical_contact_email".to_string()
                    ),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl SamlIdentityProvider {
            pub fn acs_url<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.acs_url = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for acs_url: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn group_attribute_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.group_attribute_name = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for group_attribute_name: {}",
                        e
                    )
                });
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn idp_entity_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.idp_entity_id = value.try_into().map_err(|e| {
                    format!("error converting supplied value for idp_entity_id: {}", e)
                });
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn public_cert<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.public_cert = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for public_cert: {}", e));
                self
            }
            pub fn slo_url<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.slo_url = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for slo_url: {}", e));
                self
            }
            pub fn sp_client_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.sp_client_id = value.try_into().map_err(|e| {
                    format!("error converting supplied value for sp_client_id: {}", e)
                });
                self
            }
            pub fn technical_contact_email<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.technical_contact_email = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for technical_contact_email: {}",
                        e
                    )
                });
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<SamlIdentityProvider> for super::SamlIdentityProvider {
            type Error = String;
            fn try_from(value: SamlIdentityProvider) -> Result<Self, String> {
                Ok(Self {
                    acs_url: value.acs_url?,
                    description: value.description?,
                    group_attribute_name: value.group_attribute_name?,
                    id: value.id?,
                    idp_entity_id: value.idp_entity_id?,
                    name: value.name?,
                    public_cert: value.public_cert?,
                    slo_url: value.slo_url?,
                    sp_client_id: value.sp_client_id?,
                    technical_contact_email: value.technical_contact_email?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::SamlIdentityProvider> for SamlIdentityProvider {
            fn from(value: super::SamlIdentityProvider) -> Self {
                Self {
                    acs_url: Ok(value.acs_url),
                    description: Ok(value.description),
                    group_attribute_name: Ok(value.group_attribute_name),
                    id: Ok(value.id),
                    idp_entity_id: Ok(value.idp_entity_id),
                    name: Ok(value.name),
                    public_cert: Ok(value.public_cert),
                    slo_url: Ok(value.slo_url),
                    sp_client_id: Ok(value.sp_client_id),
                    technical_contact_email: Ok(value.technical_contact_email),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SamlIdentityProviderCreate {
            acs_url: Result<String, String>,
            description: Result<String, String>,
            group_attribute_name: Result<Option<String>, String>,
            idp_entity_id: Result<String, String>,
            idp_metadata_source: Result<super::IdpMetadataSource, String>,
            name: Result<super::Name, String>,
            signing_keypair: Result<Option<super::DerEncodedKeyPair>, String>,
            slo_url: Result<String, String>,
            sp_client_id: Result<String, String>,
            technical_contact_email: Result<String, String>,
        }

        impl Default for SamlIdentityProviderCreate {
            fn default() -> Self {
                Self {
                    acs_url: Err("no value supplied for acs_url".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    group_attribute_name: Ok(Default::default()),
                    idp_entity_id: Err("no value supplied for idp_entity_id".to_string()),
                    idp_metadata_source: Err(
                        "no value supplied for idp_metadata_source".to_string()
                    ),
                    name: Err("no value supplied for name".to_string()),
                    signing_keypair: Ok(Default::default()),
                    slo_url: Err("no value supplied for slo_url".to_string()),
                    sp_client_id: Err("no value supplied for sp_client_id".to_string()),
                    technical_contact_email: Err(
                        "no value supplied for technical_contact_email".to_string()
                    ),
                }
            }
        }

        impl SamlIdentityProviderCreate {
            pub fn acs_url<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.acs_url = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for acs_url: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn group_attribute_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.group_attribute_name = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for group_attribute_name: {}",
                        e
                    )
                });
                self
            }
            pub fn idp_entity_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.idp_entity_id = value.try_into().map_err(|e| {
                    format!("error converting supplied value for idp_entity_id: {}", e)
                });
                self
            }
            pub fn idp_metadata_source<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IdpMetadataSource>,
                T::Error: std::fmt::Display,
            {
                self.idp_metadata_source = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for idp_metadata_source: {}",
                        e
                    )
                });
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn signing_keypair<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::DerEncodedKeyPair>>,
                T::Error: std::fmt::Display,
            {
                self.signing_keypair = value.try_into().map_err(|e| {
                    format!("error converting supplied value for signing_keypair: {}", e)
                });
                self
            }
            pub fn slo_url<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.slo_url = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for slo_url: {}", e));
                self
            }
            pub fn sp_client_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.sp_client_id = value.try_into().map_err(|e| {
                    format!("error converting supplied value for sp_client_id: {}", e)
                });
                self
            }
            pub fn technical_contact_email<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.technical_contact_email = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for technical_contact_email: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<SamlIdentityProviderCreate> for super::SamlIdentityProviderCreate {
            type Error = String;
            fn try_from(value: SamlIdentityProviderCreate) -> Result<Self, String> {
                Ok(Self {
                    acs_url: value.acs_url?,
                    description: value.description?,
                    group_attribute_name: value.group_attribute_name?,
                    idp_entity_id: value.idp_entity_id?,
                    idp_metadata_source: value.idp_metadata_source?,
                    name: value.name?,
                    signing_keypair: value.signing_keypair?,
                    slo_url: value.slo_url?,
                    sp_client_id: value.sp_client_id?,
                    technical_contact_email: value.technical_contact_email?,
                })
            }
        }

        impl From<super::SamlIdentityProviderCreate> for SamlIdentityProviderCreate {
            fn from(value: super::SamlIdentityProviderCreate) -> Self {
                Self {
                    acs_url: Ok(value.acs_url),
                    description: Ok(value.description),
                    group_attribute_name: Ok(value.group_attribute_name),
                    idp_entity_id: Ok(value.idp_entity_id),
                    idp_metadata_source: Ok(value.idp_metadata_source),
                    name: Ok(value.name),
                    signing_keypair: Ok(value.signing_keypair),
                    slo_url: Ok(value.slo_url),
                    sp_client_id: Ok(value.sp_client_id),
                    technical_contact_email: Ok(value.technical_contact_email),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Silo {
            description: Result<String, String>,
            discoverable: Result<bool, String>,
            id: Result<uuid::Uuid, String>,
            identity_mode: Result<super::SiloIdentityMode, String>,
            mapped_fleet_roles:
                Result<std::collections::HashMap<String, Vec<super::FleetRole>>, String>,
            name: Result<super::Name, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Silo {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    discoverable: Err("no value supplied for discoverable".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    identity_mode: Err("no value supplied for identity_mode".to_string()),
                    mapped_fleet_roles: Err("no value supplied for mapped_fleet_roles".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl Silo {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn discoverable<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.discoverable = value.try_into().map_err(|e| {
                    format!("error converting supplied value for discoverable: {}", e)
                });
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn identity_mode<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SiloIdentityMode>,
                T::Error: std::fmt::Display,
            {
                self.identity_mode = value.try_into().map_err(|e| {
                    format!("error converting supplied value for identity_mode: {}", e)
                });
                self
            }
            pub fn mapped_fleet_roles<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::collections::HashMap<String, Vec<super::FleetRole>>>,
                T::Error: std::fmt::Display,
            {
                self.mapped_fleet_roles = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for mapped_fleet_roles: {}",
                        e
                    )
                });
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<Silo> for super::Silo {
            type Error = String;
            fn try_from(value: Silo) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    discoverable: value.discoverable?,
                    id: value.id?,
                    identity_mode: value.identity_mode?,
                    mapped_fleet_roles: value.mapped_fleet_roles?,
                    name: value.name?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::Silo> for Silo {
            fn from(value: super::Silo) -> Self {
                Self {
                    description: Ok(value.description),
                    discoverable: Ok(value.discoverable),
                    id: Ok(value.id),
                    identity_mode: Ok(value.identity_mode),
                    mapped_fleet_roles: Ok(value.mapped_fleet_roles),
                    name: Ok(value.name),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SiloCreate {
            admin_group_name: Result<Option<String>, String>,
            description: Result<String, String>,
            discoverable: Result<bool, String>,
            identity_mode: Result<super::SiloIdentityMode, String>,
            mapped_fleet_roles:
                Result<std::collections::HashMap<String, Vec<super::FleetRole>>, String>,
            name: Result<super::Name, String>,
            quotas: Result<super::SiloQuotasCreate, String>,
            tls_certificates: Result<Vec<super::CertificateCreate>, String>,
        }

        impl Default for SiloCreate {
            fn default() -> Self {
                Self {
                    admin_group_name: Ok(Default::default()),
                    description: Err("no value supplied for description".to_string()),
                    discoverable: Err("no value supplied for discoverable".to_string()),
                    identity_mode: Err("no value supplied for identity_mode".to_string()),
                    mapped_fleet_roles: Ok(Default::default()),
                    name: Err("no value supplied for name".to_string()),
                    quotas: Err("no value supplied for quotas".to_string()),
                    tls_certificates: Err("no value supplied for tls_certificates".to_string()),
                }
            }
        }

        impl SiloCreate {
            pub fn admin_group_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.admin_group_name = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for admin_group_name: {}",
                        e
                    )
                });
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn discoverable<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.discoverable = value.try_into().map_err(|e| {
                    format!("error converting supplied value for discoverable: {}", e)
                });
                self
            }
            pub fn identity_mode<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SiloIdentityMode>,
                T::Error: std::fmt::Display,
            {
                self.identity_mode = value.try_into().map_err(|e| {
                    format!("error converting supplied value for identity_mode: {}", e)
                });
                self
            }
            pub fn mapped_fleet_roles<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::collections::HashMap<String, Vec<super::FleetRole>>>,
                T::Error: std::fmt::Display,
            {
                self.mapped_fleet_roles = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for mapped_fleet_roles: {}",
                        e
                    )
                });
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn quotas<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SiloQuotasCreate>,
                T::Error: std::fmt::Display,
            {
                self.quotas = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for quotas: {}", e));
                self
            }
            pub fn tls_certificates<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::CertificateCreate>>,
                T::Error: std::fmt::Display,
            {
                self.tls_certificates = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for tls_certificates: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<SiloCreate> for super::SiloCreate {
            type Error = String;
            fn try_from(value: SiloCreate) -> Result<Self, String> {
                Ok(Self {
                    admin_group_name: value.admin_group_name?,
                    description: value.description?,
                    discoverable: value.discoverable?,
                    identity_mode: value.identity_mode?,
                    mapped_fleet_roles: value.mapped_fleet_roles?,
                    name: value.name?,
                    quotas: value.quotas?,
                    tls_certificates: value.tls_certificates?,
                })
            }
        }

        impl From<super::SiloCreate> for SiloCreate {
            fn from(value: super::SiloCreate) -> Self {
                Self {
                    admin_group_name: Ok(value.admin_group_name),
                    description: Ok(value.description),
                    discoverable: Ok(value.discoverable),
                    identity_mode: Ok(value.identity_mode),
                    mapped_fleet_roles: Ok(value.mapped_fleet_roles),
                    name: Ok(value.name),
                    quotas: Ok(value.quotas),
                    tls_certificates: Ok(value.tls_certificates),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SiloQuotas {
            cpus: Result<i64, String>,
            memory: Result<super::ByteCount, String>,
            silo_id: Result<uuid::Uuid, String>,
            storage: Result<super::ByteCount, String>,
        }

        impl Default for SiloQuotas {
            fn default() -> Self {
                Self {
                    cpus: Err("no value supplied for cpus".to_string()),
                    memory: Err("no value supplied for memory".to_string()),
                    silo_id: Err("no value supplied for silo_id".to_string()),
                    storage: Err("no value supplied for storage".to_string()),
                }
            }
        }

        impl SiloQuotas {
            pub fn cpus<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<i64>,
                T::Error: std::fmt::Display,
            {
                self.cpus = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for cpus: {}", e));
                self
            }
            pub fn memory<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.memory = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for memory: {}", e));
                self
            }
            pub fn silo_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.silo_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for silo_id: {}", e));
                self
            }
            pub fn storage<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.storage = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for storage: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SiloQuotas> for super::SiloQuotas {
            type Error = String;
            fn try_from(value: SiloQuotas) -> Result<Self, String> {
                Ok(Self {
                    cpus: value.cpus?,
                    memory: value.memory?,
                    silo_id: value.silo_id?,
                    storage: value.storage?,
                })
            }
        }

        impl From<super::SiloQuotas> for SiloQuotas {
            fn from(value: super::SiloQuotas) -> Self {
                Self {
                    cpus: Ok(value.cpus),
                    memory: Ok(value.memory),
                    silo_id: Ok(value.silo_id),
                    storage: Ok(value.storage),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SiloQuotasCreate {
            cpus: Result<i64, String>,
            memory: Result<super::ByteCount, String>,
            storage: Result<super::ByteCount, String>,
        }

        impl Default for SiloQuotasCreate {
            fn default() -> Self {
                Self {
                    cpus: Err("no value supplied for cpus".to_string()),
                    memory: Err("no value supplied for memory".to_string()),
                    storage: Err("no value supplied for storage".to_string()),
                }
            }
        }

        impl SiloQuotasCreate {
            pub fn cpus<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<i64>,
                T::Error: std::fmt::Display,
            {
                self.cpus = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for cpus: {}", e));
                self
            }
            pub fn memory<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.memory = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for memory: {}", e));
                self
            }
            pub fn storage<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.storage = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for storage: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SiloQuotasCreate> for super::SiloQuotasCreate {
            type Error = String;
            fn try_from(value: SiloQuotasCreate) -> Result<Self, String> {
                Ok(Self {
                    cpus: value.cpus?,
                    memory: value.memory?,
                    storage: value.storage?,
                })
            }
        }

        impl From<super::SiloQuotasCreate> for SiloQuotasCreate {
            fn from(value: super::SiloQuotasCreate) -> Self {
                Self {
                    cpus: Ok(value.cpus),
                    memory: Ok(value.memory),
                    storage: Ok(value.storage),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SiloQuotasResultsPage {
            items: Result<Vec<super::SiloQuotas>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for SiloQuotasResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl SiloQuotasResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SiloQuotas>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SiloQuotasResultsPage> for super::SiloQuotasResultsPage {
            type Error = String;
            fn try_from(value: SiloQuotasResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::SiloQuotasResultsPage> for SiloQuotasResultsPage {
            fn from(value: super::SiloQuotasResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SiloQuotasUpdate {
            cpus: Result<Option<i64>, String>,
            memory: Result<Option<super::ByteCount>, String>,
            storage: Result<Option<super::ByteCount>, String>,
        }

        impl Default for SiloQuotasUpdate {
            fn default() -> Self {
                Self {
                    cpus: Ok(Default::default()),
                    memory: Ok(Default::default()),
                    storage: Ok(Default::default()),
                }
            }
        }

        impl SiloQuotasUpdate {
            pub fn cpus<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<i64>>,
                T::Error: std::fmt::Display,
            {
                self.cpus = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for cpus: {}", e));
                self
            }
            pub fn memory<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::ByteCount>>,
                T::Error: std::fmt::Display,
            {
                self.memory = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for memory: {}", e));
                self
            }
            pub fn storage<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::ByteCount>>,
                T::Error: std::fmt::Display,
            {
                self.storage = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for storage: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SiloQuotasUpdate> for super::SiloQuotasUpdate {
            type Error = String;
            fn try_from(value: SiloQuotasUpdate) -> Result<Self, String> {
                Ok(Self {
                    cpus: value.cpus?,
                    memory: value.memory?,
                    storage: value.storage?,
                })
            }
        }

        impl From<super::SiloQuotasUpdate> for SiloQuotasUpdate {
            fn from(value: super::SiloQuotasUpdate) -> Self {
                Self {
                    cpus: Ok(value.cpus),
                    memory: Ok(value.memory),
                    storage: Ok(value.storage),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SiloResultsPage {
            items: Result<Vec<super::Silo>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for SiloResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl SiloResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Silo>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SiloResultsPage> for super::SiloResultsPage {
            type Error = String;
            fn try_from(value: SiloResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::SiloResultsPage> for SiloResultsPage {
            fn from(value: super::SiloResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SiloRolePolicy {
            role_assignments: Result<Vec<super::SiloRoleRoleAssignment>, String>,
        }

        impl Default for SiloRolePolicy {
            fn default() -> Self {
                Self {
                    role_assignments: Err("no value supplied for role_assignments".to_string()),
                }
            }
        }

        impl SiloRolePolicy {
            pub fn role_assignments<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SiloRoleRoleAssignment>>,
                T::Error: std::fmt::Display,
            {
                self.role_assignments = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for role_assignments: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<SiloRolePolicy> for super::SiloRolePolicy {
            type Error = String;
            fn try_from(value: SiloRolePolicy) -> Result<Self, String> {
                Ok(Self {
                    role_assignments: value.role_assignments?,
                })
            }
        }

        impl From<super::SiloRolePolicy> for SiloRolePolicy {
            fn from(value: super::SiloRolePolicy) -> Self {
                Self {
                    role_assignments: Ok(value.role_assignments),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SiloRoleRoleAssignment {
            identity_id: Result<uuid::Uuid, String>,
            identity_type: Result<super::IdentityType, String>,
            role_name: Result<super::SiloRole, String>,
        }

        impl Default for SiloRoleRoleAssignment {
            fn default() -> Self {
                Self {
                    identity_id: Err("no value supplied for identity_id".to_string()),
                    identity_type: Err("no value supplied for identity_type".to_string()),
                    role_name: Err("no value supplied for role_name".to_string()),
                }
            }
        }

        impl SiloRoleRoleAssignment {
            pub fn identity_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.identity_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for identity_id: {}", e));
                self
            }
            pub fn identity_type<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IdentityType>,
                T::Error: std::fmt::Display,
            {
                self.identity_type = value.try_into().map_err(|e| {
                    format!("error converting supplied value for identity_type: {}", e)
                });
                self
            }
            pub fn role_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SiloRole>,
                T::Error: std::fmt::Display,
            {
                self.role_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for role_name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SiloRoleRoleAssignment> for super::SiloRoleRoleAssignment {
            type Error = String;
            fn try_from(value: SiloRoleRoleAssignment) -> Result<Self, String> {
                Ok(Self {
                    identity_id: value.identity_id?,
                    identity_type: value.identity_type?,
                    role_name: value.role_name?,
                })
            }
        }

        impl From<super::SiloRoleRoleAssignment> for SiloRoleRoleAssignment {
            fn from(value: super::SiloRoleRoleAssignment) -> Self {
                Self {
                    identity_id: Ok(value.identity_id),
                    identity_type: Ok(value.identity_type),
                    role_name: Ok(value.role_name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SiloUtilization {
            allocated: Result<super::VirtualResourceCounts, String>,
            provisioned: Result<super::VirtualResourceCounts, String>,
            silo_id: Result<uuid::Uuid, String>,
            silo_name: Result<super::Name, String>,
        }

        impl Default for SiloUtilization {
            fn default() -> Self {
                Self {
                    allocated: Err("no value supplied for allocated".to_string()),
                    provisioned: Err("no value supplied for provisioned".to_string()),
                    silo_id: Err("no value supplied for silo_id".to_string()),
                    silo_name: Err("no value supplied for silo_name".to_string()),
                }
            }
        }

        impl SiloUtilization {
            pub fn allocated<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VirtualResourceCounts>,
                T::Error: std::fmt::Display,
            {
                self.allocated = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for allocated: {}", e));
                self
            }
            pub fn provisioned<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VirtualResourceCounts>,
                T::Error: std::fmt::Display,
            {
                self.provisioned = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for provisioned: {}", e));
                self
            }
            pub fn silo_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.silo_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for silo_id: {}", e));
                self
            }
            pub fn silo_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.silo_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for silo_name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SiloUtilization> for super::SiloUtilization {
            type Error = String;
            fn try_from(value: SiloUtilization) -> Result<Self, String> {
                Ok(Self {
                    allocated: value.allocated?,
                    provisioned: value.provisioned?,
                    silo_id: value.silo_id?,
                    silo_name: value.silo_name?,
                })
            }
        }

        impl From<super::SiloUtilization> for SiloUtilization {
            fn from(value: super::SiloUtilization) -> Self {
                Self {
                    allocated: Ok(value.allocated),
                    provisioned: Ok(value.provisioned),
                    silo_id: Ok(value.silo_id),
                    silo_name: Ok(value.silo_name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SiloUtilizationResultsPage {
            items: Result<Vec<super::SiloUtilization>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for SiloUtilizationResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl SiloUtilizationResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SiloUtilization>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SiloUtilizationResultsPage> for super::SiloUtilizationResultsPage {
            type Error = String;
            fn try_from(value: SiloUtilizationResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::SiloUtilizationResultsPage> for SiloUtilizationResultsPage {
            fn from(value: super::SiloUtilizationResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Sled {
            baseboard: Result<super::Baseboard, String>,
            id: Result<uuid::Uuid, String>,
            provision_state: Result<super::SledProvisionState, String>,
            rack_id: Result<uuid::Uuid, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            usable_hardware_threads: Result<u32, String>,
            usable_physical_ram: Result<super::ByteCount, String>,
        }

        impl Default for Sled {
            fn default() -> Self {
                Self {
                    baseboard: Err("no value supplied for baseboard".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    provision_state: Err("no value supplied for provision_state".to_string()),
                    rack_id: Err("no value supplied for rack_id".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                    usable_hardware_threads: Err(
                        "no value supplied for usable_hardware_threads".to_string()
                    ),
                    usable_physical_ram: Err(
                        "no value supplied for usable_physical_ram".to_string()
                    ),
                }
            }
        }

        impl Sled {
            pub fn baseboard<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Baseboard>,
                T::Error: std::fmt::Display,
            {
                self.baseboard = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for baseboard: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn provision_state<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SledProvisionState>,
                T::Error: std::fmt::Display,
            {
                self.provision_state = value.try_into().map_err(|e| {
                    format!("error converting supplied value for provision_state: {}", e)
                });
                self
            }
            pub fn rack_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.rack_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for rack_id: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
            pub fn usable_hardware_threads<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u32>,
                T::Error: std::fmt::Display,
            {
                self.usable_hardware_threads = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for usable_hardware_threads: {}",
                        e
                    )
                });
                self
            }
            pub fn usable_physical_ram<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.usable_physical_ram = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for usable_physical_ram: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<Sled> for super::Sled {
            type Error = String;
            fn try_from(value: Sled) -> Result<Self, String> {
                Ok(Self {
                    baseboard: value.baseboard?,
                    id: value.id?,
                    provision_state: value.provision_state?,
                    rack_id: value.rack_id?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                    usable_hardware_threads: value.usable_hardware_threads?,
                    usable_physical_ram: value.usable_physical_ram?,
                })
            }
        }

        impl From<super::Sled> for Sled {
            fn from(value: super::Sled) -> Self {
                Self {
                    baseboard: Ok(value.baseboard),
                    id: Ok(value.id),
                    provision_state: Ok(value.provision_state),
                    rack_id: Ok(value.rack_id),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                    usable_hardware_threads: Ok(value.usable_hardware_threads),
                    usable_physical_ram: Ok(value.usable_physical_ram),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SledInstance {
            active_sled_id: Result<uuid::Uuid, String>,
            id: Result<uuid::Uuid, String>,
            memory: Result<i64, String>,
            migration_id: Result<Option<uuid::Uuid>, String>,
            name: Result<super::Name, String>,
            ncpus: Result<i64, String>,
            project_name: Result<super::Name, String>,
            silo_name: Result<super::Name, String>,
            state: Result<super::InstanceState, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for SledInstance {
            fn default() -> Self {
                Self {
                    active_sled_id: Err("no value supplied for active_sled_id".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    memory: Err("no value supplied for memory".to_string()),
                    migration_id: Ok(Default::default()),
                    name: Err("no value supplied for name".to_string()),
                    ncpus: Err("no value supplied for ncpus".to_string()),
                    project_name: Err("no value supplied for project_name".to_string()),
                    silo_name: Err("no value supplied for silo_name".to_string()),
                    state: Err("no value supplied for state".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl SledInstance {
            pub fn active_sled_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.active_sled_id = value.try_into().map_err(|e| {
                    format!("error converting supplied value for active_sled_id: {}", e)
                });
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn memory<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<i64>,
                T::Error: std::fmt::Display,
            {
                self.memory = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for memory: {}", e));
                self
            }
            pub fn migration_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<uuid::Uuid>>,
                T::Error: std::fmt::Display,
            {
                self.migration_id = value.try_into().map_err(|e| {
                    format!("error converting supplied value for migration_id: {}", e)
                });
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn ncpus<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<i64>,
                T::Error: std::fmt::Display,
            {
                self.ncpus = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ncpus: {}", e));
                self
            }
            pub fn project_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.project_name = value.try_into().map_err(|e| {
                    format!("error converting supplied value for project_name: {}", e)
                });
                self
            }
            pub fn silo_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.silo_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for silo_name: {}", e));
                self
            }
            pub fn state<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::InstanceState>,
                T::Error: std::fmt::Display,
            {
                self.state = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for state: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<SledInstance> for super::SledInstance {
            type Error = String;
            fn try_from(value: SledInstance) -> Result<Self, String> {
                Ok(Self {
                    active_sled_id: value.active_sled_id?,
                    id: value.id?,
                    memory: value.memory?,
                    migration_id: value.migration_id?,
                    name: value.name?,
                    ncpus: value.ncpus?,
                    project_name: value.project_name?,
                    silo_name: value.silo_name?,
                    state: value.state?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::SledInstance> for SledInstance {
            fn from(value: super::SledInstance) -> Self {
                Self {
                    active_sled_id: Ok(value.active_sled_id),
                    id: Ok(value.id),
                    memory: Ok(value.memory),
                    migration_id: Ok(value.migration_id),
                    name: Ok(value.name),
                    ncpus: Ok(value.ncpus),
                    project_name: Ok(value.project_name),
                    silo_name: Ok(value.silo_name),
                    state: Ok(value.state),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SledInstanceResultsPage {
            items: Result<Vec<super::SledInstance>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for SledInstanceResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl SledInstanceResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SledInstance>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SledInstanceResultsPage> for super::SledInstanceResultsPage {
            type Error = String;
            fn try_from(value: SledInstanceResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::SledInstanceResultsPage> for SledInstanceResultsPage {
            fn from(value: super::SledInstanceResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SledProvisionStateParams {
            state: Result<super::SledProvisionState, String>,
        }

        impl Default for SledProvisionStateParams {
            fn default() -> Self {
                Self {
                    state: Err("no value supplied for state".to_string()),
                }
            }
        }

        impl SledProvisionStateParams {
            pub fn state<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SledProvisionState>,
                T::Error: std::fmt::Display,
            {
                self.state = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for state: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SledProvisionStateParams> for super::SledProvisionStateParams {
            type Error = String;
            fn try_from(value: SledProvisionStateParams) -> Result<Self, String> {
                Ok(Self {
                    state: value.state?,
                })
            }
        }

        impl From<super::SledProvisionStateParams> for SledProvisionStateParams {
            fn from(value: super::SledProvisionStateParams) -> Self {
                Self {
                    state: Ok(value.state),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SledProvisionStateResponse {
            new_state: Result<super::SledProvisionState, String>,
            old_state: Result<super::SledProvisionState, String>,
        }

        impl Default for SledProvisionStateResponse {
            fn default() -> Self {
                Self {
                    new_state: Err("no value supplied for new_state".to_string()),
                    old_state: Err("no value supplied for old_state".to_string()),
                }
            }
        }

        impl SledProvisionStateResponse {
            pub fn new_state<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SledProvisionState>,
                T::Error: std::fmt::Display,
            {
                self.new_state = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for new_state: {}", e));
                self
            }
            pub fn old_state<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SledProvisionState>,
                T::Error: std::fmt::Display,
            {
                self.old_state = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for old_state: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SledProvisionStateResponse> for super::SledProvisionStateResponse {
            type Error = String;
            fn try_from(value: SledProvisionStateResponse) -> Result<Self, String> {
                Ok(Self {
                    new_state: value.new_state?,
                    old_state: value.old_state?,
                })
            }
        }

        impl From<super::SledProvisionStateResponse> for SledProvisionStateResponse {
            fn from(value: super::SledProvisionStateResponse) -> Self {
                Self {
                    new_state: Ok(value.new_state),
                    old_state: Ok(value.old_state),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SledResultsPage {
            items: Result<Vec<super::Sled>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for SledResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl SledResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Sled>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SledResultsPage> for super::SledResultsPage {
            type Error = String;
            fn try_from(value: SledResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::SledResultsPage> for SledResultsPage {
            fn from(value: super::SledResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Snapshot {
            description: Result<String, String>,
            disk_id: Result<uuid::Uuid, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            project_id: Result<uuid::Uuid, String>,
            size: Result<super::ByteCount, String>,
            state: Result<super::SnapshotState, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Snapshot {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    disk_id: Err("no value supplied for disk_id".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    project_id: Err("no value supplied for project_id".to_string()),
                    size: Err("no value supplied for size".to_string()),
                    state: Err("no value supplied for state".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl Snapshot {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn disk_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.disk_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for disk_id: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn project_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.project_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for project_id: {}", e));
                self
            }
            pub fn size<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.size = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for size: {}", e));
                self
            }
            pub fn state<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SnapshotState>,
                T::Error: std::fmt::Display,
            {
                self.state = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for state: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<Snapshot> for super::Snapshot {
            type Error = String;
            fn try_from(value: Snapshot) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    disk_id: value.disk_id?,
                    id: value.id?,
                    name: value.name?,
                    project_id: value.project_id?,
                    size: value.size?,
                    state: value.state?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::Snapshot> for Snapshot {
            fn from(value: super::Snapshot) -> Self {
                Self {
                    description: Ok(value.description),
                    disk_id: Ok(value.disk_id),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    project_id: Ok(value.project_id),
                    size: Ok(value.size),
                    state: Ok(value.state),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SnapshotCreate {
            description: Result<String, String>,
            disk: Result<super::NameOrId, String>,
            name: Result<super::Name, String>,
        }

        impl Default for SnapshotCreate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    disk: Err("no value supplied for disk".to_string()),
                    name: Err("no value supplied for name".to_string()),
                }
            }
        }

        impl SnapshotCreate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn disk<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::NameOrId>,
                T::Error: std::fmt::Display,
            {
                self.disk = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for disk: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SnapshotCreate> for super::SnapshotCreate {
            type Error = String;
            fn try_from(value: SnapshotCreate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    disk: value.disk?,
                    name: value.name?,
                })
            }
        }

        impl From<super::SnapshotCreate> for SnapshotCreate {
            fn from(value: super::SnapshotCreate) -> Self {
                Self {
                    description: Ok(value.description),
                    disk: Ok(value.disk),
                    name: Ok(value.name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SnapshotResultsPage {
            items: Result<Vec<super::Snapshot>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for SnapshotResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl SnapshotResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Snapshot>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SnapshotResultsPage> for super::SnapshotResultsPage {
            type Error = String;
            fn try_from(value: SnapshotResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::SnapshotResultsPage> for SnapshotResultsPage {
            fn from(value: super::SnapshotResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SshKey {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            public_key: Result<String, String>,
            silo_user_id: Result<uuid::Uuid, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for SshKey {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    public_key: Err("no value supplied for public_key".to_string()),
                    silo_user_id: Err("no value supplied for silo_user_id".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl SshKey {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn public_key<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.public_key = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for public_key: {}", e));
                self
            }
            pub fn silo_user_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.silo_user_id = value.try_into().map_err(|e| {
                    format!("error converting supplied value for silo_user_id: {}", e)
                });
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<SshKey> for super::SshKey {
            type Error = String;
            fn try_from(value: SshKey) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    name: value.name?,
                    public_key: value.public_key?,
                    silo_user_id: value.silo_user_id?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::SshKey> for SshKey {
            fn from(value: super::SshKey) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    public_key: Ok(value.public_key),
                    silo_user_id: Ok(value.silo_user_id),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SshKeyCreate {
            description: Result<String, String>,
            name: Result<super::Name, String>,
            public_key: Result<String, String>,
        }

        impl Default for SshKeyCreate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    public_key: Err("no value supplied for public_key".to_string()),
                }
            }
        }

        impl SshKeyCreate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn public_key<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.public_key = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for public_key: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SshKeyCreate> for super::SshKeyCreate {
            type Error = String;
            fn try_from(value: SshKeyCreate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    name: value.name?,
                    public_key: value.public_key?,
                })
            }
        }

        impl From<super::SshKeyCreate> for SshKeyCreate {
            fn from(value: super::SshKeyCreate) -> Self {
                Self {
                    description: Ok(value.description),
                    name: Ok(value.name),
                    public_key: Ok(value.public_key),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SshKeyResultsPage {
            items: Result<Vec<super::SshKey>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for SshKeyResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl SshKeyResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SshKey>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SshKeyResultsPage> for super::SshKeyResultsPage {
            type Error = String;
            fn try_from(value: SshKeyResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::SshKeyResultsPage> for SshKeyResultsPage {
            fn from(value: super::SshKeyResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Switch {
            baseboard: Result<super::Baseboard, String>,
            id: Result<uuid::Uuid, String>,
            rack_id: Result<uuid::Uuid, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Switch {
            fn default() -> Self {
                Self {
                    baseboard: Err("no value supplied for baseboard".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    rack_id: Err("no value supplied for rack_id".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl Switch {
            pub fn baseboard<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Baseboard>,
                T::Error: std::fmt::Display,
            {
                self.baseboard = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for baseboard: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn rack_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.rack_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for rack_id: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<Switch> for super::Switch {
            type Error = String;
            fn try_from(value: Switch) -> Result<Self, String> {
                Ok(Self {
                    baseboard: value.baseboard?,
                    id: value.id?,
                    rack_id: value.rack_id?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::Switch> for Switch {
            fn from(value: super::Switch) -> Self {
                Self {
                    baseboard: Ok(value.baseboard),
                    id: Ok(value.id),
                    rack_id: Ok(value.rack_id),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchInterfaceConfig {
            kind: Result<super::SwitchInterfaceKind, String>,
            v6_enabled: Result<bool, String>,
        }

        impl Default for SwitchInterfaceConfig {
            fn default() -> Self {
                Self {
                    kind: Err("no value supplied for kind".to_string()),
                    v6_enabled: Err("no value supplied for v6_enabled".to_string()),
                }
            }
        }

        impl SwitchInterfaceConfig {
            pub fn kind<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SwitchInterfaceKind>,
                T::Error: std::fmt::Display,
            {
                self.kind = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for kind: {}", e));
                self
            }
            pub fn v6_enabled<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<bool>,
                T::Error: std::fmt::Display,
            {
                self.v6_enabled = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for v6_enabled: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SwitchInterfaceConfig> for super::SwitchInterfaceConfig {
            type Error = String;
            fn try_from(value: SwitchInterfaceConfig) -> Result<Self, String> {
                Ok(Self {
                    kind: value.kind?,
                    v6_enabled: value.v6_enabled?,
                })
            }
        }

        impl From<super::SwitchInterfaceConfig> for SwitchInterfaceConfig {
            fn from(value: super::SwitchInterfaceConfig) -> Self {
                Self {
                    kind: Ok(value.kind),
                    v6_enabled: Ok(value.v6_enabled),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPort {
            id: Result<uuid::Uuid, String>,
            port_name: Result<String, String>,
            port_settings_id: Result<Option<uuid::Uuid>, String>,
            rack_id: Result<uuid::Uuid, String>,
            switch_location: Result<String, String>,
        }

        impl Default for SwitchPort {
            fn default() -> Self {
                Self {
                    id: Err("no value supplied for id".to_string()),
                    port_name: Err("no value supplied for port_name".to_string()),
                    port_settings_id: Ok(Default::default()),
                    rack_id: Err("no value supplied for rack_id".to_string()),
                    switch_location: Err("no value supplied for switch_location".to_string()),
                }
            }
        }

        impl SwitchPort {
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn port_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.port_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for port_name: {}", e));
                self
            }
            pub fn port_settings_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<uuid::Uuid>>,
                T::Error: std::fmt::Display,
            {
                self.port_settings_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for port_settings_id: {}",
                        e
                    )
                });
                self
            }
            pub fn rack_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.rack_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for rack_id: {}", e));
                self
            }
            pub fn switch_location<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.switch_location = value.try_into().map_err(|e| {
                    format!("error converting supplied value for switch_location: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<SwitchPort> for super::SwitchPort {
            type Error = String;
            fn try_from(value: SwitchPort) -> Result<Self, String> {
                Ok(Self {
                    id: value.id?,
                    port_name: value.port_name?,
                    port_settings_id: value.port_settings_id?,
                    rack_id: value.rack_id?,
                    switch_location: value.switch_location?,
                })
            }
        }

        impl From<super::SwitchPort> for SwitchPort {
            fn from(value: super::SwitchPort) -> Self {
                Self {
                    id: Ok(value.id),
                    port_name: Ok(value.port_name),
                    port_settings_id: Ok(value.port_settings_id),
                    rack_id: Ok(value.rack_id),
                    switch_location: Ok(value.switch_location),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortAddressConfig {
            address: Result<super::IpNet, String>,
            address_lot_block_id: Result<uuid::Uuid, String>,
            interface_name: Result<String, String>,
            port_settings_id: Result<uuid::Uuid, String>,
        }

        impl Default for SwitchPortAddressConfig {
            fn default() -> Self {
                Self {
                    address: Err("no value supplied for address".to_string()),
                    address_lot_block_id: Err(
                        "no value supplied for address_lot_block_id".to_string()
                    ),
                    interface_name: Err("no value supplied for interface_name".to_string()),
                    port_settings_id: Err("no value supplied for port_settings_id".to_string()),
                }
            }
        }

        impl SwitchPortAddressConfig {
            pub fn address<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IpNet>,
                T::Error: std::fmt::Display,
            {
                self.address = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for address: {}", e));
                self
            }
            pub fn address_lot_block_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.address_lot_block_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for address_lot_block_id: {}",
                        e
                    )
                });
                self
            }
            pub fn interface_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.interface_name = value.try_into().map_err(|e| {
                    format!("error converting supplied value for interface_name: {}", e)
                });
                self
            }
            pub fn port_settings_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.port_settings_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for port_settings_id: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortAddressConfig> for super::SwitchPortAddressConfig {
            type Error = String;
            fn try_from(value: SwitchPortAddressConfig) -> Result<Self, String> {
                Ok(Self {
                    address: value.address?,
                    address_lot_block_id: value.address_lot_block_id?,
                    interface_name: value.interface_name?,
                    port_settings_id: value.port_settings_id?,
                })
            }
        }

        impl From<super::SwitchPortAddressConfig> for SwitchPortAddressConfig {
            fn from(value: super::SwitchPortAddressConfig) -> Self {
                Self {
                    address: Ok(value.address),
                    address_lot_block_id: Ok(value.address_lot_block_id),
                    interface_name: Ok(value.interface_name),
                    port_settings_id: Ok(value.port_settings_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortApplySettings {
            port_settings: Result<super::NameOrId, String>,
        }

        impl Default for SwitchPortApplySettings {
            fn default() -> Self {
                Self {
                    port_settings: Err("no value supplied for port_settings".to_string()),
                }
            }
        }

        impl SwitchPortApplySettings {
            pub fn port_settings<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::NameOrId>,
                T::Error: std::fmt::Display,
            {
                self.port_settings = value.try_into().map_err(|e| {
                    format!("error converting supplied value for port_settings: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortApplySettings> for super::SwitchPortApplySettings {
            type Error = String;
            fn try_from(value: SwitchPortApplySettings) -> Result<Self, String> {
                Ok(Self {
                    port_settings: value.port_settings?,
                })
            }
        }

        impl From<super::SwitchPortApplySettings> for SwitchPortApplySettings {
            fn from(value: super::SwitchPortApplySettings) -> Self {
                Self {
                    port_settings: Ok(value.port_settings),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortBgpPeerConfig {
            addr: Result<std::net::IpAddr, String>,
            bgp_config_id: Result<uuid::Uuid, String>,
            interface_name: Result<String, String>,
            port_settings_id: Result<uuid::Uuid, String>,
        }

        impl Default for SwitchPortBgpPeerConfig {
            fn default() -> Self {
                Self {
                    addr: Err("no value supplied for addr".to_string()),
                    bgp_config_id: Err("no value supplied for bgp_config_id".to_string()),
                    interface_name: Err("no value supplied for interface_name".to_string()),
                    port_settings_id: Err("no value supplied for port_settings_id".to_string()),
                }
            }
        }

        impl SwitchPortBgpPeerConfig {
            pub fn addr<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::net::IpAddr>,
                T::Error: std::fmt::Display,
            {
                self.addr = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for addr: {}", e));
                self
            }
            pub fn bgp_config_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.bgp_config_id = value.try_into().map_err(|e| {
                    format!("error converting supplied value for bgp_config_id: {}", e)
                });
                self
            }
            pub fn interface_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.interface_name = value.try_into().map_err(|e| {
                    format!("error converting supplied value for interface_name: {}", e)
                });
                self
            }
            pub fn port_settings_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.port_settings_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for port_settings_id: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortBgpPeerConfig> for super::SwitchPortBgpPeerConfig {
            type Error = String;
            fn try_from(value: SwitchPortBgpPeerConfig) -> Result<Self, String> {
                Ok(Self {
                    addr: value.addr?,
                    bgp_config_id: value.bgp_config_id?,
                    interface_name: value.interface_name?,
                    port_settings_id: value.port_settings_id?,
                })
            }
        }

        impl From<super::SwitchPortBgpPeerConfig> for SwitchPortBgpPeerConfig {
            fn from(value: super::SwitchPortBgpPeerConfig) -> Self {
                Self {
                    addr: Ok(value.addr),
                    bgp_config_id: Ok(value.bgp_config_id),
                    interface_name: Ok(value.interface_name),
                    port_settings_id: Ok(value.port_settings_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortConfig {
            geometry: Result<super::SwitchPortGeometry, String>,
        }

        impl Default for SwitchPortConfig {
            fn default() -> Self {
                Self {
                    geometry: Err("no value supplied for geometry".to_string()),
                }
            }
        }

        impl SwitchPortConfig {
            pub fn geometry<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SwitchPortGeometry>,
                T::Error: std::fmt::Display,
            {
                self.geometry = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for geometry: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortConfig> for super::SwitchPortConfig {
            type Error = String;
            fn try_from(value: SwitchPortConfig) -> Result<Self, String> {
                Ok(Self {
                    geometry: value.geometry?,
                })
            }
        }

        impl From<super::SwitchPortConfig> for SwitchPortConfig {
            fn from(value: super::SwitchPortConfig) -> Self {
                Self {
                    geometry: Ok(value.geometry),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortLinkConfig {
            link_name: Result<String, String>,
            lldp_service_config_id: Result<uuid::Uuid, String>,
            mtu: Result<u16, String>,
            port_settings_id: Result<uuid::Uuid, String>,
        }

        impl Default for SwitchPortLinkConfig {
            fn default() -> Self {
                Self {
                    link_name: Err("no value supplied for link_name".to_string()),
                    lldp_service_config_id: Err(
                        "no value supplied for lldp_service_config_id".to_string()
                    ),
                    mtu: Err("no value supplied for mtu".to_string()),
                    port_settings_id: Err("no value supplied for port_settings_id".to_string()),
                }
            }
        }

        impl SwitchPortLinkConfig {
            pub fn link_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.link_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for link_name: {}", e));
                self
            }
            pub fn lldp_service_config_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.lldp_service_config_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for lldp_service_config_id: {}",
                        e
                    )
                });
                self
            }
            pub fn mtu<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u16>,
                T::Error: std::fmt::Display,
            {
                self.mtu = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for mtu: {}", e));
                self
            }
            pub fn port_settings_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.port_settings_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for port_settings_id: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortLinkConfig> for super::SwitchPortLinkConfig {
            type Error = String;
            fn try_from(value: SwitchPortLinkConfig) -> Result<Self, String> {
                Ok(Self {
                    link_name: value.link_name?,
                    lldp_service_config_id: value.lldp_service_config_id?,
                    mtu: value.mtu?,
                    port_settings_id: value.port_settings_id?,
                })
            }
        }

        impl From<super::SwitchPortLinkConfig> for SwitchPortLinkConfig {
            fn from(value: super::SwitchPortLinkConfig) -> Self {
                Self {
                    link_name: Ok(value.link_name),
                    lldp_service_config_id: Ok(value.lldp_service_config_id),
                    mtu: Ok(value.mtu),
                    port_settings_id: Ok(value.port_settings_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortResultsPage {
            items: Result<Vec<super::SwitchPort>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for SwitchPortResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl SwitchPortResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SwitchPort>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortResultsPage> for super::SwitchPortResultsPage {
            type Error = String;
            fn try_from(value: SwitchPortResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::SwitchPortResultsPage> for SwitchPortResultsPage {
            fn from(value: super::SwitchPortResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortRouteConfig {
            dst: Result<super::IpNet, String>,
            gw: Result<super::IpNet, String>,
            interface_name: Result<String, String>,
            port_settings_id: Result<uuid::Uuid, String>,
            vlan_id: Result<Option<u16>, String>,
        }

        impl Default for SwitchPortRouteConfig {
            fn default() -> Self {
                Self {
                    dst: Err("no value supplied for dst".to_string()),
                    gw: Err("no value supplied for gw".to_string()),
                    interface_name: Err("no value supplied for interface_name".to_string()),
                    port_settings_id: Err("no value supplied for port_settings_id".to_string()),
                    vlan_id: Ok(Default::default()),
                }
            }
        }

        impl SwitchPortRouteConfig {
            pub fn dst<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IpNet>,
                T::Error: std::fmt::Display,
            {
                self.dst = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for dst: {}", e));
                self
            }
            pub fn gw<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::IpNet>,
                T::Error: std::fmt::Display,
            {
                self.gw = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for gw: {}", e));
                self
            }
            pub fn interface_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.interface_name = value.try_into().map_err(|e| {
                    format!("error converting supplied value for interface_name: {}", e)
                });
                self
            }
            pub fn port_settings_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.port_settings_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for port_settings_id: {}",
                        e
                    )
                });
                self
            }
            pub fn vlan_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<u16>>,
                T::Error: std::fmt::Display,
            {
                self.vlan_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for vlan_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortRouteConfig> for super::SwitchPortRouteConfig {
            type Error = String;
            fn try_from(value: SwitchPortRouteConfig) -> Result<Self, String> {
                Ok(Self {
                    dst: value.dst?,
                    gw: value.gw?,
                    interface_name: value.interface_name?,
                    port_settings_id: value.port_settings_id?,
                    vlan_id: value.vlan_id?,
                })
            }
        }

        impl From<super::SwitchPortRouteConfig> for SwitchPortRouteConfig {
            fn from(value: super::SwitchPortRouteConfig) -> Self {
                Self {
                    dst: Ok(value.dst),
                    gw: Ok(value.gw),
                    interface_name: Ok(value.interface_name),
                    port_settings_id: Ok(value.port_settings_id),
                    vlan_id: Ok(value.vlan_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortSettings {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for SwitchPortSettings {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl SwitchPortSettings {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortSettings> for super::SwitchPortSettings {
            type Error = String;
            fn try_from(value: SwitchPortSettings) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    name: value.name?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::SwitchPortSettings> for SwitchPortSettings {
            fn from(value: super::SwitchPortSettings) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortSettingsCreate {
            addresses: Result<std::collections::HashMap<String, super::AddressConfig>, String>,
            bgp_peers: Result<std::collections::HashMap<String, super::BgpPeerConfig>, String>,
            description: Result<String, String>,
            groups: Result<Vec<super::NameOrId>, String>,
            interfaces:
                Result<std::collections::HashMap<String, super::SwitchInterfaceConfig>, String>,
            links: Result<std::collections::HashMap<String, super::LinkConfig>, String>,
            name: Result<super::Name, String>,
            port_config: Result<super::SwitchPortConfig, String>,
            routes: Result<std::collections::HashMap<String, super::RouteConfig>, String>,
        }

        impl Default for SwitchPortSettingsCreate {
            fn default() -> Self {
                Self {
                    addresses: Err("no value supplied for addresses".to_string()),
                    bgp_peers: Err("no value supplied for bgp_peers".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    groups: Err("no value supplied for groups".to_string()),
                    interfaces: Err("no value supplied for interfaces".to_string()),
                    links: Err("no value supplied for links".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    port_config: Err("no value supplied for port_config".to_string()),
                    routes: Err("no value supplied for routes".to_string()),
                }
            }
        }

        impl SwitchPortSettingsCreate {
            pub fn addresses<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::collections::HashMap<String, super::AddressConfig>>,
                T::Error: std::fmt::Display,
            {
                self.addresses = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for addresses: {}", e));
                self
            }
            pub fn bgp_peers<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::collections::HashMap<String, super::BgpPeerConfig>>,
                T::Error: std::fmt::Display,
            {
                self.bgp_peers = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bgp_peers: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn groups<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::NameOrId>>,
                T::Error: std::fmt::Display,
            {
                self.groups = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for groups: {}", e));
                self
            }
            pub fn interfaces<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<
                    std::collections::HashMap<String, super::SwitchInterfaceConfig>,
                >,
                T::Error: std::fmt::Display,
            {
                self.interfaces = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for interfaces: {}", e));
                self
            }
            pub fn links<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::collections::HashMap<String, super::LinkConfig>>,
                T::Error: std::fmt::Display,
            {
                self.links = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for links: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn port_config<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SwitchPortConfig>,
                T::Error: std::fmt::Display,
            {
                self.port_config = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for port_config: {}", e));
                self
            }
            pub fn routes<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<std::collections::HashMap<String, super::RouteConfig>>,
                T::Error: std::fmt::Display,
            {
                self.routes = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for routes: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortSettingsCreate> for super::SwitchPortSettingsCreate {
            type Error = String;
            fn try_from(value: SwitchPortSettingsCreate) -> Result<Self, String> {
                Ok(Self {
                    addresses: value.addresses?,
                    bgp_peers: value.bgp_peers?,
                    description: value.description?,
                    groups: value.groups?,
                    interfaces: value.interfaces?,
                    links: value.links?,
                    name: value.name?,
                    port_config: value.port_config?,
                    routes: value.routes?,
                })
            }
        }

        impl From<super::SwitchPortSettingsCreate> for SwitchPortSettingsCreate {
            fn from(value: super::SwitchPortSettingsCreate) -> Self {
                Self {
                    addresses: Ok(value.addresses),
                    bgp_peers: Ok(value.bgp_peers),
                    description: Ok(value.description),
                    groups: Ok(value.groups),
                    interfaces: Ok(value.interfaces),
                    links: Ok(value.links),
                    name: Ok(value.name),
                    port_config: Ok(value.port_config),
                    routes: Ok(value.routes),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortSettingsGroups {
            port_settings_group_id: Result<uuid::Uuid, String>,
            port_settings_id: Result<uuid::Uuid, String>,
        }

        impl Default for SwitchPortSettingsGroups {
            fn default() -> Self {
                Self {
                    port_settings_group_id: Err(
                        "no value supplied for port_settings_group_id".to_string()
                    ),
                    port_settings_id: Err("no value supplied for port_settings_id".to_string()),
                }
            }
        }

        impl SwitchPortSettingsGroups {
            pub fn port_settings_group_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.port_settings_group_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for port_settings_group_id: {}",
                        e
                    )
                });
                self
            }
            pub fn port_settings_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.port_settings_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for port_settings_id: {}",
                        e
                    )
                });
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortSettingsGroups> for super::SwitchPortSettingsGroups {
            type Error = String;
            fn try_from(value: SwitchPortSettingsGroups) -> Result<Self, String> {
                Ok(Self {
                    port_settings_group_id: value.port_settings_group_id?,
                    port_settings_id: value.port_settings_id?,
                })
            }
        }

        impl From<super::SwitchPortSettingsGroups> for SwitchPortSettingsGroups {
            fn from(value: super::SwitchPortSettingsGroups) -> Self {
                Self {
                    port_settings_group_id: Ok(value.port_settings_group_id),
                    port_settings_id: Ok(value.port_settings_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortSettingsResultsPage {
            items: Result<Vec<super::SwitchPortSettings>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for SwitchPortSettingsResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl SwitchPortSettingsResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SwitchPortSettings>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortSettingsResultsPage> for super::SwitchPortSettingsResultsPage {
            type Error = String;
            fn try_from(value: SwitchPortSettingsResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::SwitchPortSettingsResultsPage> for SwitchPortSettingsResultsPage {
            fn from(value: super::SwitchPortSettingsResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchPortSettingsView {
            addresses: Result<Vec<super::SwitchPortAddressConfig>, String>,
            bgp_peers: Result<Vec<super::SwitchPortBgpPeerConfig>, String>,
            groups: Result<Vec<super::SwitchPortSettingsGroups>, String>,
            interfaces: Result<Vec<super::SwitchInterfaceConfig>, String>,
            link_lldp: Result<Vec<super::LldpServiceConfig>, String>,
            links: Result<Vec<super::SwitchPortLinkConfig>, String>,
            port: Result<super::SwitchPortConfig, String>,
            routes: Result<Vec<super::SwitchPortRouteConfig>, String>,
            settings: Result<super::SwitchPortSettings, String>,
            vlan_interfaces: Result<Vec<super::SwitchVlanInterfaceConfig>, String>,
        }

        impl Default for SwitchPortSettingsView {
            fn default() -> Self {
                Self {
                    addresses: Err("no value supplied for addresses".to_string()),
                    bgp_peers: Err("no value supplied for bgp_peers".to_string()),
                    groups: Err("no value supplied for groups".to_string()),
                    interfaces: Err("no value supplied for interfaces".to_string()),
                    link_lldp: Err("no value supplied for link_lldp".to_string()),
                    links: Err("no value supplied for links".to_string()),
                    port: Err("no value supplied for port".to_string()),
                    routes: Err("no value supplied for routes".to_string()),
                    settings: Err("no value supplied for settings".to_string()),
                    vlan_interfaces: Err("no value supplied for vlan_interfaces".to_string()),
                }
            }
        }

        impl SwitchPortSettingsView {
            pub fn addresses<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SwitchPortAddressConfig>>,
                T::Error: std::fmt::Display,
            {
                self.addresses = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for addresses: {}", e));
                self
            }
            pub fn bgp_peers<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SwitchPortBgpPeerConfig>>,
                T::Error: std::fmt::Display,
            {
                self.bgp_peers = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for bgp_peers: {}", e));
                self
            }
            pub fn groups<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SwitchPortSettingsGroups>>,
                T::Error: std::fmt::Display,
            {
                self.groups = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for groups: {}", e));
                self
            }
            pub fn interfaces<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SwitchInterfaceConfig>>,
                T::Error: std::fmt::Display,
            {
                self.interfaces = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for interfaces: {}", e));
                self
            }
            pub fn link_lldp<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::LldpServiceConfig>>,
                T::Error: std::fmt::Display,
            {
                self.link_lldp = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for link_lldp: {}", e));
                self
            }
            pub fn links<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SwitchPortLinkConfig>>,
                T::Error: std::fmt::Display,
            {
                self.links = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for links: {}", e));
                self
            }
            pub fn port<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SwitchPortConfig>,
                T::Error: std::fmt::Display,
            {
                self.port = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for port: {}", e));
                self
            }
            pub fn routes<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SwitchPortRouteConfig>>,
                T::Error: std::fmt::Display,
            {
                self.routes = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for routes: {}", e));
                self
            }
            pub fn settings<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::SwitchPortSettings>,
                T::Error: std::fmt::Display,
            {
                self.settings = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for settings: {}", e));
                self
            }
            pub fn vlan_interfaces<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::SwitchVlanInterfaceConfig>>,
                T::Error: std::fmt::Display,
            {
                self.vlan_interfaces = value.try_into().map_err(|e| {
                    format!("error converting supplied value for vlan_interfaces: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<SwitchPortSettingsView> for super::SwitchPortSettingsView {
            type Error = String;
            fn try_from(value: SwitchPortSettingsView) -> Result<Self, String> {
                Ok(Self {
                    addresses: value.addresses?,
                    bgp_peers: value.bgp_peers?,
                    groups: value.groups?,
                    interfaces: value.interfaces?,
                    link_lldp: value.link_lldp?,
                    links: value.links?,
                    port: value.port?,
                    routes: value.routes?,
                    settings: value.settings?,
                    vlan_interfaces: value.vlan_interfaces?,
                })
            }
        }

        impl From<super::SwitchPortSettingsView> for SwitchPortSettingsView {
            fn from(value: super::SwitchPortSettingsView) -> Self {
                Self {
                    addresses: Ok(value.addresses),
                    bgp_peers: Ok(value.bgp_peers),
                    groups: Ok(value.groups),
                    interfaces: Ok(value.interfaces),
                    link_lldp: Ok(value.link_lldp),
                    links: Ok(value.links),
                    port: Ok(value.port),
                    routes: Ok(value.routes),
                    settings: Ok(value.settings),
                    vlan_interfaces: Ok(value.vlan_interfaces),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchResultsPage {
            items: Result<Vec<super::Switch>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for SwitchResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl SwitchResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Switch>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SwitchResultsPage> for super::SwitchResultsPage {
            type Error = String;
            fn try_from(value: SwitchResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::SwitchResultsPage> for SwitchResultsPage {
            fn from(value: super::SwitchResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct SwitchVlanInterfaceConfig {
            interface_config_id: Result<uuid::Uuid, String>,
            vlan_id: Result<u16, String>,
        }

        impl Default for SwitchVlanInterfaceConfig {
            fn default() -> Self {
                Self {
                    interface_config_id: Err(
                        "no value supplied for interface_config_id".to_string()
                    ),
                    vlan_id: Err("no value supplied for vlan_id".to_string()),
                }
            }
        }

        impl SwitchVlanInterfaceConfig {
            pub fn interface_config_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.interface_config_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for interface_config_id: {}",
                        e
                    )
                });
                self
            }
            pub fn vlan_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u16>,
                T::Error: std::fmt::Display,
            {
                self.vlan_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for vlan_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<SwitchVlanInterfaceConfig> for super::SwitchVlanInterfaceConfig {
            type Error = String;
            fn try_from(value: SwitchVlanInterfaceConfig) -> Result<Self, String> {
                Ok(Self {
                    interface_config_id: value.interface_config_id?,
                    vlan_id: value.vlan_id?,
                })
            }
        }

        impl From<super::SwitchVlanInterfaceConfig> for SwitchVlanInterfaceConfig {
            fn from(value: super::SwitchVlanInterfaceConfig) -> Self {
                Self {
                    interface_config_id: Ok(value.interface_config_id),
                    vlan_id: Ok(value.vlan_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct UninitializedSled {
            baseboard: Result<super::Baseboard, String>,
            cubby: Result<u16, String>,
            rack_id: Result<uuid::Uuid, String>,
        }

        impl Default for UninitializedSled {
            fn default() -> Self {
                Self {
                    baseboard: Err("no value supplied for baseboard".to_string()),
                    cubby: Err("no value supplied for cubby".to_string()),
                    rack_id: Err("no value supplied for rack_id".to_string()),
                }
            }
        }

        impl UninitializedSled {
            pub fn baseboard<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Baseboard>,
                T::Error: std::fmt::Display,
            {
                self.baseboard = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for baseboard: {}", e));
                self
            }
            pub fn cubby<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u16>,
                T::Error: std::fmt::Display,
            {
                self.cubby = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for cubby: {}", e));
                self
            }
            pub fn rack_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.rack_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for rack_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<UninitializedSled> for super::UninitializedSled {
            type Error = String;
            fn try_from(value: UninitializedSled) -> Result<Self, String> {
                Ok(Self {
                    baseboard: value.baseboard?,
                    cubby: value.cubby?,
                    rack_id: value.rack_id?,
                })
            }
        }

        impl From<super::UninitializedSled> for UninitializedSled {
            fn from(value: super::UninitializedSled) -> Self {
                Self {
                    baseboard: Ok(value.baseboard),
                    cubby: Ok(value.cubby),
                    rack_id: Ok(value.rack_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct UninitializedSledResultsPage {
            items: Result<Vec<super::UninitializedSled>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for UninitializedSledResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl UninitializedSledResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::UninitializedSled>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<UninitializedSledResultsPage> for super::UninitializedSledResultsPage {
            type Error = String;
            fn try_from(value: UninitializedSledResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::UninitializedSledResultsPage> for UninitializedSledResultsPage {
            fn from(value: super::UninitializedSledResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct User {
            display_name: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            silo_id: Result<uuid::Uuid, String>,
        }

        impl Default for User {
            fn default() -> Self {
                Self {
                    display_name: Err("no value supplied for display_name".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    silo_id: Err("no value supplied for silo_id".to_string()),
                }
            }
        }

        impl User {
            pub fn display_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.display_name = value.try_into().map_err(|e| {
                    format!("error converting supplied value for display_name: {}", e)
                });
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn silo_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.silo_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for silo_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<User> for super::User {
            type Error = String;
            fn try_from(value: User) -> Result<Self, String> {
                Ok(Self {
                    display_name: value.display_name?,
                    id: value.id?,
                    silo_id: value.silo_id?,
                })
            }
        }

        impl From<super::User> for User {
            fn from(value: super::User) -> Self {
                Self {
                    display_name: Ok(value.display_name),
                    id: Ok(value.id),
                    silo_id: Ok(value.silo_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct UserBuiltin {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for UserBuiltin {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl UserBuiltin {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<UserBuiltin> for super::UserBuiltin {
            type Error = String;
            fn try_from(value: UserBuiltin) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    name: value.name?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::UserBuiltin> for UserBuiltin {
            fn from(value: super::UserBuiltin) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct UserBuiltinResultsPage {
            items: Result<Vec<super::UserBuiltin>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for UserBuiltinResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl UserBuiltinResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::UserBuiltin>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<UserBuiltinResultsPage> for super::UserBuiltinResultsPage {
            type Error = String;
            fn try_from(value: UserBuiltinResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::UserBuiltinResultsPage> for UserBuiltinResultsPage {
            fn from(value: super::UserBuiltinResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct UserCreate {
            external_id: Result<super::UserId, String>,
            password: Result<super::UserPassword, String>,
        }

        impl Default for UserCreate {
            fn default() -> Self {
                Self {
                    external_id: Err("no value supplied for external_id".to_string()),
                    password: Err("no value supplied for password".to_string()),
                }
            }
        }

        impl UserCreate {
            pub fn external_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::UserId>,
                T::Error: std::fmt::Display,
            {
                self.external_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for external_id: {}", e));
                self
            }
            pub fn password<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::UserPassword>,
                T::Error: std::fmt::Display,
            {
                self.password = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for password: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<UserCreate> for super::UserCreate {
            type Error = String;
            fn try_from(value: UserCreate) -> Result<Self, String> {
                Ok(Self {
                    external_id: value.external_id?,
                    password: value.password?,
                })
            }
        }

        impl From<super::UserCreate> for UserCreate {
            fn from(value: super::UserCreate) -> Self {
                Self {
                    external_id: Ok(value.external_id),
                    password: Ok(value.password),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct UserResultsPage {
            items: Result<Vec<super::User>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for UserResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl UserResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::User>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<UserResultsPage> for super::UserResultsPage {
            type Error = String;
            fn try_from(value: UserResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::UserResultsPage> for UserResultsPage {
            fn from(value: super::UserResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct UsernamePasswordCredentials {
            password: Result<super::Password, String>,
            username: Result<super::UserId, String>,
        }

        impl Default for UsernamePasswordCredentials {
            fn default() -> Self {
                Self {
                    password: Err("no value supplied for password".to_string()),
                    username: Err("no value supplied for username".to_string()),
                }
            }
        }

        impl UsernamePasswordCredentials {
            pub fn password<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Password>,
                T::Error: std::fmt::Display,
            {
                self.password = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for password: {}", e));
                self
            }
            pub fn username<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::UserId>,
                T::Error: std::fmt::Display,
            {
                self.username = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for username: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<UsernamePasswordCredentials> for super::UsernamePasswordCredentials {
            type Error = String;
            fn try_from(value: UsernamePasswordCredentials) -> Result<Self, String> {
                Ok(Self {
                    password: value.password?,
                    username: value.username?,
                })
            }
        }

        impl From<super::UsernamePasswordCredentials> for UsernamePasswordCredentials {
            fn from(value: super::UsernamePasswordCredentials) -> Self {
                Self {
                    password: Ok(value.password),
                    username: Ok(value.username),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Utilization {
            capacity: Result<super::VirtualResourceCounts, String>,
            provisioned: Result<super::VirtualResourceCounts, String>,
        }

        impl Default for Utilization {
            fn default() -> Self {
                Self {
                    capacity: Err("no value supplied for capacity".to_string()),
                    provisioned: Err("no value supplied for provisioned".to_string()),
                }
            }
        }

        impl Utilization {
            pub fn capacity<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VirtualResourceCounts>,
                T::Error: std::fmt::Display,
            {
                self.capacity = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for capacity: {}", e));
                self
            }
            pub fn provisioned<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VirtualResourceCounts>,
                T::Error: std::fmt::Display,
            {
                self.provisioned = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for provisioned: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<Utilization> for super::Utilization {
            type Error = String;
            fn try_from(value: Utilization) -> Result<Self, String> {
                Ok(Self {
                    capacity: value.capacity?,
                    provisioned: value.provisioned?,
                })
            }
        }

        impl From<super::Utilization> for Utilization {
            fn from(value: super::Utilization) -> Self {
                Self {
                    capacity: Ok(value.capacity),
                    provisioned: Ok(value.provisioned),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VirtualResourceCounts {
            cpus: Result<i64, String>,
            memory: Result<super::ByteCount, String>,
            storage: Result<super::ByteCount, String>,
        }

        impl Default for VirtualResourceCounts {
            fn default() -> Self {
                Self {
                    cpus: Err("no value supplied for cpus".to_string()),
                    memory: Err("no value supplied for memory".to_string()),
                    storage: Err("no value supplied for storage".to_string()),
                }
            }
        }

        impl VirtualResourceCounts {
            pub fn cpus<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<i64>,
                T::Error: std::fmt::Display,
            {
                self.cpus = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for cpus: {}", e));
                self
            }
            pub fn memory<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.memory = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for memory: {}", e));
                self
            }
            pub fn storage<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::ByteCount>,
                T::Error: std::fmt::Display,
            {
                self.storage = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for storage: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VirtualResourceCounts> for super::VirtualResourceCounts {
            type Error = String;
            fn try_from(value: VirtualResourceCounts) -> Result<Self, String> {
                Ok(Self {
                    cpus: value.cpus?,
                    memory: value.memory?,
                    storage: value.storage?,
                })
            }
        }

        impl From<super::VirtualResourceCounts> for VirtualResourceCounts {
            fn from(value: super::VirtualResourceCounts) -> Self {
                Self {
                    cpus: Ok(value.cpus),
                    memory: Ok(value.memory),
                    storage: Ok(value.storage),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct Vpc {
            description: Result<String, String>,
            dns_name: Result<super::Name, String>,
            id: Result<uuid::Uuid, String>,
            ipv6_prefix: Result<super::Ipv6Net, String>,
            name: Result<super::Name, String>,
            project_id: Result<uuid::Uuid, String>,
            system_router_id: Result<uuid::Uuid, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        }

        impl Default for Vpc {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    dns_name: Err("no value supplied for dns_name".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    ipv6_prefix: Err("no value supplied for ipv6_prefix".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    project_id: Err("no value supplied for project_id".to_string()),
                    system_router_id: Err("no value supplied for system_router_id".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                }
            }
        }

        impl Vpc {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn dns_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.dns_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for dns_name: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn ipv6_prefix<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Ipv6Net>,
                T::Error: std::fmt::Display,
            {
                self.ipv6_prefix = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ipv6_prefix: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn project_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.project_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for project_id: {}", e));
                self
            }
            pub fn system_router_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.system_router_id = value.try_into().map_err(|e| {
                    format!(
                        "error converting supplied value for system_router_id: {}",
                        e
                    )
                });
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
        }

        impl std::convert::TryFrom<Vpc> for super::Vpc {
            type Error = String;
            fn try_from(value: Vpc) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    dns_name: value.dns_name?,
                    id: value.id?,
                    ipv6_prefix: value.ipv6_prefix?,
                    name: value.name?,
                    project_id: value.project_id?,
                    system_router_id: value.system_router_id?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                })
            }
        }

        impl From<super::Vpc> for Vpc {
            fn from(value: super::Vpc) -> Self {
                Self {
                    description: Ok(value.description),
                    dns_name: Ok(value.dns_name),
                    id: Ok(value.id),
                    ipv6_prefix: Ok(value.ipv6_prefix),
                    name: Ok(value.name),
                    project_id: Ok(value.project_id),
                    system_router_id: Ok(value.system_router_id),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcCreate {
            description: Result<String, String>,
            dns_name: Result<super::Name, String>,
            ipv6_prefix: Result<Option<super::Ipv6Net>, String>,
            name: Result<super::Name, String>,
        }

        impl Default for VpcCreate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    dns_name: Err("no value supplied for dns_name".to_string()),
                    ipv6_prefix: Ok(Default::default()),
                    name: Err("no value supplied for name".to_string()),
                }
            }
        }

        impl VpcCreate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn dns_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.dns_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for dns_name: {}", e));
                self
            }
            pub fn ipv6_prefix<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Ipv6Net>>,
                T::Error: std::fmt::Display,
            {
                self.ipv6_prefix = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ipv6_prefix: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcCreate> for super::VpcCreate {
            type Error = String;
            fn try_from(value: VpcCreate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    dns_name: value.dns_name?,
                    ipv6_prefix: value.ipv6_prefix?,
                    name: value.name?,
                })
            }
        }

        impl From<super::VpcCreate> for VpcCreate {
            fn from(value: super::VpcCreate) -> Self {
                Self {
                    description: Ok(value.description),
                    dns_name: Ok(value.dns_name),
                    ipv6_prefix: Ok(value.ipv6_prefix),
                    name: Ok(value.name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcFirewallRule {
            action: Result<super::VpcFirewallRuleAction, String>,
            description: Result<String, String>,
            direction: Result<super::VpcFirewallRuleDirection, String>,
            filters: Result<super::VpcFirewallRuleFilter, String>,
            id: Result<uuid::Uuid, String>,
            name: Result<super::Name, String>,
            priority: Result<u16, String>,
            status: Result<super::VpcFirewallRuleStatus, String>,
            targets: Result<Vec<super::VpcFirewallRuleTarget>, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            vpc_id: Result<uuid::Uuid, String>,
        }

        impl Default for VpcFirewallRule {
            fn default() -> Self {
                Self {
                    action: Err("no value supplied for action".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    direction: Err("no value supplied for direction".to_string()),
                    filters: Err("no value supplied for filters".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    priority: Err("no value supplied for priority".to_string()),
                    status: Err("no value supplied for status".to_string()),
                    targets: Err("no value supplied for targets".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                    vpc_id: Err("no value supplied for vpc_id".to_string()),
                }
            }
        }

        impl VpcFirewallRule {
            pub fn action<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VpcFirewallRuleAction>,
                T::Error: std::fmt::Display,
            {
                self.action = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for action: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn direction<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VpcFirewallRuleDirection>,
                T::Error: std::fmt::Display,
            {
                self.direction = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for direction: {}", e));
                self
            }
            pub fn filters<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VpcFirewallRuleFilter>,
                T::Error: std::fmt::Display,
            {
                self.filters = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for filters: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn priority<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u16>,
                T::Error: std::fmt::Display,
            {
                self.priority = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for priority: {}", e));
                self
            }
            pub fn status<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VpcFirewallRuleStatus>,
                T::Error: std::fmt::Display,
            {
                self.status = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for status: {}", e));
                self
            }
            pub fn targets<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::VpcFirewallRuleTarget>>,
                T::Error: std::fmt::Display,
            {
                self.targets = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for targets: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
            pub fn vpc_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.vpc_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for vpc_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcFirewallRule> for super::VpcFirewallRule {
            type Error = String;
            fn try_from(value: VpcFirewallRule) -> Result<Self, String> {
                Ok(Self {
                    action: value.action?,
                    description: value.description?,
                    direction: value.direction?,
                    filters: value.filters?,
                    id: value.id?,
                    name: value.name?,
                    priority: value.priority?,
                    status: value.status?,
                    targets: value.targets?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                    vpc_id: value.vpc_id?,
                })
            }
        }

        impl From<super::VpcFirewallRule> for VpcFirewallRule {
            fn from(value: super::VpcFirewallRule) -> Self {
                Self {
                    action: Ok(value.action),
                    description: Ok(value.description),
                    direction: Ok(value.direction),
                    filters: Ok(value.filters),
                    id: Ok(value.id),
                    name: Ok(value.name),
                    priority: Ok(value.priority),
                    status: Ok(value.status),
                    targets: Ok(value.targets),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                    vpc_id: Ok(value.vpc_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcFirewallRuleFilter {
            hosts: Result<Option<Vec<super::VpcFirewallRuleHostFilter>>, String>,
            ports: Result<Option<Vec<super::L4PortRange>>, String>,
            protocols: Result<Option<Vec<super::VpcFirewallRuleProtocol>>, String>,
        }

        impl Default for VpcFirewallRuleFilter {
            fn default() -> Self {
                Self {
                    hosts: Ok(Default::default()),
                    ports: Ok(Default::default()),
                    protocols: Ok(Default::default()),
                }
            }
        }

        impl VpcFirewallRuleFilter {
            pub fn hosts<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<Vec<super::VpcFirewallRuleHostFilter>>>,
                T::Error: std::fmt::Display,
            {
                self.hosts = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for hosts: {}", e));
                self
            }
            pub fn ports<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<Vec<super::L4PortRange>>>,
                T::Error: std::fmt::Display,
            {
                self.ports = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ports: {}", e));
                self
            }
            pub fn protocols<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<Vec<super::VpcFirewallRuleProtocol>>>,
                T::Error: std::fmt::Display,
            {
                self.protocols = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for protocols: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcFirewallRuleFilter> for super::VpcFirewallRuleFilter {
            type Error = String;
            fn try_from(value: VpcFirewallRuleFilter) -> Result<Self, String> {
                Ok(Self {
                    hosts: value.hosts?,
                    ports: value.ports?,
                    protocols: value.protocols?,
                })
            }
        }

        impl From<super::VpcFirewallRuleFilter> for VpcFirewallRuleFilter {
            fn from(value: super::VpcFirewallRuleFilter) -> Self {
                Self {
                    hosts: Ok(value.hosts),
                    ports: Ok(value.ports),
                    protocols: Ok(value.protocols),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcFirewallRuleUpdate {
            action: Result<super::VpcFirewallRuleAction, String>,
            description: Result<String, String>,
            direction: Result<super::VpcFirewallRuleDirection, String>,
            filters: Result<super::VpcFirewallRuleFilter, String>,
            name: Result<super::Name, String>,
            priority: Result<u16, String>,
            status: Result<super::VpcFirewallRuleStatus, String>,
            targets: Result<Vec<super::VpcFirewallRuleTarget>, String>,
        }

        impl Default for VpcFirewallRuleUpdate {
            fn default() -> Self {
                Self {
                    action: Err("no value supplied for action".to_string()),
                    description: Err("no value supplied for description".to_string()),
                    direction: Err("no value supplied for direction".to_string()),
                    filters: Err("no value supplied for filters".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    priority: Err("no value supplied for priority".to_string()),
                    status: Err("no value supplied for status".to_string()),
                    targets: Err("no value supplied for targets".to_string()),
                }
            }
        }

        impl VpcFirewallRuleUpdate {
            pub fn action<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VpcFirewallRuleAction>,
                T::Error: std::fmt::Display,
            {
                self.action = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for action: {}", e));
                self
            }
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn direction<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VpcFirewallRuleDirection>,
                T::Error: std::fmt::Display,
            {
                self.direction = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for direction: {}", e));
                self
            }
            pub fn filters<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VpcFirewallRuleFilter>,
                T::Error: std::fmt::Display,
            {
                self.filters = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for filters: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn priority<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<u16>,
                T::Error: std::fmt::Display,
            {
                self.priority = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for priority: {}", e));
                self
            }
            pub fn status<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::VpcFirewallRuleStatus>,
                T::Error: std::fmt::Display,
            {
                self.status = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for status: {}", e));
                self
            }
            pub fn targets<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::VpcFirewallRuleTarget>>,
                T::Error: std::fmt::Display,
            {
                self.targets = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for targets: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcFirewallRuleUpdate> for super::VpcFirewallRuleUpdate {
            type Error = String;
            fn try_from(value: VpcFirewallRuleUpdate) -> Result<Self, String> {
                Ok(Self {
                    action: value.action?,
                    description: value.description?,
                    direction: value.direction?,
                    filters: value.filters?,
                    name: value.name?,
                    priority: value.priority?,
                    status: value.status?,
                    targets: value.targets?,
                })
            }
        }

        impl From<super::VpcFirewallRuleUpdate> for VpcFirewallRuleUpdate {
            fn from(value: super::VpcFirewallRuleUpdate) -> Self {
                Self {
                    action: Ok(value.action),
                    description: Ok(value.description),
                    direction: Ok(value.direction),
                    filters: Ok(value.filters),
                    name: Ok(value.name),
                    priority: Ok(value.priority),
                    status: Ok(value.status),
                    targets: Ok(value.targets),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcFirewallRuleUpdateParams {
            rules: Result<Vec<super::VpcFirewallRuleUpdate>, String>,
        }

        impl Default for VpcFirewallRuleUpdateParams {
            fn default() -> Self {
                Self {
                    rules: Err("no value supplied for rules".to_string()),
                }
            }
        }

        impl VpcFirewallRuleUpdateParams {
            pub fn rules<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::VpcFirewallRuleUpdate>>,
                T::Error: std::fmt::Display,
            {
                self.rules = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for rules: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcFirewallRuleUpdateParams> for super::VpcFirewallRuleUpdateParams {
            type Error = String;
            fn try_from(value: VpcFirewallRuleUpdateParams) -> Result<Self, String> {
                Ok(Self {
                    rules: value.rules?,
                })
            }
        }

        impl From<super::VpcFirewallRuleUpdateParams> for VpcFirewallRuleUpdateParams {
            fn from(value: super::VpcFirewallRuleUpdateParams) -> Self {
                Self {
                    rules: Ok(value.rules),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcFirewallRules {
            rules: Result<Vec<super::VpcFirewallRule>, String>,
        }

        impl Default for VpcFirewallRules {
            fn default() -> Self {
                Self {
                    rules: Err("no value supplied for rules".to_string()),
                }
            }
        }

        impl VpcFirewallRules {
            pub fn rules<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::VpcFirewallRule>>,
                T::Error: std::fmt::Display,
            {
                self.rules = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for rules: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcFirewallRules> for super::VpcFirewallRules {
            type Error = String;
            fn try_from(value: VpcFirewallRules) -> Result<Self, String> {
                Ok(Self {
                    rules: value.rules?,
                })
            }
        }

        impl From<super::VpcFirewallRules> for VpcFirewallRules {
            fn from(value: super::VpcFirewallRules) -> Self {
                Self {
                    rules: Ok(value.rules),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcResultsPage {
            items: Result<Vec<super::Vpc>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for VpcResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl VpcResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::Vpc>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcResultsPage> for super::VpcResultsPage {
            type Error = String;
            fn try_from(value: VpcResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::VpcResultsPage> for VpcResultsPage {
            fn from(value: super::VpcResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcSubnet {
            description: Result<String, String>,
            id: Result<uuid::Uuid, String>,
            ipv4_block: Result<super::Ipv4Net, String>,
            ipv6_block: Result<super::Ipv6Net, String>,
            name: Result<super::Name, String>,
            time_created: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            time_modified: Result<chrono::DateTime<chrono::offset::Utc>, String>,
            vpc_id: Result<uuid::Uuid, String>,
        }

        impl Default for VpcSubnet {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    id: Err("no value supplied for id".to_string()),
                    ipv4_block: Err("no value supplied for ipv4_block".to_string()),
                    ipv6_block: Err("no value supplied for ipv6_block".to_string()),
                    name: Err("no value supplied for name".to_string()),
                    time_created: Err("no value supplied for time_created".to_string()),
                    time_modified: Err("no value supplied for time_modified".to_string()),
                    vpc_id: Err("no value supplied for vpc_id".to_string()),
                }
            }
        }

        impl VpcSubnet {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for id: {}", e));
                self
            }
            pub fn ipv4_block<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Ipv4Net>,
                T::Error: std::fmt::Display,
            {
                self.ipv4_block = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ipv4_block: {}", e));
                self
            }
            pub fn ipv6_block<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Ipv6Net>,
                T::Error: std::fmt::Display,
            {
                self.ipv6_block = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ipv6_block: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
            pub fn time_created<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_created = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_created: {}", e)
                });
                self
            }
            pub fn time_modified<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
                T::Error: std::fmt::Display,
            {
                self.time_modified = value.try_into().map_err(|e| {
                    format!("error converting supplied value for time_modified: {}", e)
                });
                self
            }
            pub fn vpc_id<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<uuid::Uuid>,
                T::Error: std::fmt::Display,
            {
                self.vpc_id = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for vpc_id: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcSubnet> for super::VpcSubnet {
            type Error = String;
            fn try_from(value: VpcSubnet) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    id: value.id?,
                    ipv4_block: value.ipv4_block?,
                    ipv6_block: value.ipv6_block?,
                    name: value.name?,
                    time_created: value.time_created?,
                    time_modified: value.time_modified?,
                    vpc_id: value.vpc_id?,
                })
            }
        }

        impl From<super::VpcSubnet> for VpcSubnet {
            fn from(value: super::VpcSubnet) -> Self {
                Self {
                    description: Ok(value.description),
                    id: Ok(value.id),
                    ipv4_block: Ok(value.ipv4_block),
                    ipv6_block: Ok(value.ipv6_block),
                    name: Ok(value.name),
                    time_created: Ok(value.time_created),
                    time_modified: Ok(value.time_modified),
                    vpc_id: Ok(value.vpc_id),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcSubnetCreate {
            description: Result<String, String>,
            ipv4_block: Result<super::Ipv4Net, String>,
            ipv6_block: Result<Option<super::Ipv6Net>, String>,
            name: Result<super::Name, String>,
        }

        impl Default for VpcSubnetCreate {
            fn default() -> Self {
                Self {
                    description: Err("no value supplied for description".to_string()),
                    ipv4_block: Err("no value supplied for ipv4_block".to_string()),
                    ipv6_block: Ok(Default::default()),
                    name: Err("no value supplied for name".to_string()),
                }
            }
        }

        impl VpcSubnetCreate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<String>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn ipv4_block<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Ipv4Net>,
                T::Error: std::fmt::Display,
            {
                self.ipv4_block = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ipv4_block: {}", e));
                self
            }
            pub fn ipv6_block<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Ipv6Net>>,
                T::Error: std::fmt::Display,
            {
                self.ipv6_block = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for ipv6_block: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<super::Name>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcSubnetCreate> for super::VpcSubnetCreate {
            type Error = String;
            fn try_from(value: VpcSubnetCreate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    ipv4_block: value.ipv4_block?,
                    ipv6_block: value.ipv6_block?,
                    name: value.name?,
                })
            }
        }

        impl From<super::VpcSubnetCreate> for VpcSubnetCreate {
            fn from(value: super::VpcSubnetCreate) -> Self {
                Self {
                    description: Ok(value.description),
                    ipv4_block: Ok(value.ipv4_block),
                    ipv6_block: Ok(value.ipv6_block),
                    name: Ok(value.name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcSubnetResultsPage {
            items: Result<Vec<super::VpcSubnet>, String>,
            next_page: Result<Option<String>, String>,
        }

        impl Default for VpcSubnetResultsPage {
            fn default() -> Self {
                Self {
                    items: Err("no value supplied for items".to_string()),
                    next_page: Ok(Default::default()),
                }
            }
        }

        impl VpcSubnetResultsPage {
            pub fn items<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Vec<super::VpcSubnet>>,
                T::Error: std::fmt::Display,
            {
                self.items = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for items: {}", e));
                self
            }
            pub fn next_page<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.next_page = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for next_page: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcSubnetResultsPage> for super::VpcSubnetResultsPage {
            type Error = String;
            fn try_from(value: VpcSubnetResultsPage) -> Result<Self, String> {
                Ok(Self {
                    items: value.items?,
                    next_page: value.next_page?,
                })
            }
        }

        impl From<super::VpcSubnetResultsPage> for VpcSubnetResultsPage {
            fn from(value: super::VpcSubnetResultsPage) -> Self {
                Self {
                    items: Ok(value.items),
                    next_page: Ok(value.next_page),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcSubnetUpdate {
            description: Result<Option<String>, String>,
            name: Result<Option<super::Name>, String>,
        }

        impl Default for VpcSubnetUpdate {
            fn default() -> Self {
                Self {
                    description: Ok(Default::default()),
                    name: Ok(Default::default()),
                }
            }
        }

        impl VpcSubnetUpdate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Name>>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcSubnetUpdate> for super::VpcSubnetUpdate {
            type Error = String;
            fn try_from(value: VpcSubnetUpdate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    name: value.name?,
                })
            }
        }

        impl From<super::VpcSubnetUpdate> for VpcSubnetUpdate {
            fn from(value: super::VpcSubnetUpdate) -> Self {
                Self {
                    description: Ok(value.description),
                    name: Ok(value.name),
                }
            }
        }

        #[derive(Clone, Debug)]
        pub struct VpcUpdate {
            description: Result<Option<String>, String>,
            dns_name: Result<Option<super::Name>, String>,
            name: Result<Option<super::Name>, String>,
        }

        impl Default for VpcUpdate {
            fn default() -> Self {
                Self {
                    description: Ok(Default::default()),
                    dns_name: Ok(Default::default()),
                    name: Ok(Default::default()),
                }
            }
        }

        impl VpcUpdate {
            pub fn description<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<String>>,
                T::Error: std::fmt::Display,
            {
                self.description = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for description: {}", e));
                self
            }
            pub fn dns_name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Name>>,
                T::Error: std::fmt::Display,
            {
                self.dns_name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for dns_name: {}", e));
                self
            }
            pub fn name<T>(mut self, value: T) -> Self
            where
                T: std::convert::TryInto<Option<super::Name>>,
                T::Error: std::fmt::Display,
            {
                self.name = value
                    .try_into()
                    .map_err(|e| format!("error converting supplied value for name: {}", e));
                self
            }
        }

        impl std::convert::TryFrom<VpcUpdate> for super::VpcUpdate {
            type Error = String;
            fn try_from(value: VpcUpdate) -> Result<Self, String> {
                Ok(Self {
                    description: value.description?,
                    dns_name: value.dns_name?,
                    name: value.name?,
                })
            }
        }

        impl From<super::VpcUpdate> for VpcUpdate {
            fn from(value: super::VpcUpdate) -> Self {
                Self {
                    description: Ok(value.description),
                    dns_name: Ok(value.dns_name),
                    name: Ok(value.name),
                }
            }
        }
    }

    pub mod defaults {
        pub(super) fn default_bool<const V: bool>() -> bool {
            V
        }

        pub(super) fn instance_create_network_interfaces(
        ) -> super::InstanceNetworkInterfaceAttachment {
            super::InstanceNetworkInterfaceAttachment::Default
        }
    }
}

#[derive(Clone, Debug)]
/// Client for Oxide Region API
///
/// API for interacting with the Oxide control plane
///
/// Version: 0.0.1
pub struct Client {
    pub(crate) baseurl: String,
    pub(crate) client: reqwest::Client,
}

impl Client {
    /// Create a new client.
    ///
    /// `baseurl` is the base URL provided to the internal
    /// `reqwest::Client`, and should include a scheme and hostname,
    /// as well as port and a path stem if applicable.
    pub fn new(baseurl: &str) -> Self {
        #[cfg(not(target_arch = "wasm32"))]
        let client = {
            let dur = std::time::Duration::from_secs(15);
            reqwest::ClientBuilder::new()
                .connect_timeout(dur)
                .timeout(dur)
        };
        #[cfg(target_arch = "wasm32")]
        let client = reqwest::ClientBuilder::new();
        Self::new_with_client(baseurl, client.build().unwrap())
    }

    /// Construct a new client with an existing `reqwest::Client`,
    /// allowing more control over its configuration.
    ///
    /// `baseurl` is the base URL provided to the internal
    /// `reqwest::Client`, and should include a scheme and hostname,
    /// as well as port and a path stem if applicable.
    pub fn new_with_client(baseurl: &str, client: reqwest::Client) -> Self {
        Self {
            baseurl: baseurl.to_string(),
            client,
        }
    }

    /// Get the base URL to which requests are made.
    pub fn baseurl(&self) -> &String {
        &self.baseurl
    }

    /// Get the internal `reqwest::Client` used to make requests.
    pub fn client(&self) -> &reqwest::Client {
        &self.client
    }

    /// Get the version of this API.
    ///
    /// This string is pulled directly from the source OpenAPI
    /// document and may be in any format the API selects.
    pub fn api_version(&self) -> &'static str {
        "0.0.1"
    }
}

pub trait ClientDisksExt {
    /// List disks
    ///
    /// Sends a `GET` request to `/v1/disks`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project
    /// - `sort_by`
    /// ```ignore
    /// let response = client.disk_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn disk_list(&self) -> builder::DiskList;
    /// Create a disk
    ///
    /// Sends a `POST` request to `/v1/disks`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.disk_create()
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn disk_create(&self) -> builder::DiskCreate;
    /// Fetch a disk
    ///
    /// Sends a `GET` request to `/v1/disks/{disk}`
    ///
    /// Arguments:
    /// - `disk`: Name or ID of the disk
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.disk_view()
    ///    .disk(disk)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn disk_view(&self) -> builder::DiskView;
    /// Delete a disk
    ///
    /// Sends a `DELETE` request to `/v1/disks/{disk}`
    ///
    /// Arguments:
    /// - `disk`: Name or ID of the disk
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.disk_delete()
    ///    .disk(disk)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn disk_delete(&self) -> builder::DiskDelete;
    /// Import blocks into a disk
    ///
    /// Sends a `POST` request to `/v1/disks/{disk}/bulk-write`
    ///
    /// Arguments:
    /// - `disk`: Name or ID of the disk
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.disk_bulk_write_import()
    ///    .disk(disk)
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn disk_bulk_write_import(&self) -> builder::DiskBulkWriteImport;
    /// Start importing blocks into a disk
    ///
    /// Start the process of importing blocks into a disk
    ///
    /// Sends a `POST` request to `/v1/disks/{disk}/bulk-write-start`
    ///
    /// Arguments:
    /// - `disk`: Name or ID of the disk
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.disk_bulk_write_import_start()
    ///    .disk(disk)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn disk_bulk_write_import_start(&self) -> builder::DiskBulkWriteImportStart;
    /// Stop importing blocks into a disk
    ///
    /// Stop the process of importing blocks into a disk
    ///
    /// Sends a `POST` request to `/v1/disks/{disk}/bulk-write-stop`
    ///
    /// Arguments:
    /// - `disk`: Name or ID of the disk
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.disk_bulk_write_import_stop()
    ///    .disk(disk)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn disk_bulk_write_import_stop(&self) -> builder::DiskBulkWriteImportStop;
    /// Confirm disk block import completion
    ///
    /// Sends a `POST` request to `/v1/disks/{disk}/finalize`
    ///
    /// Arguments:
    /// - `disk`: Name or ID of the disk
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.disk_finalize_import()
    ///    .disk(disk)
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn disk_finalize_import(&self) -> builder::DiskFinalizeImport;
    /// Fetch disk metrics
    ///
    /// Sends a `GET` request to `/v1/disks/{disk}/metrics/{metric}`
    ///
    /// Arguments:
    /// - `disk`
    /// - `metric`
    /// - `end_time`: An exclusive end time of metrics.
    /// - `limit`: Maximum number of items returned by a single call
    /// - `order`: Query result order
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project
    /// - `start_time`: An inclusive start time of metrics.
    /// ```ignore
    /// let response = client.disk_metrics_list()
    ///    .disk(disk)
    ///    .metric(metric)
    ///    .end_time(end_time)
    ///    .limit(limit)
    ///    .order(order)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .start_time(start_time)
    ///    .send()
    ///    .await;
    /// ```
    fn disk_metrics_list(&self) -> builder::DiskMetricsList;
}

impl ClientDisksExt for Client {
    fn disk_list(&self) -> builder::DiskList {
        builder::DiskList::new(self)
    }

    fn disk_create(&self) -> builder::DiskCreate {
        builder::DiskCreate::new(self)
    }

    fn disk_view(&self) -> builder::DiskView {
        builder::DiskView::new(self)
    }

    fn disk_delete(&self) -> builder::DiskDelete {
        builder::DiskDelete::new(self)
    }

    fn disk_bulk_write_import(&self) -> builder::DiskBulkWriteImport {
        builder::DiskBulkWriteImport::new(self)
    }

    fn disk_bulk_write_import_start(&self) -> builder::DiskBulkWriteImportStart {
        builder::DiskBulkWriteImportStart::new(self)
    }

    fn disk_bulk_write_import_stop(&self) -> builder::DiskBulkWriteImportStop {
        builder::DiskBulkWriteImportStop::new(self)
    }

    fn disk_finalize_import(&self) -> builder::DiskFinalizeImport {
        builder::DiskFinalizeImport::new(self)
    }

    fn disk_metrics_list(&self) -> builder::DiskMetricsList {
        builder::DiskMetricsList::new(self)
    }
}

pub trait ClientFloatingIpsExt {
    /// List all Floating IPs
    ///
    /// Sends a `GET` request to `/v1/floating-ips`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project
    /// - `sort_by`
    /// ```ignore
    /// let response = client.floating_ip_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn floating_ip_list(&self) -> builder::FloatingIpList;
    /// Create a Floating IP
    ///
    /// Sends a `POST` request to `/v1/floating-ips`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.floating_ip_create()
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn floating_ip_create(&self) -> builder::FloatingIpCreate;
    /// Fetch a floating IP
    ///
    /// Sends a `GET` request to `/v1/floating-ips/{floating_ip}`
    ///
    /// Arguments:
    /// - `floating_ip`: Name or ID of the Floating IP
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.floating_ip_view()
    ///    .floating_ip(floating_ip)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn floating_ip_view(&self) -> builder::FloatingIpView;
    /// Delete a Floating IP
    ///
    /// Sends a `DELETE` request to `/v1/floating-ips/{floating_ip}`
    ///
    /// Arguments:
    /// - `floating_ip`: Name or ID of the Floating IP
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.floating_ip_delete()
    ///    .floating_ip(floating_ip)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn floating_ip_delete(&self) -> builder::FloatingIpDelete;
}

impl ClientFloatingIpsExt for Client {
    fn floating_ip_list(&self) -> builder::FloatingIpList {
        builder::FloatingIpList::new(self)
    }

    fn floating_ip_create(&self) -> builder::FloatingIpCreate {
        builder::FloatingIpCreate::new(self)
    }

    fn floating_ip_view(&self) -> builder::FloatingIpView {
        builder::FloatingIpView::new(self)
    }

    fn floating_ip_delete(&self) -> builder::FloatingIpDelete {
        builder::FloatingIpDelete::new(self)
    }
}

pub trait ClientHiddenExt {
    /// Start an OAuth 2.0 Device Authorization Grant
    ///
    /// This endpoint is designed to be accessed from an *unauthenticated* API
    /// client. It generates and records a `device_code` and `user_code` which
    /// must be verified and confirmed prior to a token being granted.
    ///
    /// Sends a `POST` request to `/device/auth`
    ///
    /// ```ignore
    /// let response = client.device_auth_request()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn device_auth_request(&self) -> builder::DeviceAuthRequest;
    /// Confirm an OAuth 2.0 Device Authorization Grant
    ///
    /// This endpoint is designed to be accessed by the user agent (browser),
    /// not the client requesting the token. So we do not actually return the
    /// token here; it will be returned in response to the poll on
    /// `/device/token`.
    ///
    /// Sends a `POST` request to `/device/confirm`
    ///
    /// ```ignore
    /// let response = client.device_auth_confirm()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn device_auth_confirm(&self) -> builder::DeviceAuthConfirm;
    /// Request a device access token
    ///
    /// This endpoint should be polled by the client until the user code is
    /// verified and the grant is confirmed.
    ///
    /// Sends a `POST` request to `/device/token`
    ///
    /// ```ignore
    /// let response = client.device_access_token()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn device_access_token(&self) -> builder::DeviceAccessToken;
    /// Log user out of web console by deleting session on client and server
    ///
    /// Sends a `POST` request to `/v1/logout`
    ///
    /// ```ignore
    /// let response = client.logout()
    ///    .send()
    ///    .await;
    /// ```
    fn logout(&self) -> builder::Logout;
}

impl ClientHiddenExt for Client {
    fn device_auth_request(&self) -> builder::DeviceAuthRequest {
        builder::DeviceAuthRequest::new(self)
    }

    fn device_auth_confirm(&self) -> builder::DeviceAuthConfirm {
        builder::DeviceAuthConfirm::new(self)
    }

    fn device_access_token(&self) -> builder::DeviceAccessToken {
        builder::DeviceAccessToken::new(self)
    }

    fn logout(&self) -> builder::Logout {
        builder::Logout::new(self)
    }
}

pub trait ClientImagesExt {
    /// List images
    ///
    /// List images which are global or scoped to the specified project. The
    /// images are returned sorted by creation date, with the most recent images
    /// appearing first.
    ///
    /// Sends a `GET` request to `/v1/images`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project
    /// - `sort_by`
    /// ```ignore
    /// let response = client.image_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn image_list(&self) -> builder::ImageList;
    /// Create an image
    ///
    /// Create a new image in a project.
    ///
    /// Sends a `POST` request to `/v1/images`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.image_create()
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn image_create(&self) -> builder::ImageCreate;
    /// Fetch an image
    ///
    /// Fetch the details for a specific image in a project.
    ///
    /// Sends a `GET` request to `/v1/images/{image}`
    ///
    /// Arguments:
    /// - `image`: Name or ID of the image
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.image_view()
    ///    .image(image)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn image_view(&self) -> builder::ImageView;
    /// Delete an image
    ///
    /// Permanently delete an image from a project. This operation cannot be
    /// undone. Any instances in the project using the image will continue to
    /// run, however new instances can not be created with this image.
    ///
    /// Sends a `DELETE` request to `/v1/images/{image}`
    ///
    /// Arguments:
    /// - `image`: Name or ID of the image
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.image_delete()
    ///    .image(image)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn image_delete(&self) -> builder::ImageDelete;
    /// Demote a silo image
    ///
    /// Demote a silo image to be visible only to a specified project
    ///
    /// Sends a `POST` request to `/v1/images/{image}/demote`
    ///
    /// Arguments:
    /// - `image`: Name or ID of the image
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.image_demote()
    ///    .image(image)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn image_demote(&self) -> builder::ImageDemote;
    /// Promote a project image
    ///
    /// Promote a project image to be visible to all projects in the silo
    ///
    /// Sends a `POST` request to `/v1/images/{image}/promote`
    ///
    /// Arguments:
    /// - `image`: Name or ID of the image
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.image_promote()
    ///    .image(image)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn image_promote(&self) -> builder::ImagePromote;
}

impl ClientImagesExt for Client {
    fn image_list(&self) -> builder::ImageList {
        builder::ImageList::new(self)
    }

    fn image_create(&self) -> builder::ImageCreate {
        builder::ImageCreate::new(self)
    }

    fn image_view(&self) -> builder::ImageView {
        builder::ImageView::new(self)
    }

    fn image_delete(&self) -> builder::ImageDelete {
        builder::ImageDelete::new(self)
    }

    fn image_demote(&self) -> builder::ImageDemote {
        builder::ImageDemote::new(self)
    }

    fn image_promote(&self) -> builder::ImagePromote {
        builder::ImagePromote::new(self)
    }
}

pub trait ClientInstancesExt {
    /// List instances
    ///
    /// Sends a `GET` request to `/v1/instances`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project
    /// - `sort_by`
    /// ```ignore
    /// let response = client.instance_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_list(&self) -> builder::InstanceList;
    /// Create an instance
    ///
    /// Sends a `POST` request to `/v1/instances`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.instance_create()
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_create(&self) -> builder::InstanceCreate;
    /// Fetch an instance
    ///
    /// Sends a `GET` request to `/v1/instances/{instance}`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.instance_view()
    ///    .instance(instance)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_view(&self) -> builder::InstanceView;
    /// Delete an instance
    ///
    /// Sends a `DELETE` request to `/v1/instances/{instance}`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.instance_delete()
    ///    .instance(instance)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_delete(&self) -> builder::InstanceDelete;
    /// List an instance's disks
    ///
    /// Sends a `GET` request to `/v1/instances/{instance}/disks`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project
    /// - `sort_by`
    /// ```ignore
    /// let response = client.instance_disk_list()
    ///    .instance(instance)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_disk_list(&self) -> builder::InstanceDiskList;
    /// Attach a disk to an instance
    ///
    /// Sends a `POST` request to `/v1/instances/{instance}/disks/attach`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.instance_disk_attach()
    ///    .instance(instance)
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_disk_attach(&self) -> builder::InstanceDiskAttach;
    /// Detach a disk from an instance
    ///
    /// Sends a `POST` request to `/v1/instances/{instance}/disks/detach`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.instance_disk_detach()
    ///    .instance(instance)
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_disk_detach(&self) -> builder::InstanceDiskDetach;
    /// List external IP addresses
    ///
    /// Sends a `GET` request to `/v1/instances/{instance}/external-ips`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.instance_external_ip_list()
    ///    .instance(instance)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_external_ip_list(&self) -> builder::InstanceExternalIpList;
    /// Migrate an instance
    ///
    /// Sends a `POST` request to `/v1/instances/{instance}/migrate`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.instance_migrate()
    ///    .instance(instance)
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_migrate(&self) -> builder::InstanceMigrate;
    /// Reboot an instance
    ///
    /// Sends a `POST` request to `/v1/instances/{instance}/reboot`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.instance_reboot()
    ///    .instance(instance)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_reboot(&self) -> builder::InstanceReboot;
    /// Fetch an instance's serial console
    ///
    /// Sends a `GET` request to `/v1/instances/{instance}/serial-console`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `from_start`: Character index in the serial buffer from which to read,
    ///   counting the bytes output since instance start. If this is not
    ///   provided, `most_recent` must be provided, and if this *is* provided,
    ///   `most_recent` must *not* be provided.
    /// - `max_bytes`: Maximum number of bytes of buffered serial console
    ///   contents to return. If the requested range runs to the end of the
    ///   available buffer, the data returned will be shorter than `max_bytes`.
    /// - `most_recent`: Character index in the serial buffer from which to
    ///   read, counting *backward* from the most recently buffered data
    ///   retrieved from the instance. (See note on `from_start` about mutual
    ///   exclusivity)
    /// - `project`: Name or ID of the project, only required if `instance` is
    ///   provided as a `Name`
    /// ```ignore
    /// let response = client.instance_serial_console()
    ///    .instance(instance)
    ///    .from_start(from_start)
    ///    .max_bytes(max_bytes)
    ///    .most_recent(most_recent)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_serial_console(&self) -> builder::InstanceSerialConsole;
    /// Stream an instance's serial console
    ///
    /// Sends a `GET` request to
    /// `/v1/instances/{instance}/serial-console/stream`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `most_recent`: Character index in the serial buffer from which to
    ///   read, counting *backward* from the most recently buffered data
    ///   retrieved from the instance.
    /// - `project`: Name or ID of the project, only required if `instance` is
    ///   provided as a `Name`
    /// ```ignore
    /// let response = client.instance_serial_console_stream()
    ///    .instance(instance)
    ///    .most_recent(most_recent)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_serial_console_stream(&self) -> builder::InstanceSerialConsoleStream;
    /// Boot an instance
    ///
    /// Sends a `POST` request to `/v1/instances/{instance}/start`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.instance_start()
    ///    .instance(instance)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_start(&self) -> builder::InstanceStart;
    /// Stop an instance
    ///
    /// Sends a `POST` request to `/v1/instances/{instance}/stop`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.instance_stop()
    ///    .instance(instance)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_stop(&self) -> builder::InstanceStop;
    /// List network interfaces
    ///
    /// Sends a `GET` request to `/v1/network-interfaces`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project, only required if `instance` is
    ///   provided as a `Name`
    /// - `sort_by`
    /// ```ignore
    /// let response = client.instance_network_interface_list()
    ///    .instance(instance)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_network_interface_list(&self) -> builder::InstanceNetworkInterfaceList;
    /// Create a network interface
    ///
    /// Sends a `POST` request to `/v1/network-interfaces`
    ///
    /// Arguments:
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project, only required if `instance` is
    ///   provided as a `Name`
    /// - `body`
    /// ```ignore
    /// let response = client.instance_network_interface_create()
    ///    .instance(instance)
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_network_interface_create(&self) -> builder::InstanceNetworkInterfaceCreate;
    /// Fetch a network interface
    ///
    /// Sends a `GET` request to `/v1/network-interfaces/{interface}`
    ///
    /// Arguments:
    /// - `interface`: Name or ID of the network interface
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project, only required if `instance` is
    ///   provided as a `Name`
    /// ```ignore
    /// let response = client.instance_network_interface_view()
    ///    .interface(interface)
    ///    .instance(instance)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_network_interface_view(&self) -> builder::InstanceNetworkInterfaceView;
    /// Update a network interface
    ///
    /// Sends a `PUT` request to `/v1/network-interfaces/{interface}`
    ///
    /// Arguments:
    /// - `interface`: Name or ID of the network interface
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project, only required if `instance` is
    ///   provided as a `Name`
    /// - `body`
    /// ```ignore
    /// let response = client.instance_network_interface_update()
    ///    .interface(interface)
    ///    .instance(instance)
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_network_interface_update(&self) -> builder::InstanceNetworkInterfaceUpdate;
    /// Delete a network interface
    ///
    /// Note that the primary interface for an instance cannot be deleted if
    /// there are any secondary interfaces. A new primary interface must be
    /// designated first. The primary interface can be deleted if there are no
    /// secondary interfaces.
    ///
    /// Sends a `DELETE` request to `/v1/network-interfaces/{interface}`
    ///
    /// Arguments:
    /// - `interface`: Name or ID of the network interface
    /// - `instance`: Name or ID of the instance
    /// - `project`: Name or ID of the project, only required if `instance` is
    ///   provided as a `Name`
    /// ```ignore
    /// let response = client.instance_network_interface_delete()
    ///    .interface(interface)
    ///    .instance(instance)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn instance_network_interface_delete(&self) -> builder::InstanceNetworkInterfaceDelete;
}

impl ClientInstancesExt for Client {
    fn instance_list(&self) -> builder::InstanceList {
        builder::InstanceList::new(self)
    }

    fn instance_create(&self) -> builder::InstanceCreate {
        builder::InstanceCreate::new(self)
    }

    fn instance_view(&self) -> builder::InstanceView {
        builder::InstanceView::new(self)
    }

    fn instance_delete(&self) -> builder::InstanceDelete {
        builder::InstanceDelete::new(self)
    }

    fn instance_disk_list(&self) -> builder::InstanceDiskList {
        builder::InstanceDiskList::new(self)
    }

    fn instance_disk_attach(&self) -> builder::InstanceDiskAttach {
        builder::InstanceDiskAttach::new(self)
    }

    fn instance_disk_detach(&self) -> builder::InstanceDiskDetach {
        builder::InstanceDiskDetach::new(self)
    }

    fn instance_external_ip_list(&self) -> builder::InstanceExternalIpList {
        builder::InstanceExternalIpList::new(self)
    }

    fn instance_migrate(&self) -> builder::InstanceMigrate {
        builder::InstanceMigrate::new(self)
    }

    fn instance_reboot(&self) -> builder::InstanceReboot {
        builder::InstanceReboot::new(self)
    }

    fn instance_serial_console(&self) -> builder::InstanceSerialConsole {
        builder::InstanceSerialConsole::new(self)
    }

    fn instance_serial_console_stream(&self) -> builder::InstanceSerialConsoleStream {
        builder::InstanceSerialConsoleStream::new(self)
    }

    fn instance_start(&self) -> builder::InstanceStart {
        builder::InstanceStart::new(self)
    }

    fn instance_stop(&self) -> builder::InstanceStop {
        builder::InstanceStop::new(self)
    }

    fn instance_network_interface_list(&self) -> builder::InstanceNetworkInterfaceList {
        builder::InstanceNetworkInterfaceList::new(self)
    }

    fn instance_network_interface_create(&self) -> builder::InstanceNetworkInterfaceCreate {
        builder::InstanceNetworkInterfaceCreate::new(self)
    }

    fn instance_network_interface_view(&self) -> builder::InstanceNetworkInterfaceView {
        builder::InstanceNetworkInterfaceView::new(self)
    }

    fn instance_network_interface_update(&self) -> builder::InstanceNetworkInterfaceUpdate {
        builder::InstanceNetworkInterfaceUpdate::new(self)
    }

    fn instance_network_interface_delete(&self) -> builder::InstanceNetworkInterfaceDelete {
        builder::InstanceNetworkInterfaceDelete::new(self)
    }
}

pub trait ClientLoginExt {
    /// Authenticate a user via SAML
    ///
    /// Sends a `POST` request to `/login/{silo_name}/saml/{provider_name}`
    ///
    /// ```ignore
    /// let response = client.login_saml()
    ///    .silo_name(silo_name)
    ///    .provider_name(provider_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn login_saml(&self) -> builder::LoginSaml;
    /// Authenticate a user via username and password
    ///
    /// Sends a `POST` request to `/v1/login/{silo_name}/local`
    ///
    /// ```ignore
    /// let response = client.login_local()
    ///    .silo_name(silo_name)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn login_local(&self) -> builder::LoginLocal;
}

impl ClientLoginExt for Client {
    fn login_saml(&self) -> builder::LoginSaml {
        builder::LoginSaml::new(self)
    }

    fn login_local(&self) -> builder::LoginLocal {
        builder::LoginLocal::new(self)
    }
}

pub trait ClientMetricsExt {
    /// Access metrics data
    ///
    /// Sends a `GET` request to `/v1/metrics/{metric_name}`
    ///
    /// Arguments:
    /// - `metric_name`
    /// - `end_time`: An exclusive end time of metrics.
    /// - `limit`: Maximum number of items returned by a single call
    /// - `order`: Query result order
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project
    /// - `start_time`: An inclusive start time of metrics.
    /// ```ignore
    /// let response = client.silo_metric()
    ///    .metric_name(metric_name)
    ///    .end_time(end_time)
    ///    .limit(limit)
    ///    .order(order)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .start_time(start_time)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_metric(&self) -> builder::SiloMetric;
}

impl ClientMetricsExt for Client {
    fn silo_metric(&self) -> builder::SiloMetric {
        builder::SiloMetric::new(self)
    }
}

pub trait ClientPolicyExt {
    /// Fetch the top-level IAM policy
    ///
    /// Sends a `GET` request to `/v1/system/policy`
    ///
    /// ```ignore
    /// let response = client.system_policy_view()
    ///    .send()
    ///    .await;
    /// ```
    fn system_policy_view(&self) -> builder::SystemPolicyView;
    /// Update the top-level IAM policy
    ///
    /// Sends a `PUT` request to `/v1/system/policy`
    ///
    /// ```ignore
    /// let response = client.system_policy_update()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn system_policy_update(&self) -> builder::SystemPolicyUpdate;
}

impl ClientPolicyExt for Client {
    fn system_policy_view(&self) -> builder::SystemPolicyView {
        builder::SystemPolicyView::new(self)
    }

    fn system_policy_update(&self) -> builder::SystemPolicyUpdate {
        builder::SystemPolicyUpdate::new(self)
    }
}

pub trait ClientProjectsExt {
    /// List all IP Pools that can be used by a given project
    ///
    /// Sends a `GET` request to `/v1/ip-pools`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project
    /// - `sort_by`
    /// ```ignore
    /// let response = client.project_ip_pool_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn project_ip_pool_list(&self) -> builder::ProjectIpPoolList;
    /// Fetch an IP pool
    ///
    /// Sends a `GET` request to `/v1/ip-pools/{pool}`
    ///
    /// Arguments:
    /// - `pool`: Name or ID of the IP pool
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.project_ip_pool_view()
    ///    .pool(pool)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn project_ip_pool_view(&self) -> builder::ProjectIpPoolView;
    /// List projects
    ///
    /// Sends a `GET` request to `/v1/projects`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.project_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn project_list(&self) -> builder::ProjectList;
    /// Create a project
    ///
    /// Sends a `POST` request to `/v1/projects`
    ///
    /// ```ignore
    /// let response = client.project_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn project_create(&self) -> builder::ProjectCreate;
    /// Fetch a project
    ///
    /// Sends a `GET` request to `/v1/projects/{project}`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.project_view()
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn project_view(&self) -> builder::ProjectView;
    /// Update a project
    ///
    /// Sends a `PUT` request to `/v1/projects/{project}`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.project_update()
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn project_update(&self) -> builder::ProjectUpdate;
    /// Delete a project
    ///
    /// Sends a `DELETE` request to `/v1/projects/{project}`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.project_delete()
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn project_delete(&self) -> builder::ProjectDelete;
    /// Fetch a project's IAM policy
    ///
    /// Sends a `GET` request to `/v1/projects/{project}/policy`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.project_policy_view()
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn project_policy_view(&self) -> builder::ProjectPolicyView;
    /// Update a project's IAM policy
    ///
    /// Sends a `PUT` request to `/v1/projects/{project}/policy`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.project_policy_update()
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn project_policy_update(&self) -> builder::ProjectPolicyUpdate;
}

impl ClientProjectsExt for Client {
    fn project_ip_pool_list(&self) -> builder::ProjectIpPoolList {
        builder::ProjectIpPoolList::new(self)
    }

    fn project_ip_pool_view(&self) -> builder::ProjectIpPoolView {
        builder::ProjectIpPoolView::new(self)
    }

    fn project_list(&self) -> builder::ProjectList {
        builder::ProjectList::new(self)
    }

    fn project_create(&self) -> builder::ProjectCreate {
        builder::ProjectCreate::new(self)
    }

    fn project_view(&self) -> builder::ProjectView {
        builder::ProjectView::new(self)
    }

    fn project_update(&self) -> builder::ProjectUpdate {
        builder::ProjectUpdate::new(self)
    }

    fn project_delete(&self) -> builder::ProjectDelete {
        builder::ProjectDelete::new(self)
    }

    fn project_policy_view(&self) -> builder::ProjectPolicyView {
        builder::ProjectPolicyView::new(self)
    }

    fn project_policy_update(&self) -> builder::ProjectPolicyUpdate {
        builder::ProjectPolicyUpdate::new(self)
    }
}

pub trait ClientRolesExt {
    /// List built-in roles
    ///
    /// Sends a `GET` request to `/v1/system/roles`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// ```ignore
    /// let response = client.role_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .send()
    ///    .await;
    /// ```
    fn role_list(&self) -> builder::RoleList;
    /// Fetch a built-in role
    ///
    /// Sends a `GET` request to `/v1/system/roles/{role_name}`
    ///
    /// Arguments:
    /// - `role_name`: The built-in role's unique name.
    /// ```ignore
    /// let response = client.role_view()
    ///    .role_name(role_name)
    ///    .send()
    ///    .await;
    /// ```
    fn role_view(&self) -> builder::RoleView;
}

impl ClientRolesExt for Client {
    fn role_list(&self) -> builder::RoleList {
        builder::RoleList::new(self)
    }

    fn role_view(&self) -> builder::RoleView {
        builder::RoleView::new(self)
    }
}

pub trait ClientSessionExt {
    /// Fetch the user associated with the current session
    ///
    /// Sends a `GET` request to `/v1/me`
    ///
    /// ```ignore
    /// let response = client.current_user_view()
    ///    .send()
    ///    .await;
    /// ```
    fn current_user_view(&self) -> builder::CurrentUserView;
    /// Fetch the silo groups the current user belongs to
    ///
    /// Sends a `GET` request to `/v1/me/groups`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.current_user_groups()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn current_user_groups(&self) -> builder::CurrentUserGroups;
    /// List SSH public keys
    ///
    /// Lists SSH public keys for the currently authenticated user.
    ///
    /// Sends a `GET` request to `/v1/me/ssh-keys`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.current_user_ssh_key_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn current_user_ssh_key_list(&self) -> builder::CurrentUserSshKeyList;
    /// Create an SSH public key
    ///
    /// Create an SSH public key for the currently authenticated user.
    ///
    /// Sends a `POST` request to `/v1/me/ssh-keys`
    ///
    /// ```ignore
    /// let response = client.current_user_ssh_key_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn current_user_ssh_key_create(&self) -> builder::CurrentUserSshKeyCreate;
    /// Fetch an SSH public key
    ///
    /// Fetch an SSH public key associated with the currently authenticated
    /// user.
    ///
    /// Sends a `GET` request to `/v1/me/ssh-keys/{ssh_key}`
    ///
    /// Arguments:
    /// - `ssh_key`: Name or ID of the SSH key
    /// ```ignore
    /// let response = client.current_user_ssh_key_view()
    ///    .ssh_key(ssh_key)
    ///    .send()
    ///    .await;
    /// ```
    fn current_user_ssh_key_view(&self) -> builder::CurrentUserSshKeyView;
    /// Delete an SSH public key
    ///
    /// Delete an SSH public key associated with the currently authenticated
    /// user.
    ///
    /// Sends a `DELETE` request to `/v1/me/ssh-keys/{ssh_key}`
    ///
    /// Arguments:
    /// - `ssh_key`: Name or ID of the SSH key
    /// ```ignore
    /// let response = client.current_user_ssh_key_delete()
    ///    .ssh_key(ssh_key)
    ///    .send()
    ///    .await;
    /// ```
    fn current_user_ssh_key_delete(&self) -> builder::CurrentUserSshKeyDelete;
}

impl ClientSessionExt for Client {
    fn current_user_view(&self) -> builder::CurrentUserView {
        builder::CurrentUserView::new(self)
    }

    fn current_user_groups(&self) -> builder::CurrentUserGroups {
        builder::CurrentUserGroups::new(self)
    }

    fn current_user_ssh_key_list(&self) -> builder::CurrentUserSshKeyList {
        builder::CurrentUserSshKeyList::new(self)
    }

    fn current_user_ssh_key_create(&self) -> builder::CurrentUserSshKeyCreate {
        builder::CurrentUserSshKeyCreate::new(self)
    }

    fn current_user_ssh_key_view(&self) -> builder::CurrentUserSshKeyView {
        builder::CurrentUserSshKeyView::new(self)
    }

    fn current_user_ssh_key_delete(&self) -> builder::CurrentUserSshKeyDelete {
        builder::CurrentUserSshKeyDelete::new(self)
    }
}

pub trait ClientSilosExt {
    /// List certificates for external endpoints
    ///
    /// Returns a list of TLS certificates used for the external API (for the
    /// current Silo).  These are sorted by creation date, with the most recent
    /// certificates appearing first.
    ///
    /// Sends a `GET` request to `/v1/certificates`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.certificate_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn certificate_list(&self) -> builder::CertificateList;
    /// Create a new system-wide x.509 certificate
    ///
    /// This certificate is automatically used by the Oxide Control plane to
    /// serve external connections.
    ///
    /// Sends a `POST` request to `/v1/certificates`
    ///
    /// ```ignore
    /// let response = client.certificate_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn certificate_create(&self) -> builder::CertificateCreate;
    /// Fetch a certificate
    ///
    /// Returns the details of a specific certificate
    ///
    /// Sends a `GET` request to `/v1/certificates/{certificate}`
    ///
    /// ```ignore
    /// let response = client.certificate_view()
    ///    .certificate(certificate)
    ///    .send()
    ///    .await;
    /// ```
    fn certificate_view(&self) -> builder::CertificateView;
    /// Delete a certificate
    ///
    /// Permanently delete a certificate. This operation cannot be undone.
    ///
    /// Sends a `DELETE` request to `/v1/certificates/{certificate}`
    ///
    /// ```ignore
    /// let response = client.certificate_delete()
    ///    .certificate(certificate)
    ///    .send()
    ///    .await;
    /// ```
    fn certificate_delete(&self) -> builder::CertificateDelete;
    /// List groups
    ///
    /// Sends a `GET` request to `/v1/groups`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.group_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn group_list(&self) -> builder::GroupList;
    /// Fetch group
    ///
    /// Sends a `GET` request to `/v1/groups/{group_id}`
    ///
    /// Arguments:
    /// - `group_id`: ID of the group
    /// ```ignore
    /// let response = client.group_view()
    ///    .group_id(group_id)
    ///    .send()
    ///    .await;
    /// ```
    fn group_view(&self) -> builder::GroupView;
    /// Fetch the current silo's IAM policy
    ///
    /// Sends a `GET` request to `/v1/policy`
    ///
    /// ```ignore
    /// let response = client.policy_view()
    ///    .send()
    ///    .await;
    /// ```
    fn policy_view(&self) -> builder::PolicyView;
    /// Update the current silo's IAM policy
    ///
    /// Sends a `PUT` request to `/v1/policy`
    ///
    /// ```ignore
    /// let response = client.policy_update()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn policy_update(&self) -> builder::PolicyUpdate;
    /// List users
    ///
    /// Sends a `GET` request to `/v1/users`
    ///
    /// Arguments:
    /// - `group`
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.user_list()
    ///    .group(group)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn user_list(&self) -> builder::UserList;
    /// View the resource utilization of the user's current silo
    ///
    /// Sends a `GET` request to `/v1/utilization`
    ///
    /// ```ignore
    /// let response = client.utilization_view()
    ///    .send()
    ///    .await;
    /// ```
    fn utilization_view(&self) -> builder::UtilizationView;
}

impl ClientSilosExt for Client {
    fn certificate_list(&self) -> builder::CertificateList {
        builder::CertificateList::new(self)
    }

    fn certificate_create(&self) -> builder::CertificateCreate {
        builder::CertificateCreate::new(self)
    }

    fn certificate_view(&self) -> builder::CertificateView {
        builder::CertificateView::new(self)
    }

    fn certificate_delete(&self) -> builder::CertificateDelete {
        builder::CertificateDelete::new(self)
    }

    fn group_list(&self) -> builder::GroupList {
        builder::GroupList::new(self)
    }

    fn group_view(&self) -> builder::GroupView {
        builder::GroupView::new(self)
    }

    fn policy_view(&self) -> builder::PolicyView {
        builder::PolicyView::new(self)
    }

    fn policy_update(&self) -> builder::PolicyUpdate {
        builder::PolicyUpdate::new(self)
    }

    fn user_list(&self) -> builder::UserList {
        builder::UserList::new(self)
    }

    fn utilization_view(&self) -> builder::UtilizationView {
        builder::UtilizationView::new(self)
    }
}

pub trait ClientSnapshotsExt {
    /// List snapshots
    ///
    /// Sends a `GET` request to `/v1/snapshots`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project
    /// - `sort_by`
    /// ```ignore
    /// let response = client.snapshot_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn snapshot_list(&self) -> builder::SnapshotList;
    /// Create a snapshot
    ///
    /// Creates a point-in-time snapshot from a disk.
    ///
    /// Sends a `POST` request to `/v1/snapshots`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.snapshot_create()
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn snapshot_create(&self) -> builder::SnapshotCreate;
    /// Fetch a snapshot
    ///
    /// Sends a `GET` request to `/v1/snapshots/{snapshot}`
    ///
    /// Arguments:
    /// - `snapshot`: Name or ID of the snapshot
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.snapshot_view()
    ///    .snapshot(snapshot)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn snapshot_view(&self) -> builder::SnapshotView;
    /// Delete a snapshot
    ///
    /// Sends a `DELETE` request to `/v1/snapshots/{snapshot}`
    ///
    /// Arguments:
    /// - `snapshot`: Name or ID of the snapshot
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.snapshot_delete()
    ///    .snapshot(snapshot)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn snapshot_delete(&self) -> builder::SnapshotDelete;
}

impl ClientSnapshotsExt for Client {
    fn snapshot_list(&self) -> builder::SnapshotList {
        builder::SnapshotList::new(self)
    }

    fn snapshot_create(&self) -> builder::SnapshotCreate {
        builder::SnapshotCreate::new(self)
    }

    fn snapshot_view(&self) -> builder::SnapshotView {
        builder::SnapshotView::new(self)
    }

    fn snapshot_delete(&self) -> builder::SnapshotDelete {
        builder::SnapshotDelete::new(self)
    }
}

pub trait ClientSystemHardwareExt {
    /// List physical disks
    ///
    /// Sends a `GET` request to `/v1/system/hardware/disks`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.physical_disk_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn physical_disk_list(&self) -> builder::PhysicalDiskList;
    /// List racks
    ///
    /// Sends a `GET` request to `/v1/system/hardware/racks`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.rack_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn rack_list(&self) -> builder::RackList;
    /// Fetch a rack
    ///
    /// Sends a `GET` request to `/v1/system/hardware/racks/{rack_id}`
    ///
    /// Arguments:
    /// - `rack_id`: The rack's unique ID.
    /// ```ignore
    /// let response = client.rack_view()
    ///    .rack_id(rack_id)
    ///    .send()
    ///    .await;
    /// ```
    fn rack_view(&self) -> builder::RackView;
    /// List sleds
    ///
    /// Sends a `GET` request to `/v1/system/hardware/sleds`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.sled_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn sled_list(&self) -> builder::SledList;
    /// Add a sled to an initialized rack
    ///
    /// Sends a `POST` request to `/v1/system/hardware/sleds`
    ///
    /// ```ignore
    /// let response = client.add_sled_to_initialized_rack()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn add_sled_to_initialized_rack(&self) -> builder::AddSledToInitializedRack;
    /// Fetch a sled
    ///
    /// Sends a `GET` request to `/v1/system/hardware/sleds/{sled_id}`
    ///
    /// Arguments:
    /// - `sled_id`: ID of the sled
    /// ```ignore
    /// let response = client.sled_view()
    ///    .sled_id(sled_id)
    ///    .send()
    ///    .await;
    /// ```
    fn sled_view(&self) -> builder::SledView;
    /// List physical disks attached to sleds
    ///
    /// Sends a `GET` request to `/v1/system/hardware/sleds/{sled_id}/disks`
    ///
    /// Arguments:
    /// - `sled_id`: ID of the sled
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.sled_physical_disk_list()
    ///    .sled_id(sled_id)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn sled_physical_disk_list(&self) -> builder::SledPhysicalDiskList;
    /// List instances running on a given sled
    ///
    /// Sends a `GET` request to `/v1/system/hardware/sleds/{sled_id}/instances`
    ///
    /// Arguments:
    /// - `sled_id`: ID of the sled
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.sled_instance_list()
    ///    .sled_id(sled_id)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn sled_instance_list(&self) -> builder::SledInstanceList;
    /// Set the sled's provision state
    ///
    /// Sends a `PUT` request to
    /// `/v1/system/hardware/sleds/{sled_id}/provision-state`
    ///
    /// Arguments:
    /// - `sled_id`: ID of the sled
    /// - `body`
    /// ```ignore
    /// let response = client.sled_set_provision_state()
    ///    .sled_id(sled_id)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn sled_set_provision_state(&self) -> builder::SledSetProvisionState;
    /// List uninitialized sleds in a given rack
    ///
    /// Sends a `GET` request to `/v1/system/hardware/sleds-uninitialized`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// ```ignore
    /// let response = client.sled_list_uninitialized()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .send()
    ///    .await;
    /// ```
    fn sled_list_uninitialized(&self) -> builder::SledListUninitialized;
    /// List switch ports
    ///
    /// Sends a `GET` request to `/v1/system/hardware/switch-port`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// - `switch_port_id`: An optional switch port id to use when listing
    ///   switch ports.
    /// ```ignore
    /// let response = client.networking_switch_port_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .switch_port_id(switch_port_id)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_switch_port_list(&self) -> builder::NetworkingSwitchPortList;
    /// Apply switch port settings
    ///
    /// Sends a `POST` request to
    /// `/v1/system/hardware/switch-port/{port}/settings`
    ///
    /// Arguments:
    /// - `port`: A name to use when selecting switch ports.
    /// - `rack_id`: A rack id to use when selecting switch ports.
    /// - `switch_location`: A switch location to use when selecting switch
    ///   ports.
    /// - `body`
    /// ```ignore
    /// let response = client.networking_switch_port_apply_settings()
    ///    .port(port)
    ///    .rack_id(rack_id)
    ///    .switch_location(switch_location)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_switch_port_apply_settings(&self) -> builder::NetworkingSwitchPortApplySettings;
    /// Clear switch port settings
    ///
    /// Sends a `DELETE` request to
    /// `/v1/system/hardware/switch-port/{port}/settings`
    ///
    /// Arguments:
    /// - `port`: A name to use when selecting switch ports.
    /// - `rack_id`: A rack id to use when selecting switch ports.
    /// - `switch_location`: A switch location to use when selecting switch
    ///   ports.
    /// ```ignore
    /// let response = client.networking_switch_port_clear_settings()
    ///    .port(port)
    ///    .rack_id(rack_id)
    ///    .switch_location(switch_location)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_switch_port_clear_settings(&self) -> builder::NetworkingSwitchPortClearSettings;
    /// List switches
    ///
    /// Sends a `GET` request to `/v1/system/hardware/switches`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.switch_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn switch_list(&self) -> builder::SwitchList;
    /// Fetch a switch
    ///
    /// Sends a `GET` request to `/v1/system/hardware/switches/{switch_id}`
    ///
    /// Arguments:
    /// - `switch_id`: ID of the switch
    /// ```ignore
    /// let response = client.switch_view()
    ///    .switch_id(switch_id)
    ///    .send()
    ///    .await;
    /// ```
    fn switch_view(&self) -> builder::SwitchView;
}

impl ClientSystemHardwareExt for Client {
    fn physical_disk_list(&self) -> builder::PhysicalDiskList {
        builder::PhysicalDiskList::new(self)
    }

    fn rack_list(&self) -> builder::RackList {
        builder::RackList::new(self)
    }

    fn rack_view(&self) -> builder::RackView {
        builder::RackView::new(self)
    }

    fn sled_list(&self) -> builder::SledList {
        builder::SledList::new(self)
    }

    fn add_sled_to_initialized_rack(&self) -> builder::AddSledToInitializedRack {
        builder::AddSledToInitializedRack::new(self)
    }

    fn sled_view(&self) -> builder::SledView {
        builder::SledView::new(self)
    }

    fn sled_physical_disk_list(&self) -> builder::SledPhysicalDiskList {
        builder::SledPhysicalDiskList::new(self)
    }

    fn sled_instance_list(&self) -> builder::SledInstanceList {
        builder::SledInstanceList::new(self)
    }

    fn sled_set_provision_state(&self) -> builder::SledSetProvisionState {
        builder::SledSetProvisionState::new(self)
    }

    fn sled_list_uninitialized(&self) -> builder::SledListUninitialized {
        builder::SledListUninitialized::new(self)
    }

    fn networking_switch_port_list(&self) -> builder::NetworkingSwitchPortList {
        builder::NetworkingSwitchPortList::new(self)
    }

    fn networking_switch_port_apply_settings(&self) -> builder::NetworkingSwitchPortApplySettings {
        builder::NetworkingSwitchPortApplySettings::new(self)
    }

    fn networking_switch_port_clear_settings(&self) -> builder::NetworkingSwitchPortClearSettings {
        builder::NetworkingSwitchPortClearSettings::new(self)
    }

    fn switch_list(&self) -> builder::SwitchList {
        builder::SwitchList::new(self)
    }

    fn switch_view(&self) -> builder::SwitchView {
        builder::SwitchView::new(self)
    }
}

pub trait ClientSystemMetricsExt {
    /// Access metrics data
    ///
    /// Sends a `GET` request to `/v1/system/metrics/{metric_name}`
    ///
    /// Arguments:
    /// - `metric_name`
    /// - `end_time`: An exclusive end time of metrics.
    /// - `limit`: Maximum number of items returned by a single call
    /// - `order`: Query result order
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `silo`: Name or ID of the silo
    /// - `start_time`: An inclusive start time of metrics.
    /// ```ignore
    /// let response = client.system_metric()
    ///    .metric_name(metric_name)
    ///    .end_time(end_time)
    ///    .limit(limit)
    ///    .order(order)
    ///    .page_token(page_token)
    ///    .silo(silo)
    ///    .start_time(start_time)
    ///    .send()
    ///    .await;
    /// ```
    fn system_metric(&self) -> builder::SystemMetric;
}

impl ClientSystemMetricsExt for Client {
    fn system_metric(&self) -> builder::SystemMetric {
        builder::SystemMetric::new(self)
    }
}

pub trait ClientSystemNetworkingExt {
    /// List IP pools
    ///
    /// Sends a `GET` request to `/v1/system/ip-pools`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.ip_pool_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_list(&self) -> builder::IpPoolList;
    /// Create an IP pool
    ///
    /// Sends a `POST` request to `/v1/system/ip-pools`
    ///
    /// ```ignore
    /// let response = client.ip_pool_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_create(&self) -> builder::IpPoolCreate;
    /// Fetch an IP pool
    ///
    /// Sends a `GET` request to `/v1/system/ip-pools/{pool}`
    ///
    /// Arguments:
    /// - `pool`: Name or ID of the IP pool
    /// ```ignore
    /// let response = client.ip_pool_view()
    ///    .pool(pool)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_view(&self) -> builder::IpPoolView;
    /// Update an IP Pool
    ///
    /// Sends a `PUT` request to `/v1/system/ip-pools/{pool}`
    ///
    /// Arguments:
    /// - `pool`: Name or ID of the IP pool
    /// - `body`
    /// ```ignore
    /// let response = client.ip_pool_update()
    ///    .pool(pool)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_update(&self) -> builder::IpPoolUpdate;
    /// Delete an IP Pool
    ///
    /// Sends a `DELETE` request to `/v1/system/ip-pools/{pool}`
    ///
    /// Arguments:
    /// - `pool`: Name or ID of the IP pool
    /// ```ignore
    /// let response = client.ip_pool_delete()
    ///    .pool(pool)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_delete(&self) -> builder::IpPoolDelete;
    /// List ranges for an IP pool
    ///
    /// List ranges for an IP pool. Ranges are ordered by their first address.
    ///
    /// Sends a `GET` request to `/v1/system/ip-pools/{pool}/ranges`
    ///
    /// Arguments:
    /// - `pool`: Name or ID of the IP pool
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// ```ignore
    /// let response = client.ip_pool_range_list()
    ///    .pool(pool)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_range_list(&self) -> builder::IpPoolRangeList;
    /// Add a range to an IP pool
    ///
    /// Sends a `POST` request to `/v1/system/ip-pools/{pool}/ranges/add`
    ///
    /// Arguments:
    /// - `pool`: Name or ID of the IP pool
    /// - `body`
    /// ```ignore
    /// let response = client.ip_pool_range_add()
    ///    .pool(pool)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_range_add(&self) -> builder::IpPoolRangeAdd;
    /// Remove a range from an IP pool
    ///
    /// Sends a `POST` request to `/v1/system/ip-pools/{pool}/ranges/remove`
    ///
    /// Arguments:
    /// - `pool`: Name or ID of the IP pool
    /// - `body`
    /// ```ignore
    /// let response = client.ip_pool_range_remove()
    ///    .pool(pool)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_range_remove(&self) -> builder::IpPoolRangeRemove;
    /// Fetch the IP pool used for Oxide services
    ///
    /// Sends a `GET` request to `/v1/system/ip-pools-service`
    ///
    /// ```ignore
    /// let response = client.ip_pool_service_view()
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_service_view(&self) -> builder::IpPoolServiceView;
    /// List ranges for the IP pool used for Oxide services
    ///
    /// List ranges for the IP pool used for Oxide services. Ranges are ordered
    /// by their first address.
    ///
    /// Sends a `GET` request to `/v1/system/ip-pools-service/ranges`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// ```ignore
    /// let response = client.ip_pool_service_range_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_service_range_list(&self) -> builder::IpPoolServiceRangeList;
    /// Add a range to an IP pool used for Oxide services
    ///
    /// Sends a `POST` request to `/v1/system/ip-pools-service/ranges/add`
    ///
    /// ```ignore
    /// let response = client.ip_pool_service_range_add()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_service_range_add(&self) -> builder::IpPoolServiceRangeAdd;
    /// Remove a range from an IP pool used for Oxide services
    ///
    /// Sends a `POST` request to `/v1/system/ip-pools-service/ranges/remove`
    ///
    /// ```ignore
    /// let response = client.ip_pool_service_range_remove()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn ip_pool_service_range_remove(&self) -> builder::IpPoolServiceRangeRemove;
    /// List address lots
    ///
    /// Sends a `GET` request to `/v1/system/networking/address-lot`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.networking_address_lot_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_address_lot_list(&self) -> builder::NetworkingAddressLotList;
    /// Create an address lot
    ///
    /// Sends a `POST` request to `/v1/system/networking/address-lot`
    ///
    /// ```ignore
    /// let response = client.networking_address_lot_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_address_lot_create(&self) -> builder::NetworkingAddressLotCreate;
    /// Delete an address lot
    ///
    /// Sends a `DELETE` request to
    /// `/v1/system/networking/address-lot/{address_lot}`
    ///
    /// Arguments:
    /// - `address_lot`: Name or ID of the address lot
    /// ```ignore
    /// let response = client.networking_address_lot_delete()
    ///    .address_lot(address_lot)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_address_lot_delete(&self) -> builder::NetworkingAddressLotDelete;
    /// List the blocks in an address lot
    ///
    /// Sends a `GET` request to
    /// `/v1/system/networking/address-lot/{address_lot}/blocks`
    ///
    /// Arguments:
    /// - `address_lot`: Name or ID of the address lot
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.networking_address_lot_block_list()
    ///    .address_lot(address_lot)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_address_lot_block_list(&self) -> builder::NetworkingAddressLotBlockList;
    /// List BGP configurations
    ///
    /// Sends a `GET` request to `/v1/system/networking/bgp`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `name_or_id`: A name or id to use when selecting BGP config.
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.networking_bgp_config_list()
    ///    .limit(limit)
    ///    .name_or_id(name_or_id)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_bgp_config_list(&self) -> builder::NetworkingBgpConfigList;
    /// Create a new BGP configuration
    ///
    /// Sends a `POST` request to `/v1/system/networking/bgp`
    ///
    /// ```ignore
    /// let response = client.networking_bgp_config_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_bgp_config_create(&self) -> builder::NetworkingBgpConfigCreate;
    /// Delete a BGP configuration
    ///
    /// Sends a `DELETE` request to `/v1/system/networking/bgp`
    ///
    /// Arguments:
    /// - `name_or_id`: A name or id to use when selecting BGP config.
    /// ```ignore
    /// let response = client.networking_bgp_config_delete()
    ///    .name_or_id(name_or_id)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_bgp_config_delete(&self) -> builder::NetworkingBgpConfigDelete;
    /// Get originated routes for a BGP configuration
    ///
    /// Sends a `GET` request to `/v1/system/networking/bgp-announce`
    ///
    /// Arguments:
    /// - `name_or_id`: A name or id to use when selecting BGP port settings
    /// ```ignore
    /// let response = client.networking_bgp_announce_set_list()
    ///    .name_or_id(name_or_id)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_bgp_announce_set_list(&self) -> builder::NetworkingBgpAnnounceSetList;
    /// Create a new BGP announce set
    ///
    /// Sends a `POST` request to `/v1/system/networking/bgp-announce`
    ///
    /// ```ignore
    /// let response = client.networking_bgp_announce_set_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_bgp_announce_set_create(&self) -> builder::NetworkingBgpAnnounceSetCreate;
    /// Delete a BGP announce set
    ///
    /// Sends a `DELETE` request to `/v1/system/networking/bgp-announce`
    ///
    /// Arguments:
    /// - `name_or_id`: A name or id to use when selecting BGP port settings
    /// ```ignore
    /// let response = client.networking_bgp_announce_set_delete()
    ///    .name_or_id(name_or_id)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_bgp_announce_set_delete(&self) -> builder::NetworkingBgpAnnounceSetDelete;
    /// Get imported IPv4 BGP routes
    ///
    /// Sends a `GET` request to `/v1/system/networking/bgp-routes-ipv4`
    ///
    /// Arguments:
    /// - `asn`: The ASN to filter on. Required.
    /// ```ignore
    /// let response = client.networking_bgp_imported_routes_ipv4()
    ///    .asn(asn)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_bgp_imported_routes_ipv4(&self) -> builder::NetworkingBgpImportedRoutesIpv4;
    /// Get BGP peer status
    ///
    /// Sends a `GET` request to `/v1/system/networking/bgp-status`
    ///
    /// ```ignore
    /// let response = client.networking_bgp_status()
    ///    .send()
    ///    .await;
    /// ```
    fn networking_bgp_status(&self) -> builder::NetworkingBgpStatus;
    /// List loopback addresses
    ///
    /// Sends a `GET` request to `/v1/system/networking/loopback-address`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.networking_loopback_address_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_loopback_address_list(&self) -> builder::NetworkingLoopbackAddressList;
    /// Create a loopback address
    ///
    /// Sends a `POST` request to `/v1/system/networking/loopback-address`
    ///
    /// ```ignore
    /// let response = client.networking_loopback_address_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_loopback_address_create(&self) -> builder::NetworkingLoopbackAddressCreate;
    /// Delete a loopback address
    ///
    /// Sends a `DELETE` request to
    /// `/v1/system/networking/loopback-address/{rack_id}/{switch_location}/
    /// {address}/{subnet_mask}`
    ///
    /// Arguments:
    /// - `rack_id`: The rack to use when selecting the loopback address.
    /// - `switch_location`: The switch location to use when selecting the
    ///   loopback address.
    /// - `address`: The IP address and subnet mask to use when selecting the
    ///   loopback address.
    /// - `subnet_mask`: The IP address and subnet mask to use when selecting
    ///   the loopback address.
    /// ```ignore
    /// let response = client.networking_loopback_address_delete()
    ///    .rack_id(rack_id)
    ///    .switch_location(switch_location)
    ///    .address(address)
    ///    .subnet_mask(subnet_mask)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_loopback_address_delete(&self) -> builder::NetworkingLoopbackAddressDelete;
    /// List switch port settings
    ///
    /// Sends a `GET` request to `/v1/system/networking/switch-port-settings`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `port_settings`: An optional name or id to use when selecting port
    ///   settings.
    /// - `sort_by`
    /// ```ignore
    /// let response = client.networking_switch_port_settings_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .port_settings(port_settings)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_switch_port_settings_list(&self) -> builder::NetworkingSwitchPortSettingsList;
    /// Create switch port settings
    ///
    /// Sends a `POST` request to `/v1/system/networking/switch-port-settings`
    ///
    /// ```ignore
    /// let response = client.networking_switch_port_settings_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_switch_port_settings_create(&self)
        -> builder::NetworkingSwitchPortSettingsCreate;
    /// Delete switch port settings
    ///
    /// Sends a `DELETE` request to `/v1/system/networking/switch-port-settings`
    ///
    /// Arguments:
    /// - `port_settings`: An optional name or id to use when selecting port
    ///   settings.
    /// ```ignore
    /// let response = client.networking_switch_port_settings_delete()
    ///    .port_settings(port_settings)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_switch_port_settings_delete(&self)
        -> builder::NetworkingSwitchPortSettingsDelete;
    /// Get information about a switch port
    ///
    /// Sends a `GET` request to
    /// `/v1/system/networking/switch-port-settings/{port}`
    ///
    /// Arguments:
    /// - `port`: A name or id to use when selecting switch port settings info
    ///   objects.
    /// ```ignore
    /// let response = client.networking_switch_port_settings_view()
    ///    .port(port)
    ///    .send()
    ///    .await;
    /// ```
    fn networking_switch_port_settings_view(&self) -> builder::NetworkingSwitchPortSettingsView;
}

impl ClientSystemNetworkingExt for Client {
    fn ip_pool_list(&self) -> builder::IpPoolList {
        builder::IpPoolList::new(self)
    }

    fn ip_pool_create(&self) -> builder::IpPoolCreate {
        builder::IpPoolCreate::new(self)
    }

    fn ip_pool_view(&self) -> builder::IpPoolView {
        builder::IpPoolView::new(self)
    }

    fn ip_pool_update(&self) -> builder::IpPoolUpdate {
        builder::IpPoolUpdate::new(self)
    }

    fn ip_pool_delete(&self) -> builder::IpPoolDelete {
        builder::IpPoolDelete::new(self)
    }

    fn ip_pool_range_list(&self) -> builder::IpPoolRangeList {
        builder::IpPoolRangeList::new(self)
    }

    fn ip_pool_range_add(&self) -> builder::IpPoolRangeAdd {
        builder::IpPoolRangeAdd::new(self)
    }

    fn ip_pool_range_remove(&self) -> builder::IpPoolRangeRemove {
        builder::IpPoolRangeRemove::new(self)
    }

    fn ip_pool_service_view(&self) -> builder::IpPoolServiceView {
        builder::IpPoolServiceView::new(self)
    }

    fn ip_pool_service_range_list(&self) -> builder::IpPoolServiceRangeList {
        builder::IpPoolServiceRangeList::new(self)
    }

    fn ip_pool_service_range_add(&self) -> builder::IpPoolServiceRangeAdd {
        builder::IpPoolServiceRangeAdd::new(self)
    }

    fn ip_pool_service_range_remove(&self) -> builder::IpPoolServiceRangeRemove {
        builder::IpPoolServiceRangeRemove::new(self)
    }

    fn networking_address_lot_list(&self) -> builder::NetworkingAddressLotList {
        builder::NetworkingAddressLotList::new(self)
    }

    fn networking_address_lot_create(&self) -> builder::NetworkingAddressLotCreate {
        builder::NetworkingAddressLotCreate::new(self)
    }

    fn networking_address_lot_delete(&self) -> builder::NetworkingAddressLotDelete {
        builder::NetworkingAddressLotDelete::new(self)
    }

    fn networking_address_lot_block_list(&self) -> builder::NetworkingAddressLotBlockList {
        builder::NetworkingAddressLotBlockList::new(self)
    }

    fn networking_bgp_config_list(&self) -> builder::NetworkingBgpConfigList {
        builder::NetworkingBgpConfigList::new(self)
    }

    fn networking_bgp_config_create(&self) -> builder::NetworkingBgpConfigCreate {
        builder::NetworkingBgpConfigCreate::new(self)
    }

    fn networking_bgp_config_delete(&self) -> builder::NetworkingBgpConfigDelete {
        builder::NetworkingBgpConfigDelete::new(self)
    }

    fn networking_bgp_announce_set_list(&self) -> builder::NetworkingBgpAnnounceSetList {
        builder::NetworkingBgpAnnounceSetList::new(self)
    }

    fn networking_bgp_announce_set_create(&self) -> builder::NetworkingBgpAnnounceSetCreate {
        builder::NetworkingBgpAnnounceSetCreate::new(self)
    }

    fn networking_bgp_announce_set_delete(&self) -> builder::NetworkingBgpAnnounceSetDelete {
        builder::NetworkingBgpAnnounceSetDelete::new(self)
    }

    fn networking_bgp_imported_routes_ipv4(&self) -> builder::NetworkingBgpImportedRoutesIpv4 {
        builder::NetworkingBgpImportedRoutesIpv4::new(self)
    }

    fn networking_bgp_status(&self) -> builder::NetworkingBgpStatus {
        builder::NetworkingBgpStatus::new(self)
    }

    fn networking_loopback_address_list(&self) -> builder::NetworkingLoopbackAddressList {
        builder::NetworkingLoopbackAddressList::new(self)
    }

    fn networking_loopback_address_create(&self) -> builder::NetworkingLoopbackAddressCreate {
        builder::NetworkingLoopbackAddressCreate::new(self)
    }

    fn networking_loopback_address_delete(&self) -> builder::NetworkingLoopbackAddressDelete {
        builder::NetworkingLoopbackAddressDelete::new(self)
    }

    fn networking_switch_port_settings_list(&self) -> builder::NetworkingSwitchPortSettingsList {
        builder::NetworkingSwitchPortSettingsList::new(self)
    }

    fn networking_switch_port_settings_create(
        &self,
    ) -> builder::NetworkingSwitchPortSettingsCreate {
        builder::NetworkingSwitchPortSettingsCreate::new(self)
    }

    fn networking_switch_port_settings_delete(
        &self,
    ) -> builder::NetworkingSwitchPortSettingsDelete {
        builder::NetworkingSwitchPortSettingsDelete::new(self)
    }

    fn networking_switch_port_settings_view(&self) -> builder::NetworkingSwitchPortSettingsView {
        builder::NetworkingSwitchPortSettingsView::new(self)
    }
}

pub trait ClientSystemSilosExt {
    /// List a silo's IdP's name
    ///
    /// Sends a `GET` request to `/v1/system/identity-providers`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `silo`: Name or ID of the silo
    /// - `sort_by`
    /// ```ignore
    /// let response = client.silo_identity_provider_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .silo(silo)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_identity_provider_list(&self) -> builder::SiloIdentityProviderList;
    /// Create a user
    ///
    /// Users can only be created in Silos with `provision_type` == `Fixed`.
    /// Otherwise, Silo users are just-in-time (JIT) provisioned when a user
    /// first logs in using an external Identity Provider.
    ///
    /// Sends a `POST` request to `/v1/system/identity-providers/local/users`
    ///
    /// Arguments:
    /// - `silo`: Name or ID of the silo
    /// - `body`
    /// ```ignore
    /// let response = client.local_idp_user_create()
    ///    .silo(silo)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn local_idp_user_create(&self) -> builder::LocalIdpUserCreate;
    /// Delete a user
    ///
    /// Sends a `DELETE` request to
    /// `/v1/system/identity-providers/local/users/{user_id}`
    ///
    /// Arguments:
    /// - `user_id`: The user's internal id
    /// - `silo`: Name or ID of the silo
    /// ```ignore
    /// let response = client.local_idp_user_delete()
    ///    .user_id(user_id)
    ///    .silo(silo)
    ///    .send()
    ///    .await;
    /// ```
    fn local_idp_user_delete(&self) -> builder::LocalIdpUserDelete;
    /// Set or invalidate a user's password
    ///
    /// Passwords can only be updated for users in Silos with identity mode
    /// `LocalOnly`.
    ///
    /// Sends a `POST` request to
    /// `/v1/system/identity-providers/local/users/{user_id}/set-password`
    ///
    /// Arguments:
    /// - `user_id`: The user's internal id
    /// - `silo`: Name or ID of the silo
    /// - `body`
    /// ```ignore
    /// let response = client.local_idp_user_set_password()
    ///    .user_id(user_id)
    ///    .silo(silo)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn local_idp_user_set_password(&self) -> builder::LocalIdpUserSetPassword;
    /// Create a SAML IdP
    ///
    /// Sends a `POST` request to `/v1/system/identity-providers/saml`
    ///
    /// Arguments:
    /// - `silo`: Name or ID of the silo
    /// - `body`
    /// ```ignore
    /// let response = client.saml_identity_provider_create()
    ///    .silo(silo)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn saml_identity_provider_create(&self) -> builder::SamlIdentityProviderCreate;
    /// Fetch a SAML IdP
    ///
    /// Sends a `GET` request to `/v1/system/identity-providers/saml/{provider}`
    ///
    /// Arguments:
    /// - `provider`: Name or ID of the SAML identity provider
    /// - `silo`: Name or ID of the silo
    /// ```ignore
    /// let response = client.saml_identity_provider_view()
    ///    .provider(provider)
    ///    .silo(silo)
    ///    .send()
    ///    .await;
    /// ```
    fn saml_identity_provider_view(&self) -> builder::SamlIdentityProviderView;
    /// Lists resource quotas for all silos
    ///
    /// Sends a `GET` request to `/v1/system/silo-quotas`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.system_quotas_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn system_quotas_list(&self) -> builder::SystemQuotasList;
    /// List silos
    ///
    /// Lists silos that are discoverable based on the current permissions.
    ///
    /// Sends a `GET` request to `/v1/system/silos`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.silo_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_list(&self) -> builder::SiloList;
    /// Create a silo
    ///
    /// Sends a `POST` request to `/v1/system/silos`
    ///
    /// ```ignore
    /// let response = client.silo_create()
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_create(&self) -> builder::SiloCreate;
    /// Fetch a silo
    ///
    /// Fetch a silo by name.
    ///
    /// Sends a `GET` request to `/v1/system/silos/{silo}`
    ///
    /// Arguments:
    /// - `silo`: Name or ID of the silo
    /// ```ignore
    /// let response = client.silo_view()
    ///    .silo(silo)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_view(&self) -> builder::SiloView;
    /// Delete a silo
    ///
    /// Delete a silo by name.
    ///
    /// Sends a `DELETE` request to `/v1/system/silos/{silo}`
    ///
    /// Arguments:
    /// - `silo`: Name or ID of the silo
    /// ```ignore
    /// let response = client.silo_delete()
    ///    .silo(silo)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_delete(&self) -> builder::SiloDelete;
    /// Fetch a silo's IAM policy
    ///
    /// Sends a `GET` request to `/v1/system/silos/{silo}/policy`
    ///
    /// Arguments:
    /// - `silo`: Name or ID of the silo
    /// ```ignore
    /// let response = client.silo_policy_view()
    ///    .silo(silo)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_policy_view(&self) -> builder::SiloPolicyView;
    /// Update a silo's IAM policy
    ///
    /// Sends a `PUT` request to `/v1/system/silos/{silo}/policy`
    ///
    /// Arguments:
    /// - `silo`: Name or ID of the silo
    /// - `body`
    /// ```ignore
    /// let response = client.silo_policy_update()
    ///    .silo(silo)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_policy_update(&self) -> builder::SiloPolicyUpdate;
    /// View the resource quotas of a given silo
    ///
    /// Sends a `GET` request to `/v1/system/silos/{silo}/quotas`
    ///
    /// Arguments:
    /// - `silo`: Name or ID of the silo
    /// ```ignore
    /// let response = client.silo_quotas_view()
    ///    .silo(silo)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_quotas_view(&self) -> builder::SiloQuotasView;
    /// Update the resource quotas of a given silo
    ///
    /// If a quota value is not specified, it will remain unchanged.
    ///
    /// Sends a `PUT` request to `/v1/system/silos/{silo}/quotas`
    ///
    /// Arguments:
    /// - `silo`: Name or ID of the silo
    /// - `body`
    /// ```ignore
    /// let response = client.silo_quotas_update()
    ///    .silo(silo)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_quotas_update(&self) -> builder::SiloQuotasUpdate;
    /// List built-in (system) users in a silo
    ///
    /// Sends a `GET` request to `/v1/system/users`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `silo`: Name or ID of the silo
    /// - `sort_by`
    /// ```ignore
    /// let response = client.silo_user_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .silo(silo)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_user_list(&self) -> builder::SiloUserList;
    /// Fetch a built-in (system) user
    ///
    /// Sends a `GET` request to `/v1/system/users/{user_id}`
    ///
    /// Arguments:
    /// - `user_id`: The user's internal id
    /// - `silo`: Name or ID of the silo
    /// ```ignore
    /// let response = client.silo_user_view()
    ///    .user_id(user_id)
    ///    .silo(silo)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_user_view(&self) -> builder::SiloUserView;
    /// List built-in users
    ///
    /// Sends a `GET` request to `/v1/system/users-builtin`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.user_builtin_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn user_builtin_list(&self) -> builder::UserBuiltinList;
    /// Fetch a built-in user
    ///
    /// Sends a `GET` request to `/v1/system/users-builtin/{user}`
    ///
    /// ```ignore
    /// let response = client.user_builtin_view()
    ///    .user(user)
    ///    .send()
    ///    .await;
    /// ```
    fn user_builtin_view(&self) -> builder::UserBuiltinView;
    /// List current utilization state for all silos
    ///
    /// Sends a `GET` request to `/v1/system/utilization/silos`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `sort_by`
    /// ```ignore
    /// let response = client.silo_utilization_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_utilization_list(&self) -> builder::SiloUtilizationList;
    /// View the current utilization of a given silo
    ///
    /// Sends a `GET` request to `/v1/system/utilization/silos/{silo}`
    ///
    /// Arguments:
    /// - `silo`: Name or ID of the silo
    /// ```ignore
    /// let response = client.silo_utilization_view()
    ///    .silo(silo)
    ///    .send()
    ///    .await;
    /// ```
    fn silo_utilization_view(&self) -> builder::SiloUtilizationView;
}

impl ClientSystemSilosExt for Client {
    fn silo_identity_provider_list(&self) -> builder::SiloIdentityProviderList {
        builder::SiloIdentityProviderList::new(self)
    }

    fn local_idp_user_create(&self) -> builder::LocalIdpUserCreate {
        builder::LocalIdpUserCreate::new(self)
    }

    fn local_idp_user_delete(&self) -> builder::LocalIdpUserDelete {
        builder::LocalIdpUserDelete::new(self)
    }

    fn local_idp_user_set_password(&self) -> builder::LocalIdpUserSetPassword {
        builder::LocalIdpUserSetPassword::new(self)
    }

    fn saml_identity_provider_create(&self) -> builder::SamlIdentityProviderCreate {
        builder::SamlIdentityProviderCreate::new(self)
    }

    fn saml_identity_provider_view(&self) -> builder::SamlIdentityProviderView {
        builder::SamlIdentityProviderView::new(self)
    }

    fn system_quotas_list(&self) -> builder::SystemQuotasList {
        builder::SystemQuotasList::new(self)
    }

    fn silo_list(&self) -> builder::SiloList {
        builder::SiloList::new(self)
    }

    fn silo_create(&self) -> builder::SiloCreate {
        builder::SiloCreate::new(self)
    }

    fn silo_view(&self) -> builder::SiloView {
        builder::SiloView::new(self)
    }

    fn silo_delete(&self) -> builder::SiloDelete {
        builder::SiloDelete::new(self)
    }

    fn silo_policy_view(&self) -> builder::SiloPolicyView {
        builder::SiloPolicyView::new(self)
    }

    fn silo_policy_update(&self) -> builder::SiloPolicyUpdate {
        builder::SiloPolicyUpdate::new(self)
    }

    fn silo_quotas_view(&self) -> builder::SiloQuotasView {
        builder::SiloQuotasView::new(self)
    }

    fn silo_quotas_update(&self) -> builder::SiloQuotasUpdate {
        builder::SiloQuotasUpdate::new(self)
    }

    fn silo_user_list(&self) -> builder::SiloUserList {
        builder::SiloUserList::new(self)
    }

    fn silo_user_view(&self) -> builder::SiloUserView {
        builder::SiloUserView::new(self)
    }

    fn user_builtin_list(&self) -> builder::UserBuiltinList {
        builder::UserBuiltinList::new(self)
    }

    fn user_builtin_view(&self) -> builder::UserBuiltinView {
        builder::UserBuiltinView::new(self)
    }

    fn silo_utilization_list(&self) -> builder::SiloUtilizationList {
        builder::SiloUtilizationList::new(self)
    }

    fn silo_utilization_view(&self) -> builder::SiloUtilizationView {
        builder::SiloUtilizationView::new(self)
    }
}

pub trait ClientSystemStatusExt {
    /// Ping API
    ///
    /// Always responds with Ok if it responds at all.
    ///
    /// Sends a `GET` request to `/v1/ping`
    ///
    /// ```ignore
    /// let response = client.ping()
    ///    .send()
    ///    .await;
    /// ```
    fn ping(&self) -> builder::Ping;
}

impl ClientSystemStatusExt for Client {
    fn ping(&self) -> builder::Ping {
        builder::Ping::new(self)
    }
}

pub trait ClientVpcsExt {
    /// List firewall rules
    ///
    /// Sends a `GET` request to `/v1/vpc-firewall-rules`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project, only required if `vpc` is
    ///   provided as a `Name`
    /// - `vpc`: Name or ID of the VPC
    /// ```ignore
    /// let response = client.vpc_firewall_rules_view()
    ///    .project(project)
    ///    .vpc(vpc)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_firewall_rules_view(&self) -> builder::VpcFirewallRulesView;
    /// Replace firewall rules
    ///
    /// Sends a `PUT` request to `/v1/vpc-firewall-rules`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project, only required if `vpc` is
    ///   provided as a `Name`
    /// - `vpc`: Name or ID of the VPC
    /// - `body`
    /// ```ignore
    /// let response = client.vpc_firewall_rules_update()
    ///    .project(project)
    ///    .vpc(vpc)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_firewall_rules_update(&self) -> builder::VpcFirewallRulesUpdate;
    /// List subnets
    ///
    /// Sends a `GET` request to `/v1/vpc-subnets`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project, only required if `vpc` is
    ///   provided as a `Name`
    /// - `sort_by`
    /// - `vpc`: Name or ID of the VPC
    /// ```ignore
    /// let response = client.vpc_subnet_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .vpc(vpc)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_subnet_list(&self) -> builder::VpcSubnetList;
    /// Create a subnet
    ///
    /// Sends a `POST` request to `/v1/vpc-subnets`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project, only required if `vpc` is
    ///   provided as a `Name`
    /// - `vpc`: Name or ID of the VPC
    /// - `body`
    /// ```ignore
    /// let response = client.vpc_subnet_create()
    ///    .project(project)
    ///    .vpc(vpc)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_subnet_create(&self) -> builder::VpcSubnetCreate;
    /// Fetch a subnet
    ///
    /// Sends a `GET` request to `/v1/vpc-subnets/{subnet}`
    ///
    /// Arguments:
    /// - `subnet`: Name or ID of the subnet
    /// - `project`: Name or ID of the project, only required if `vpc` is
    ///   provided as a `Name`
    /// - `vpc`: Name or ID of the VPC
    /// ```ignore
    /// let response = client.vpc_subnet_view()
    ///    .subnet(subnet)
    ///    .project(project)
    ///    .vpc(vpc)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_subnet_view(&self) -> builder::VpcSubnetView;
    /// Update a subnet
    ///
    /// Sends a `PUT` request to `/v1/vpc-subnets/{subnet}`
    ///
    /// Arguments:
    /// - `subnet`: Name or ID of the subnet
    /// - `project`: Name or ID of the project, only required if `vpc` is
    ///   provided as a `Name`
    /// - `vpc`: Name or ID of the VPC
    /// - `body`
    /// ```ignore
    /// let response = client.vpc_subnet_update()
    ///    .subnet(subnet)
    ///    .project(project)
    ///    .vpc(vpc)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_subnet_update(&self) -> builder::VpcSubnetUpdate;
    /// Delete a subnet
    ///
    /// Sends a `DELETE` request to `/v1/vpc-subnets/{subnet}`
    ///
    /// Arguments:
    /// - `subnet`: Name or ID of the subnet
    /// - `project`: Name or ID of the project, only required if `vpc` is
    ///   provided as a `Name`
    /// - `vpc`: Name or ID of the VPC
    /// ```ignore
    /// let response = client.vpc_subnet_delete()
    ///    .subnet(subnet)
    ///    .project(project)
    ///    .vpc(vpc)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_subnet_delete(&self) -> builder::VpcSubnetDelete;
    /// List network interfaces
    ///
    /// Sends a `GET` request to `/v1/vpc-subnets/{subnet}/network-interfaces`
    ///
    /// Arguments:
    /// - `subnet`: Name or ID of the subnet
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project, only required if `vpc` is
    ///   provided as a `Name`
    /// - `sort_by`
    /// - `vpc`: Name or ID of the VPC
    /// ```ignore
    /// let response = client.vpc_subnet_list_network_interfaces()
    ///    .subnet(subnet)
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .vpc(vpc)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_subnet_list_network_interfaces(&self) -> builder::VpcSubnetListNetworkInterfaces;
    /// List VPCs
    ///
    /// Sends a `GET` request to `/v1/vpcs`
    ///
    /// Arguments:
    /// - `limit`: Maximum number of items returned by a single call
    /// - `page_token`: Token returned by previous call to retrieve the
    ///   subsequent page
    /// - `project`: Name or ID of the project
    /// - `sort_by`
    /// ```ignore
    /// let response = client.vpc_list()
    ///    .limit(limit)
    ///    .page_token(page_token)
    ///    .project(project)
    ///    .sort_by(sort_by)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_list(&self) -> builder::VpcList;
    /// Create a VPC
    ///
    /// Sends a `POST` request to `/v1/vpcs`
    ///
    /// Arguments:
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.vpc_create()
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_create(&self) -> builder::VpcCreate;
    /// Fetch a VPC
    ///
    /// Sends a `GET` request to `/v1/vpcs/{vpc}`
    ///
    /// Arguments:
    /// - `vpc`: Name or ID of the VPC
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.vpc_view()
    ///    .vpc(vpc)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_view(&self) -> builder::VpcView;
    /// Update a VPC
    ///
    /// Sends a `PUT` request to `/v1/vpcs/{vpc}`
    ///
    /// Arguments:
    /// - `vpc`: Name or ID of the VPC
    /// - `project`: Name or ID of the project
    /// - `body`
    /// ```ignore
    /// let response = client.vpc_update()
    ///    .vpc(vpc)
    ///    .project(project)
    ///    .body(body)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_update(&self) -> builder::VpcUpdate;
    /// Delete a VPC
    ///
    /// Sends a `DELETE` request to `/v1/vpcs/{vpc}`
    ///
    /// Arguments:
    /// - `vpc`: Name or ID of the VPC
    /// - `project`: Name or ID of the project
    /// ```ignore
    /// let response = client.vpc_delete()
    ///    .vpc(vpc)
    ///    .project(project)
    ///    .send()
    ///    .await;
    /// ```
    fn vpc_delete(&self) -> builder::VpcDelete;
}

impl ClientVpcsExt for Client {
    fn vpc_firewall_rules_view(&self) -> builder::VpcFirewallRulesView {
        builder::VpcFirewallRulesView::new(self)
    }

    fn vpc_firewall_rules_update(&self) -> builder::VpcFirewallRulesUpdate {
        builder::VpcFirewallRulesUpdate::new(self)
    }

    fn vpc_subnet_list(&self) -> builder::VpcSubnetList {
        builder::VpcSubnetList::new(self)
    }

    fn vpc_subnet_create(&self) -> builder::VpcSubnetCreate {
        builder::VpcSubnetCreate::new(self)
    }

    fn vpc_subnet_view(&self) -> builder::VpcSubnetView {
        builder::VpcSubnetView::new(self)
    }

    fn vpc_subnet_update(&self) -> builder::VpcSubnetUpdate {
        builder::VpcSubnetUpdate::new(self)
    }

    fn vpc_subnet_delete(&self) -> builder::VpcSubnetDelete {
        builder::VpcSubnetDelete::new(self)
    }

    fn vpc_subnet_list_network_interfaces(&self) -> builder::VpcSubnetListNetworkInterfaces {
        builder::VpcSubnetListNetworkInterfaces::new(self)
    }

    fn vpc_list(&self) -> builder::VpcList {
        builder::VpcList::new(self)
    }

    fn vpc_create(&self) -> builder::VpcCreate {
        builder::VpcCreate::new(self)
    }

    fn vpc_view(&self) -> builder::VpcView {
        builder::VpcView::new(self)
    }

    fn vpc_update(&self) -> builder::VpcUpdate {
        builder::VpcUpdate::new(self)
    }

    fn vpc_delete(&self) -> builder::VpcDelete {
        builder::VpcDelete::new(self)
    }
}

pub mod builder {
    use super::types;
    #[allow(unused_imports)]
    use super::{
        encode_path, ByteStream, Error, HeaderMap, HeaderValue, RequestBuilderExt, ResponseValue,
    };
    /// Builder for [`ClientHiddenExt::device_auth_request`]
    ///
    /// [`ClientHiddenExt::device_auth_request`]: super::ClientHiddenExt::device_auth_request
    #[derive(Debug, Clone)]
    pub struct DeviceAuthRequest<'a> {
        client: &'a super::Client,
        body: Result<types::builder::DeviceAuthRequest, String>,
    }

    impl<'a> DeviceAuthRequest<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::DeviceAuthRequest::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::DeviceAuthRequest>,
            <V as std::convert::TryInto<types::DeviceAuthRequest>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `DeviceAuthRequest` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::DeviceAuthRequest,
            ) -> types::builder::DeviceAuthRequest,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/device/auth`
        pub async fn send(self) -> Result<ResponseValue<ByteStream>, Error<ByteStream>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::DeviceAuthRequest>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/device/auth", client.baseurl,);
            let request = client.client.post(url).form_urlencoded(&body)?.build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200..=299 => Ok(ResponseValue::stream(response)),
                _ => Err(Error::ErrorResponse(ResponseValue::stream(response))),
            }
        }
    }

    /// Builder for [`ClientHiddenExt::device_auth_confirm`]
    ///
    /// [`ClientHiddenExt::device_auth_confirm`]: super::ClientHiddenExt::device_auth_confirm
    #[derive(Debug, Clone)]
    pub struct DeviceAuthConfirm<'a> {
        client: &'a super::Client,
        body: Result<types::builder::DeviceAuthVerify, String>,
    }

    impl<'a> DeviceAuthConfirm<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::DeviceAuthVerify::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::DeviceAuthVerify>,
            <V as std::convert::TryInto<types::DeviceAuthVerify>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `DeviceAuthVerify` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::DeviceAuthVerify,
            ) -> types::builder::DeviceAuthVerify,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/device/confirm`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::DeviceAuthVerify>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/device/confirm", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientHiddenExt::device_access_token`]
    ///
    /// [`ClientHiddenExt::device_access_token`]: super::ClientHiddenExt::device_access_token
    #[derive(Debug, Clone)]
    pub struct DeviceAccessToken<'a> {
        client: &'a super::Client,
        body: Result<types::builder::DeviceAccessTokenRequest, String>,
    }

    impl<'a> DeviceAccessToken<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::DeviceAccessTokenRequest::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::DeviceAccessTokenRequest>,
            <V as std::convert::TryInto<types::DeviceAccessTokenRequest>>::Error: std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `DeviceAccessTokenRequest` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::DeviceAccessTokenRequest,
            ) -> types::builder::DeviceAccessTokenRequest,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/device/token`
        pub async fn send(self) -> Result<ResponseValue<ByteStream>, Error<ByteStream>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::DeviceAccessTokenRequest>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/device/token", client.baseurl,);
            let request = client.client.post(url).form_urlencoded(&body)?.build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200..=299 => Ok(ResponseValue::stream(response)),
                _ => Err(Error::ErrorResponse(ResponseValue::stream(response))),
            }
        }
    }

    /// Builder for [`ClientLoginExt::login_saml`]
    ///
    /// [`ClientLoginExt::login_saml`]: super::ClientLoginExt::login_saml
    #[derive(Debug)]
    pub struct LoginSaml<'a> {
        client: &'a super::Client,
        silo_name: Result<types::Name, String>,
        provider_name: Result<types::Name, String>,
        body: Result<reqwest::Body, String>,
    }

    impl<'a> LoginSaml<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo_name: Err("silo_name was not initialized".to_string()),
                provider_name: Err("provider_name was not initialized".to_string()),
                body: Err("body was not initialized".to_string()),
            }
        }

        pub fn silo_name<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::Name>,
        {
            self.silo_name = value
                .try_into()
                .map_err(|_| "conversion to `Name` for silo_name failed".to_string());
            self
        }

        pub fn provider_name<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::Name>,
        {
            self.provider_name = value
                .try_into()
                .map_err(|_| "conversion to `Name` for provider_name failed".to_string());
            self
        }

        pub fn body<B>(mut self, value: B) -> Self
        where
            B: std::convert::TryInto<reqwest::Body>,
        {
            self.body = value
                .try_into()
                .map_err(|_| "conversion to `reqwest::Body` for body failed".to_string());
            self
        }

        /// Sends a `POST` request to `/login/{silo_name}/saml/{provider_name}`
        pub async fn send(self) -> Result<ResponseValue<ByteStream>, Error<types::Error>> {
            let Self {
                client,
                silo_name,
                provider_name,
                body,
            } = self;
            let silo_name = silo_name.map_err(Error::InvalidRequest)?;
            let provider_name = provider_name.map_err(Error::InvalidRequest)?;
            let body = body.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/login/{}/saml/{}",
                client.baseurl,
                encode_path(&silo_name.to_string()),
                encode_path(&provider_name.to_string()),
            );
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::CONTENT_TYPE,
                    reqwest::header::HeaderValue::from_static("application/octet-stream"),
                )
                .body(body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200..=299 => Ok(ResponseValue::stream(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSilosExt::certificate_list`]
    ///
    /// [`ClientSilosExt::certificate_list`]: super::ClientSilosExt::certificate_list
    #[derive(Debug, Clone)]
    pub struct CertificateList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> CertificateList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/certificates`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::CertificateResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/certificates", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/certificates`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Certificate, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSilosExt::certificate_create`]
    ///
    /// [`ClientSilosExt::certificate_create`]: super::ClientSilosExt::certificate_create
    #[derive(Debug, Clone)]
    pub struct CertificateCreate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::CertificateCreate, String>,
    }

    impl<'a> CertificateCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::CertificateCreate::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::CertificateCreate>,
            <V as std::convert::TryInto<types::CertificateCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `CertificateCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::CertificateCreate,
            ) -> types::builder::CertificateCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/certificates`
        pub async fn send(self) -> Result<ResponseValue<types::Certificate>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::CertificateCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/certificates", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSilosExt::certificate_view`]
    ///
    /// [`ClientSilosExt::certificate_view`]: super::ClientSilosExt::certificate_view
    #[derive(Debug, Clone)]
    pub struct CertificateView<'a> {
        client: &'a super::Client,
        certificate: Result<types::NameOrId, String>,
    }

    impl<'a> CertificateView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                certificate: Err("certificate was not initialized".to_string()),
            }
        }

        pub fn certificate<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.certificate = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for certificate failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/certificates/{certificate}`
        pub async fn send(self) -> Result<ResponseValue<types::Certificate>, Error<types::Error>> {
            let Self {
                client,
                certificate,
            } = self;
            let certificate = certificate.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/certificates/{}",
                client.baseurl,
                encode_path(&certificate.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSilosExt::certificate_delete`]
    ///
    /// [`ClientSilosExt::certificate_delete`]: super::ClientSilosExt::certificate_delete
    #[derive(Debug, Clone)]
    pub struct CertificateDelete<'a> {
        client: &'a super::Client,
        certificate: Result<types::NameOrId, String>,
    }

    impl<'a> CertificateDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                certificate: Err("certificate was not initialized".to_string()),
            }
        }

        pub fn certificate<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.certificate = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for certificate failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/certificates/{certificate}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                certificate,
            } = self;
            let certificate = certificate.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/certificates/{}",
                client.baseurl,
                encode_path(&certificate.to_string()),
            );
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientDisksExt::disk_list`]
    ///
    /// [`ClientDisksExt::disk_list`]: super::ClientDisksExt::disk_list
    #[derive(Debug, Clone)]
    pub struct DiskList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> DiskList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/disks`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::DiskResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                project,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/disks", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/disks`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Disk, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientDisksExt::disk_create`]
    ///
    /// [`ClientDisksExt::disk_create`]: super::ClientDisksExt::disk_create
    #[derive(Debug, Clone)]
    pub struct DiskCreate<'a> {
        client: &'a super::Client,
        project: Result<types::NameOrId, String>,
        body: Result<types::builder::DiskCreate, String>,
    }

    impl<'a> DiskCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Err("project was not initialized".to_string()),
                body: Ok(types::builder::DiskCreate::default()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::DiskCreate>,
            <V as std::convert::TryInto<types::DiskCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `DiskCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::DiskCreate) -> types::builder::DiskCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/disks`
        pub async fn send(self) -> Result<ResponseValue<types::Disk>, Error<types::Error>> {
            let Self {
                client,
                project,
                body,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::DiskCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/disks", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            query.push(("project", project.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientDisksExt::disk_view`]
    ///
    /// [`ClientDisksExt::disk_view`]: super::ClientDisksExt::disk_view
    #[derive(Debug, Clone)]
    pub struct DiskView<'a> {
        client: &'a super::Client,
        disk: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> DiskView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                disk: Err("disk was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn disk<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.disk = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for disk failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/disks/{disk}`
        pub async fn send(self) -> Result<ResponseValue<types::Disk>, Error<types::Error>> {
            let Self {
                client,
                disk,
                project,
            } = self;
            let disk = disk.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/disks/{}",
                client.baseurl,
                encode_path(&disk.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientDisksExt::disk_delete`]
    ///
    /// [`ClientDisksExt::disk_delete`]: super::ClientDisksExt::disk_delete
    #[derive(Debug, Clone)]
    pub struct DiskDelete<'a> {
        client: &'a super::Client,
        disk: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> DiskDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                disk: Err("disk was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn disk<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.disk = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for disk failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/disks/{disk}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                disk,
                project,
            } = self;
            let disk = disk.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/disks/{}",
                client.baseurl,
                encode_path(&disk.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientDisksExt::disk_bulk_write_import`]
    ///
    /// [`ClientDisksExt::disk_bulk_write_import`]: super::ClientDisksExt::disk_bulk_write_import
    #[derive(Debug, Clone)]
    pub struct DiskBulkWriteImport<'a> {
        client: &'a super::Client,
        disk: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
        body: Result<types::builder::ImportBlocksBulkWrite, String>,
    }

    impl<'a> DiskBulkWriteImport<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                disk: Err("disk was not initialized".to_string()),
                project: Ok(None),
                body: Ok(types::builder::ImportBlocksBulkWrite::default()),
            }
        }

        pub fn disk<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.disk = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for disk failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::ImportBlocksBulkWrite>,
            <V as std::convert::TryInto<types::ImportBlocksBulkWrite>>::Error: std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `ImportBlocksBulkWrite` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::ImportBlocksBulkWrite,
            ) -> types::builder::ImportBlocksBulkWrite,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/disks/{disk}/bulk-write`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                disk,
                project,
                body,
            } = self;
            let disk = disk.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::ImportBlocksBulkWrite>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/disks/{}/bulk-write",
                client.baseurl,
                encode_path(&disk.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientDisksExt::disk_bulk_write_import_start`]
    ///
    /// [`ClientDisksExt::disk_bulk_write_import_start`]: super::ClientDisksExt::disk_bulk_write_import_start
    #[derive(Debug, Clone)]
    pub struct DiskBulkWriteImportStart<'a> {
        client: &'a super::Client,
        disk: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> DiskBulkWriteImportStart<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                disk: Err("disk was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn disk<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.disk = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for disk failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `POST` request to `/v1/disks/{disk}/bulk-write-start`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                disk,
                project,
            } = self;
            let disk = disk.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/disks/{}/bulk-write-start",
                client.baseurl,
                encode_path(&disk.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientDisksExt::disk_bulk_write_import_stop`]
    ///
    /// [`ClientDisksExt::disk_bulk_write_import_stop`]: super::ClientDisksExt::disk_bulk_write_import_stop
    #[derive(Debug, Clone)]
    pub struct DiskBulkWriteImportStop<'a> {
        client: &'a super::Client,
        disk: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> DiskBulkWriteImportStop<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                disk: Err("disk was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn disk<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.disk = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for disk failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `POST` request to `/v1/disks/{disk}/bulk-write-stop`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                disk,
                project,
            } = self;
            let disk = disk.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/disks/{}/bulk-write-stop",
                client.baseurl,
                encode_path(&disk.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientDisksExt::disk_finalize_import`]
    ///
    /// [`ClientDisksExt::disk_finalize_import`]: super::ClientDisksExt::disk_finalize_import
    #[derive(Debug, Clone)]
    pub struct DiskFinalizeImport<'a> {
        client: &'a super::Client,
        disk: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
        body: Result<types::builder::FinalizeDisk, String>,
    }

    impl<'a> DiskFinalizeImport<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                disk: Err("disk was not initialized".to_string()),
                project: Ok(None),
                body: Ok(types::builder::FinalizeDisk::default()),
            }
        }

        pub fn disk<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.disk = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for disk failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::FinalizeDisk>,
            <V as std::convert::TryInto<types::FinalizeDisk>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `FinalizeDisk` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::FinalizeDisk) -> types::builder::FinalizeDisk,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/disks/{disk}/finalize`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                disk,
                project,
                body,
            } = self;
            let disk = disk.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::FinalizeDisk>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/disks/{}/finalize",
                client.baseurl,
                encode_path(&disk.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientDisksExt::disk_metrics_list`]
    ///
    /// [`ClientDisksExt::disk_metrics_list`]: super::ClientDisksExt::disk_metrics_list
    #[derive(Debug, Clone)]
    pub struct DiskMetricsList<'a> {
        client: &'a super::Client,
        disk: Result<types::NameOrId, String>,
        metric: Result<types::DiskMetricName, String>,
        end_time: Result<Option<chrono::DateTime<chrono::offset::Utc>>, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        order: Result<Option<types::PaginationOrder>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        start_time: Result<Option<chrono::DateTime<chrono::offset::Utc>>, String>,
    }

    impl<'a> DiskMetricsList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                disk: Err("disk was not initialized".to_string()),
                metric: Err("metric was not initialized".to_string()),
                end_time: Ok(None),
                limit: Ok(None),
                order: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                start_time: Ok(None),
            }
        }

        pub fn disk<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.disk = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for disk failed".to_string());
            self
        }

        pub fn metric<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::DiskMetricName>,
        {
            self.metric = value
                .try_into()
                .map_err(|_| "conversion to `DiskMetricName` for metric failed".to_string());
            self
        }

        pub fn end_time<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
        {
            self.end_time = value.try_into().map(Some).map_err(|_| {
                "conversion to `chrono :: DateTime < chrono :: offset :: Utc >` for end_time failed"
                    .to_string()
            });
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn order<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::PaginationOrder>,
        {
            self.order = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `PaginationOrder` for order failed".to_string());
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn start_time<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
        {
            self.start_time = value.try_into().map(Some).map_err(|_| {
                "conversion to `chrono :: DateTime < chrono :: offset :: Utc >` for start_time \
                 failed"
                    .to_string()
            });
            self
        }

        /// Sends a `GET` request to `/v1/disks/{disk}/metrics/{metric}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::MeasurementResultsPage>, Error<types::Error>> {
            let Self {
                client,
                disk,
                metric,
                end_time,
                limit,
                order,
                page_token,
                project,
                start_time,
            } = self;
            let disk = disk.map_err(Error::InvalidRequest)?;
            let metric = metric.map_err(Error::InvalidRequest)?;
            let end_time = end_time.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let order = order.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let start_time = start_time.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/disks/{}/metrics/{}",
                client.baseurl,
                encode_path(&disk.to_string()),
                encode_path(&metric.to_string()),
            );
            let mut query = Vec::with_capacity(6usize);
            if let Some(v) = &end_time {
                query.push(("end_time", v.to_string()));
            }
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &order {
                query.push(("order", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &start_time {
                query.push(("start_time", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/disks/{disk}/metrics/{metric}`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Measurement, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                end_time: Ok(None),
                limit: Ok(None),
                order: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                start_time: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientFloatingIpsExt::floating_ip_list`]
    ///
    /// [`ClientFloatingIpsExt::floating_ip_list`]: super::ClientFloatingIpsExt::floating_ip_list
    #[derive(Debug, Clone)]
    pub struct FloatingIpList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> FloatingIpList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/floating-ips`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::FloatingIpResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                project,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/floating-ips", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/floating-ips`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::FloatingIp, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientFloatingIpsExt::floating_ip_create`]
    ///
    /// [`ClientFloatingIpsExt::floating_ip_create`]: super::ClientFloatingIpsExt::floating_ip_create
    #[derive(Debug, Clone)]
    pub struct FloatingIpCreate<'a> {
        client: &'a super::Client,
        project: Result<types::NameOrId, String>,
        body: Result<types::builder::FloatingIpCreate, String>,
    }

    impl<'a> FloatingIpCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Err("project was not initialized".to_string()),
                body: Ok(types::builder::FloatingIpCreate::default()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::FloatingIpCreate>,
            <V as std::convert::TryInto<types::FloatingIpCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `FloatingIpCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::FloatingIpCreate,
            ) -> types::builder::FloatingIpCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/floating-ips`
        pub async fn send(self) -> Result<ResponseValue<types::FloatingIp>, Error<types::Error>> {
            let Self {
                client,
                project,
                body,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::FloatingIpCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/floating-ips", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            query.push(("project", project.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientFloatingIpsExt::floating_ip_view`]
    ///
    /// [`ClientFloatingIpsExt::floating_ip_view`]: super::ClientFloatingIpsExt::floating_ip_view
    #[derive(Debug, Clone)]
    pub struct FloatingIpView<'a> {
        client: &'a super::Client,
        floating_ip: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> FloatingIpView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                floating_ip: Err("floating_ip was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn floating_ip<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.floating_ip = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for floating_ip failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/floating-ips/{floating_ip}`
        pub async fn send(self) -> Result<ResponseValue<types::FloatingIp>, Error<types::Error>> {
            let Self {
                client,
                floating_ip,
                project,
            } = self;
            let floating_ip = floating_ip.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/floating-ips/{}",
                client.baseurl,
                encode_path(&floating_ip.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientFloatingIpsExt::floating_ip_delete`]
    ///
    /// [`ClientFloatingIpsExt::floating_ip_delete`]: super::ClientFloatingIpsExt::floating_ip_delete
    #[derive(Debug, Clone)]
    pub struct FloatingIpDelete<'a> {
        client: &'a super::Client,
        floating_ip: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> FloatingIpDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                floating_ip: Err("floating_ip was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn floating_ip<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.floating_ip = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for floating_ip failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/floating-ips/{floating_ip}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                floating_ip,
                project,
            } = self;
            let floating_ip = floating_ip.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/floating-ips/{}",
                client.baseurl,
                encode_path(&floating_ip.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSilosExt::group_list`]
    ///
    /// [`ClientSilosExt::group_list`]: super::ClientSilosExt::group_list
    #[derive(Debug, Clone)]
    pub struct GroupList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> GroupList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/groups`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::GroupResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/groups", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/groups`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Group, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSilosExt::group_view`]
    ///
    /// [`ClientSilosExt::group_view`]: super::ClientSilosExt::group_view
    #[derive(Debug, Clone)]
    pub struct GroupView<'a> {
        client: &'a super::Client,
        group_id: Result<uuid::Uuid, String>,
    }

    impl<'a> GroupView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                group_id: Err("group_id was not initialized".to_string()),
            }
        }

        pub fn group_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.group_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for group_id failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/groups/{group_id}`
        pub async fn send(self) -> Result<ResponseValue<types::Group>, Error<types::Error>> {
            let Self { client, group_id } = self;
            let group_id = group_id.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/groups/{}",
                client.baseurl,
                encode_path(&group_id.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientImagesExt::image_list`]
    ///
    /// [`ClientImagesExt::image_list`]: super::ClientImagesExt::image_list
    #[derive(Debug, Clone)]
    pub struct ImageList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> ImageList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/images`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::ImageResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                project,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/images", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/images`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Image, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientImagesExt::image_create`]
    ///
    /// [`ClientImagesExt::image_create`]: super::ClientImagesExt::image_create
    #[derive(Debug, Clone)]
    pub struct ImageCreate<'a> {
        client: &'a super::Client,
        project: Result<Option<types::NameOrId>, String>,
        body: Result<types::builder::ImageCreate, String>,
    }

    impl<'a> ImageCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Ok(None),
                body: Ok(types::builder::ImageCreate::default()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::ImageCreate>,
            <V as std::convert::TryInto<types::ImageCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `ImageCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::ImageCreate) -> types::builder::ImageCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/images`
        pub async fn send(self) -> Result<ResponseValue<types::Image>, Error<types::Error>> {
            let Self {
                client,
                project,
                body,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::ImageCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/images", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientImagesExt::image_view`]
    ///
    /// [`ClientImagesExt::image_view`]: super::ClientImagesExt::image_view
    #[derive(Debug, Clone)]
    pub struct ImageView<'a> {
        client: &'a super::Client,
        image: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> ImageView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                image: Err("image was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn image<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.image = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for image failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/images/{image}`
        pub async fn send(self) -> Result<ResponseValue<types::Image>, Error<types::Error>> {
            let Self {
                client,
                image,
                project,
            } = self;
            let image = image.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/images/{}",
                client.baseurl,
                encode_path(&image.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientImagesExt::image_delete`]
    ///
    /// [`ClientImagesExt::image_delete`]: super::ClientImagesExt::image_delete
    #[derive(Debug, Clone)]
    pub struct ImageDelete<'a> {
        client: &'a super::Client,
        image: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> ImageDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                image: Err("image was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn image<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.image = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for image failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/images/{image}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                image,
                project,
            } = self;
            let image = image.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/images/{}",
                client.baseurl,
                encode_path(&image.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientImagesExt::image_demote`]
    ///
    /// [`ClientImagesExt::image_demote`]: super::ClientImagesExt::image_demote
    #[derive(Debug, Clone)]
    pub struct ImageDemote<'a> {
        client: &'a super::Client,
        image: Result<types::NameOrId, String>,
        project: Result<types::NameOrId, String>,
    }

    impl<'a> ImageDemote<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                image: Err("image was not initialized".to_string()),
                project: Err("project was not initialized".to_string()),
            }
        }

        pub fn image<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.image = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for image failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `POST` request to `/v1/images/{image}/demote`
        pub async fn send(self) -> Result<ResponseValue<types::Image>, Error<types::Error>> {
            let Self {
                client,
                image,
                project,
            } = self;
            let image = image.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/images/{}/demote",
                client.baseurl,
                encode_path(&image.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            query.push(("project", project.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientImagesExt::image_promote`]
    ///
    /// [`ClientImagesExt::image_promote`]: super::ClientImagesExt::image_promote
    #[derive(Debug, Clone)]
    pub struct ImagePromote<'a> {
        client: &'a super::Client,
        image: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> ImagePromote<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                image: Err("image was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn image<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.image = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for image failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `POST` request to `/v1/images/{image}/promote`
        pub async fn send(self) -> Result<ResponseValue<types::Image>, Error<types::Error>> {
            let Self {
                client,
                image,
                project,
            } = self;
            let image = image.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/images/{}/promote",
                client.baseurl,
                encode_path(&image.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_list`]
    ///
    /// [`ClientInstancesExt::instance_list`]: super::ClientInstancesExt::instance_list
    #[derive(Debug, Clone)]
    pub struct InstanceList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> InstanceList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/instances`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::InstanceResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                project,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/instances", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/instances`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Instance, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientInstancesExt::instance_create`]
    ///
    /// [`ClientInstancesExt::instance_create`]: super::ClientInstancesExt::instance_create
    #[derive(Debug, Clone)]
    pub struct InstanceCreate<'a> {
        client: &'a super::Client,
        project: Result<types::NameOrId, String>,
        body: Result<types::builder::InstanceCreate, String>,
    }

    impl<'a> InstanceCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Err("project was not initialized".to_string()),
                body: Ok(types::builder::InstanceCreate::default()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::InstanceCreate>,
            <V as std::convert::TryInto<types::InstanceCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `InstanceCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::InstanceCreate) -> types::builder::InstanceCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/instances`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                project,
                body,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::InstanceCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/instances", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            query.push(("project", project.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_view`]
    ///
    /// [`ClientInstancesExt::instance_view`]: super::ClientInstancesExt::instance_view
    #[derive(Debug, Clone)]
    pub struct InstanceView<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> InstanceView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/instances/{instance}`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                instance,
                project,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_delete`]
    ///
    /// [`ClientInstancesExt::instance_delete`]: super::ClientInstancesExt::instance_delete
    #[derive(Debug, Clone)]
    pub struct InstanceDelete<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> InstanceDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/instances/{instance}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                instance,
                project,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_disk_list`]
    ///
    /// [`ClientInstancesExt::instance_disk_list`]: super::ClientInstancesExt::instance_disk_list
    #[derive(Debug, Clone)]
    pub struct InstanceDiskList<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> InstanceDiskList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/instances/{instance}/disks`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::DiskResultsPage>, Error<types::Error>> {
            let Self {
                client,
                instance,
                limit,
                page_token,
                project,
                sort_by,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}/disks",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/instances/{instance}/disks`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Disk, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientInstancesExt::instance_disk_attach`]
    ///
    /// [`ClientInstancesExt::instance_disk_attach`]: super::ClientInstancesExt::instance_disk_attach
    #[derive(Debug, Clone)]
    pub struct InstanceDiskAttach<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
        body: Result<types::builder::DiskPath, String>,
    }

    impl<'a> InstanceDiskAttach<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                project: Ok(None),
                body: Ok(types::builder::DiskPath::default()),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::DiskPath>,
            <V as std::convert::TryInto<types::DiskPath>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `DiskPath` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::DiskPath) -> types::builder::DiskPath,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/instances/{instance}/disks/attach`
        pub async fn send(self) -> Result<ResponseValue<types::Disk>, Error<types::Error>> {
            let Self {
                client,
                instance,
                project,
                body,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::DiskPath>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}/disks/attach",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_disk_detach`]
    ///
    /// [`ClientInstancesExt::instance_disk_detach`]: super::ClientInstancesExt::instance_disk_detach
    #[derive(Debug, Clone)]
    pub struct InstanceDiskDetach<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
        body: Result<types::builder::DiskPath, String>,
    }

    impl<'a> InstanceDiskDetach<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                project: Ok(None),
                body: Ok(types::builder::DiskPath::default()),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::DiskPath>,
            <V as std::convert::TryInto<types::DiskPath>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `DiskPath` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::DiskPath) -> types::builder::DiskPath,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/instances/{instance}/disks/detach`
        pub async fn send(self) -> Result<ResponseValue<types::Disk>, Error<types::Error>> {
            let Self {
                client,
                instance,
                project,
                body,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::DiskPath>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}/disks/detach",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_external_ip_list`]
    ///
    /// [`ClientInstancesExt::instance_external_ip_list`]: super::ClientInstancesExt::instance_external_ip_list
    #[derive(Debug, Clone)]
    pub struct InstanceExternalIpList<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> InstanceExternalIpList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/instances/{instance}/external-ips`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::ExternalIpResultsPage>, Error<types::Error>> {
            let Self {
                client,
                instance,
                project,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}/external-ips",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_migrate`]
    ///
    /// [`ClientInstancesExt::instance_migrate`]: super::ClientInstancesExt::instance_migrate
    #[derive(Debug, Clone)]
    pub struct InstanceMigrate<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
        body: Result<types::builder::InstanceMigrate, String>,
    }

    impl<'a> InstanceMigrate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                project: Ok(None),
                body: Ok(types::builder::InstanceMigrate::default()),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::InstanceMigrate>,
            <V as std::convert::TryInto<types::InstanceMigrate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `InstanceMigrate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::InstanceMigrate) -> types::builder::InstanceMigrate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/instances/{instance}/migrate`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                instance,
                project,
                body,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::InstanceMigrate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}/migrate",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_reboot`]
    ///
    /// [`ClientInstancesExt::instance_reboot`]: super::ClientInstancesExt::instance_reboot
    #[derive(Debug, Clone)]
    pub struct InstanceReboot<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> InstanceReboot<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `POST` request to `/v1/instances/{instance}/reboot`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                instance,
                project,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}/reboot",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_serial_console`]
    ///
    /// [`ClientInstancesExt::instance_serial_console`]: super::ClientInstancesExt::instance_serial_console
    #[derive(Debug, Clone)]
    pub struct InstanceSerialConsole<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        from_start: Result<Option<u64>, String>,
        max_bytes: Result<Option<u64>, String>,
        most_recent: Result<Option<u64>, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> InstanceSerialConsole<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                from_start: Ok(None),
                max_bytes: Ok(None),
                most_recent: Ok(None),
                project: Ok(None),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn from_start<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<u64>,
        {
            self.from_start = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `u64` for from_start failed".to_string());
            self
        }

        pub fn max_bytes<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<u64>,
        {
            self.max_bytes = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `u64` for max_bytes failed".to_string());
            self
        }

        pub fn most_recent<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<u64>,
        {
            self.most_recent = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `u64` for most_recent failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/instances/{instance}/serial-console`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::InstanceSerialConsoleData>, Error<types::Error>> {
            let Self {
                client,
                instance,
                from_start,
                max_bytes,
                most_recent,
                project,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let from_start = from_start.map_err(Error::InvalidRequest)?;
            let max_bytes = max_bytes.map_err(Error::InvalidRequest)?;
            let most_recent = most_recent.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}/serial-console",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &from_start {
                query.push(("from_start", v.to_string()));
            }
            if let Some(v) = &max_bytes {
                query.push(("max_bytes", v.to_string()));
            }
            if let Some(v) = &most_recent {
                query.push(("most_recent", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_serial_console_stream`]
    ///
    /// [`ClientInstancesExt::instance_serial_console_stream`]: super::ClientInstancesExt::instance_serial_console_stream
    #[derive(Debug, Clone)]
    pub struct InstanceSerialConsoleStream<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        most_recent: Result<Option<u64>, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> InstanceSerialConsoleStream<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                most_recent: Ok(None),
                project: Ok(None),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn most_recent<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<u64>,
        {
            self.most_recent = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `u64` for most_recent failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to
        /// `/v1/instances/{instance}/serial-console/stream`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<reqwest::Upgraded>, Error<reqwest::Upgraded>> {
            let Self {
                client,
                instance,
                most_recent,
                project,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let most_recent = most_recent.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}/serial-console/stream",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &most_recent {
                query.push(("most_recent", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .query(&query)
                .header(reqwest::header::CONNECTION, "Upgrade")
                .header(reqwest::header::UPGRADE, "websocket")
                .header(reqwest::header::SEC_WEBSOCKET_VERSION, "13")
                .header(
                    reqwest::header::SEC_WEBSOCKET_KEY,
                    base64::Engine::encode(
                        &base64::engine::general_purpose::STANDARD,
                        rand::random::<[u8; 16]>(),
                    ),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                101u16 => ResponseValue::upgrade(response).await,
                200..=299 => ResponseValue::upgrade(response).await,
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_start`]
    ///
    /// [`ClientInstancesExt::instance_start`]: super::ClientInstancesExt::instance_start
    #[derive(Debug, Clone)]
    pub struct InstanceStart<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> InstanceStart<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `POST` request to `/v1/instances/{instance}/start`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                instance,
                project,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}/start",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_stop`]
    ///
    /// [`ClientInstancesExt::instance_stop`]: super::ClientInstancesExt::instance_stop
    #[derive(Debug, Clone)]
    pub struct InstanceStop<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> InstanceStop<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `POST` request to `/v1/instances/{instance}/stop`
        pub async fn send(self) -> Result<ResponseValue<types::Instance>, Error<types::Error>> {
            let Self {
                client,
                instance,
                project,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/instances/{}/stop",
                client.baseurl,
                encode_path(&instance.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                202u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientProjectsExt::project_ip_pool_list`]
    ///
    /// [`ClientProjectsExt::project_ip_pool_list`]: super::ClientProjectsExt::project_ip_pool_list
    #[derive(Debug, Clone)]
    pub struct ProjectIpPoolList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> ProjectIpPoolList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/ip-pools`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::IpPoolResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                project,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/ip-pools", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/ip-pools`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::IpPool, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientProjectsExt::project_ip_pool_view`]
    ///
    /// [`ClientProjectsExt::project_ip_pool_view`]: super::ClientProjectsExt::project_ip_pool_view
    #[derive(Debug, Clone)]
    pub struct ProjectIpPoolView<'a> {
        client: &'a super::Client,
        pool: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> ProjectIpPoolView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                pool: Err("pool was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn pool<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.pool = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for pool failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/ip-pools/{pool}`
        pub async fn send(self) -> Result<ResponseValue<types::IpPool>, Error<types::Error>> {
            let Self {
                client,
                pool,
                project,
            } = self;
            let pool = pool.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/ip-pools/{}",
                client.baseurl,
                encode_path(&pool.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientLoginExt::login_local`]
    ///
    /// [`ClientLoginExt::login_local`]: super::ClientLoginExt::login_local
    #[derive(Debug, Clone)]
    pub struct LoginLocal<'a> {
        client: &'a super::Client,
        silo_name: Result<types::Name, String>,
        body: Result<types::builder::UsernamePasswordCredentials, String>,
    }

    impl<'a> LoginLocal<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo_name: Err("silo_name was not initialized".to_string()),
                body: Ok(types::builder::UsernamePasswordCredentials::default()),
            }
        }

        pub fn silo_name<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::Name>,
        {
            self.silo_name = value
                .try_into()
                .map_err(|_| "conversion to `Name` for silo_name failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::UsernamePasswordCredentials>,
            <V as std::convert::TryInto<types::UsernamePasswordCredentials>>::Error:
                std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `UsernamePasswordCredentials` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::UsernamePasswordCredentials,
            ) -> types::builder::UsernamePasswordCredentials,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/login/{silo_name}/local`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                silo_name,
                body,
            } = self;
            let silo_name = silo_name.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::UsernamePasswordCredentials>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/login/{}/local",
                client.baseurl,
                encode_path(&silo_name.to_string()),
            );
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientHiddenExt::logout`]
    ///
    /// [`ClientHiddenExt::logout`]: super::ClientHiddenExt::logout
    #[derive(Debug, Clone)]
    pub struct Logout<'a> {
        client: &'a super::Client,
    }

    impl<'a> Logout<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client: client }
        }

        /// Sends a `POST` request to `/v1/logout`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/v1/logout", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSessionExt::current_user_view`]
    ///
    /// [`ClientSessionExt::current_user_view`]: super::ClientSessionExt::current_user_view
    #[derive(Debug, Clone)]
    pub struct CurrentUserView<'a> {
        client: &'a super::Client,
    }

    impl<'a> CurrentUserView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client: client }
        }

        /// Sends a `GET` request to `/v1/me`
        pub async fn send(self) -> Result<ResponseValue<types::CurrentUser>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/v1/me", client.baseurl,);
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSessionExt::current_user_groups`]
    ///
    /// [`ClientSessionExt::current_user_groups`]: super::ClientSessionExt::current_user_groups
    #[derive(Debug, Clone)]
    pub struct CurrentUserGroups<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> CurrentUserGroups<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/me/groups`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::GroupResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/me/groups", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/me/groups`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Group, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSessionExt::current_user_ssh_key_list`]
    ///
    /// [`ClientSessionExt::current_user_ssh_key_list`]: super::ClientSessionExt::current_user_ssh_key_list
    #[derive(Debug, Clone)]
    pub struct CurrentUserSshKeyList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> CurrentUserSshKeyList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/me/ssh-keys`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SshKeyResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/me/ssh-keys", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/me/ssh-keys`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::SshKey, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSessionExt::current_user_ssh_key_create`]
    ///
    /// [`ClientSessionExt::current_user_ssh_key_create`]: super::ClientSessionExt::current_user_ssh_key_create
    #[derive(Debug, Clone)]
    pub struct CurrentUserSshKeyCreate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::SshKeyCreate, String>,
    }

    impl<'a> CurrentUserSshKeyCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::SshKeyCreate::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SshKeyCreate>,
            <V as std::convert::TryInto<types::SshKeyCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `SshKeyCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::SshKeyCreate) -> types::builder::SshKeyCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/me/ssh-keys`
        pub async fn send(self) -> Result<ResponseValue<types::SshKey>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::SshKeyCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/me/ssh-keys", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSessionExt::current_user_ssh_key_view`]
    ///
    /// [`ClientSessionExt::current_user_ssh_key_view`]: super::ClientSessionExt::current_user_ssh_key_view
    #[derive(Debug, Clone)]
    pub struct CurrentUserSshKeyView<'a> {
        client: &'a super::Client,
        ssh_key: Result<types::NameOrId, String>,
    }

    impl<'a> CurrentUserSshKeyView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                ssh_key: Err("ssh_key was not initialized".to_string()),
            }
        }

        pub fn ssh_key<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.ssh_key = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for ssh_key failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/me/ssh-keys/{ssh_key}`
        pub async fn send(self) -> Result<ResponseValue<types::SshKey>, Error<types::Error>> {
            let Self { client, ssh_key } = self;
            let ssh_key = ssh_key.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/me/ssh-keys/{}",
                client.baseurl,
                encode_path(&ssh_key.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSessionExt::current_user_ssh_key_delete`]
    ///
    /// [`ClientSessionExt::current_user_ssh_key_delete`]: super::ClientSessionExt::current_user_ssh_key_delete
    #[derive(Debug, Clone)]
    pub struct CurrentUserSshKeyDelete<'a> {
        client: &'a super::Client,
        ssh_key: Result<types::NameOrId, String>,
    }

    impl<'a> CurrentUserSshKeyDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                ssh_key: Err("ssh_key was not initialized".to_string()),
            }
        }

        pub fn ssh_key<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.ssh_key = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for ssh_key failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/me/ssh-keys/{ssh_key}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, ssh_key } = self;
            let ssh_key = ssh_key.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/me/ssh-keys/{}",
                client.baseurl,
                encode_path(&ssh_key.to_string()),
            );
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientMetricsExt::silo_metric`]
    ///
    /// [`ClientMetricsExt::silo_metric`]: super::ClientMetricsExt::silo_metric
    #[derive(Debug, Clone)]
    pub struct SiloMetric<'a> {
        client: &'a super::Client,
        metric_name: Result<types::SystemMetricName, String>,
        end_time: Result<Option<chrono::DateTime<chrono::offset::Utc>>, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        order: Result<Option<types::PaginationOrder>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        start_time: Result<Option<chrono::DateTime<chrono::offset::Utc>>, String>,
    }

    impl<'a> SiloMetric<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                metric_name: Err("metric_name was not initialized".to_string()),
                end_time: Ok(None),
                limit: Ok(None),
                order: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                start_time: Ok(None),
            }
        }

        pub fn metric_name<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SystemMetricName>,
        {
            self.metric_name = value
                .try_into()
                .map_err(|_| "conversion to `SystemMetricName` for metric_name failed".to_string());
            self
        }

        pub fn end_time<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
        {
            self.end_time = value.try_into().map(Some).map_err(|_| {
                "conversion to `chrono :: DateTime < chrono :: offset :: Utc >` for end_time failed"
                    .to_string()
            });
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn order<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::PaginationOrder>,
        {
            self.order = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `PaginationOrder` for order failed".to_string());
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn start_time<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
        {
            self.start_time = value.try_into().map(Some).map_err(|_| {
                "conversion to `chrono :: DateTime < chrono :: offset :: Utc >` for start_time \
                 failed"
                    .to_string()
            });
            self
        }

        /// Sends a `GET` request to `/v1/metrics/{metric_name}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::MeasurementResultsPage>, Error<types::Error>> {
            let Self {
                client,
                metric_name,
                end_time,
                limit,
                order,
                page_token,
                project,
                start_time,
            } = self;
            let metric_name = metric_name.map_err(Error::InvalidRequest)?;
            let end_time = end_time.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let order = order.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let start_time = start_time.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/metrics/{}",
                client.baseurl,
                encode_path(&metric_name.to_string()),
            );
            let mut query = Vec::with_capacity(6usize);
            if let Some(v) = &end_time {
                query.push(("end_time", v.to_string()));
            }
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &order {
                query.push(("order", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &start_time {
                query.push(("start_time", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/metrics/{metric_name}`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Measurement, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                end_time: Ok(None),
                limit: Ok(None),
                order: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                start_time: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientInstancesExt::instance_network_interface_list`]
    ///
    /// [`ClientInstancesExt::instance_network_interface_list`]: super::ClientInstancesExt::instance_network_interface_list
    #[derive(Debug, Clone)]
    pub struct InstanceNetworkInterfaceList<'a> {
        client: &'a super::Client,
        instance: Result<Option<types::NameOrId>, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> InstanceNetworkInterfaceList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Ok(None),
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/network-interfaces`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::InstanceNetworkInterfaceResultsPage>, Error<types::Error>>
        {
            let Self {
                client,
                instance,
                limit,
                page_token,
                project,
                sort_by,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/network-interfaces", client.baseurl,);
            let mut query = Vec::with_capacity(5usize);
            if let Some(v) = &instance {
                query.push(("instance", v.to_string()));
            }
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/network-interfaces`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::InstanceNetworkInterface, Error<types::Error>>>
               + Unpin
               + 'a {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                instance: Ok(None),
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientInstancesExt::instance_network_interface_create`]
    ///
    /// [`ClientInstancesExt::instance_network_interface_create`]: super::ClientInstancesExt::instance_network_interface_create
    #[derive(Debug, Clone)]
    pub struct InstanceNetworkInterfaceCreate<'a> {
        client: &'a super::Client,
        instance: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
        body: Result<types::builder::InstanceNetworkInterfaceCreate, String>,
    }

    impl<'a> InstanceNetworkInterfaceCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                instance: Err("instance was not initialized".to_string()),
                project: Ok(None),
                body: Ok(types::builder::InstanceNetworkInterfaceCreate::default()),
            }
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::InstanceNetworkInterfaceCreate>,
            <V as std::convert::TryInto<types::InstanceNetworkInterfaceCreate>>::Error:
                std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `InstanceNetworkInterfaceCreate` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::InstanceNetworkInterfaceCreate,
            ) -> types::builder::InstanceNetworkInterfaceCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/network-interfaces`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::InstanceNetworkInterface>, Error<types::Error>> {
            let Self {
                client,
                instance,
                project,
                body,
            } = self;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::InstanceNetworkInterfaceCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/network-interfaces", client.baseurl,);
            let mut query = Vec::with_capacity(2usize);
            query.push(("instance", instance.to_string()));
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_network_interface_view`]
    ///
    /// [`ClientInstancesExt::instance_network_interface_view`]: super::ClientInstancesExt::instance_network_interface_view
    #[derive(Debug, Clone)]
    pub struct InstanceNetworkInterfaceView<'a> {
        client: &'a super::Client,
        interface: Result<types::NameOrId, String>,
        instance: Result<Option<types::NameOrId>, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> InstanceNetworkInterfaceView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                interface: Err("interface was not initialized".to_string()),
                instance: Ok(None),
                project: Ok(None),
            }
        }

        pub fn interface<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.interface = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for interface failed".to_string());
            self
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/network-interfaces/{interface}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::InstanceNetworkInterface>, Error<types::Error>> {
            let Self {
                client,
                interface,
                instance,
                project,
            } = self;
            let interface = interface.map_err(Error::InvalidRequest)?;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/network-interfaces/{}",
                client.baseurl,
                encode_path(&interface.to_string()),
            );
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &instance {
                query.push(("instance", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_network_interface_update`]
    ///
    /// [`ClientInstancesExt::instance_network_interface_update`]: super::ClientInstancesExt::instance_network_interface_update
    #[derive(Debug, Clone)]
    pub struct InstanceNetworkInterfaceUpdate<'a> {
        client: &'a super::Client,
        interface: Result<types::NameOrId, String>,
        instance: Result<Option<types::NameOrId>, String>,
        project: Result<Option<types::NameOrId>, String>,
        body: Result<types::builder::InstanceNetworkInterfaceUpdate, String>,
    }

    impl<'a> InstanceNetworkInterfaceUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                interface: Err("interface was not initialized".to_string()),
                instance: Ok(None),
                project: Ok(None),
                body: Ok(types::builder::InstanceNetworkInterfaceUpdate::default()),
            }
        }

        pub fn interface<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.interface = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for interface failed".to_string());
            self
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::InstanceNetworkInterfaceUpdate>,
            <V as std::convert::TryInto<types::InstanceNetworkInterfaceUpdate>>::Error:
                std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `InstanceNetworkInterfaceUpdate` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::InstanceNetworkInterfaceUpdate,
            ) -> types::builder::InstanceNetworkInterfaceUpdate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/network-interfaces/{interface}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::InstanceNetworkInterface>, Error<types::Error>> {
            let Self {
                client,
                interface,
                instance,
                project,
                body,
            } = self;
            let interface = interface.map_err(Error::InvalidRequest)?;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::InstanceNetworkInterfaceUpdate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/network-interfaces/{}",
                client.baseurl,
                encode_path(&interface.to_string()),
            );
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &instance {
                query.push(("instance", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientInstancesExt::instance_network_interface_delete`]
    ///
    /// [`ClientInstancesExt::instance_network_interface_delete`]: super::ClientInstancesExt::instance_network_interface_delete
    #[derive(Debug, Clone)]
    pub struct InstanceNetworkInterfaceDelete<'a> {
        client: &'a super::Client,
        interface: Result<types::NameOrId, String>,
        instance: Result<Option<types::NameOrId>, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> InstanceNetworkInterfaceDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                interface: Err("interface was not initialized".to_string()),
                instance: Ok(None),
                project: Ok(None),
            }
        }

        pub fn interface<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.interface = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for interface failed".to_string());
            self
        }

        pub fn instance<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.instance = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for instance failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/network-interfaces/{interface}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                interface,
                instance,
                project,
            } = self;
            let interface = interface.map_err(Error::InvalidRequest)?;
            let instance = instance.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/network-interfaces/{}",
                client.baseurl,
                encode_path(&interface.to_string()),
            );
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &instance {
                query.push(("instance", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemStatusExt::ping`]
    ///
    /// [`ClientSystemStatusExt::ping`]: super::ClientSystemStatusExt::ping
    #[derive(Debug, Clone)]
    pub struct Ping<'a> {
        client: &'a super::Client,
    }

    impl<'a> Ping<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client: client }
        }

        /// Sends a `GET` request to `/v1/ping`
        pub async fn send(self) -> Result<ResponseValue<types::Ping>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/v1/ping", client.baseurl,);
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSilosExt::policy_view`]
    ///
    /// [`ClientSilosExt::policy_view`]: super::ClientSilosExt::policy_view
    #[derive(Debug, Clone)]
    pub struct PolicyView<'a> {
        client: &'a super::Client,
    }

    impl<'a> PolicyView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client: client }
        }

        /// Sends a `GET` request to `/v1/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloRolePolicy>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/v1/policy", client.baseurl,);
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSilosExt::policy_update`]
    ///
    /// [`ClientSilosExt::policy_update`]: super::ClientSilosExt::policy_update
    #[derive(Debug, Clone)]
    pub struct PolicyUpdate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::SiloRolePolicy, String>,
    }

    impl<'a> PolicyUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::SiloRolePolicy::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SiloRolePolicy>,
            <V as std::convert::TryInto<types::SiloRolePolicy>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `SiloRolePolicy` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::SiloRolePolicy) -> types::builder::SiloRolePolicy,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloRolePolicy>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::SiloRolePolicy>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/policy", client.baseurl,);
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientProjectsExt::project_list`]
    ///
    /// [`ClientProjectsExt::project_list`]: super::ClientProjectsExt::project_list
    #[derive(Debug, Clone)]
    pub struct ProjectList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> ProjectList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/projects`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::ProjectResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/projects", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/projects`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Project, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientProjectsExt::project_create`]
    ///
    /// [`ClientProjectsExt::project_create`]: super::ClientProjectsExt::project_create
    #[derive(Debug, Clone)]
    pub struct ProjectCreate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::ProjectCreate, String>,
    }

    impl<'a> ProjectCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::ProjectCreate::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::ProjectCreate>,
            <V as std::convert::TryInto<types::ProjectCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `ProjectCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::ProjectCreate) -> types::builder::ProjectCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/projects`
        pub async fn send(self) -> Result<ResponseValue<types::Project>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::ProjectCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/projects", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientProjectsExt::project_view`]
    ///
    /// [`ClientProjectsExt::project_view`]: super::ClientProjectsExt::project_view
    #[derive(Debug, Clone)]
    pub struct ProjectView<'a> {
        client: &'a super::Client,
        project: Result<types::NameOrId, String>,
    }

    impl<'a> ProjectView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Err("project was not initialized".to_string()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/projects/{project}`
        pub async fn send(self) -> Result<ResponseValue<types::Project>, Error<types::Error>> {
            let Self { client, project } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/projects/{}",
                client.baseurl,
                encode_path(&project.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientProjectsExt::project_update`]
    ///
    /// [`ClientProjectsExt::project_update`]: super::ClientProjectsExt::project_update
    #[derive(Debug, Clone)]
    pub struct ProjectUpdate<'a> {
        client: &'a super::Client,
        project: Result<types::NameOrId, String>,
        body: Result<types::builder::ProjectUpdate, String>,
    }

    impl<'a> ProjectUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Err("project was not initialized".to_string()),
                body: Ok(types::builder::ProjectUpdate::default()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::ProjectUpdate>,
            <V as std::convert::TryInto<types::ProjectUpdate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `ProjectUpdate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::ProjectUpdate) -> types::builder::ProjectUpdate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/projects/{project}`
        pub async fn send(self) -> Result<ResponseValue<types::Project>, Error<types::Error>> {
            let Self {
                client,
                project,
                body,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::ProjectUpdate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/projects/{}",
                client.baseurl,
                encode_path(&project.to_string()),
            );
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientProjectsExt::project_delete`]
    ///
    /// [`ClientProjectsExt::project_delete`]: super::ClientProjectsExt::project_delete
    #[derive(Debug, Clone)]
    pub struct ProjectDelete<'a> {
        client: &'a super::Client,
        project: Result<types::NameOrId, String>,
    }

    impl<'a> ProjectDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Err("project was not initialized".to_string()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/projects/{project}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, project } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/projects/{}",
                client.baseurl,
                encode_path(&project.to_string()),
            );
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientProjectsExt::project_policy_view`]
    ///
    /// [`ClientProjectsExt::project_policy_view`]: super::ClientProjectsExt::project_policy_view
    #[derive(Debug, Clone)]
    pub struct ProjectPolicyView<'a> {
        client: &'a super::Client,
        project: Result<types::NameOrId, String>,
    }

    impl<'a> ProjectPolicyView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Err("project was not initialized".to_string()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/projects/{project}/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::ProjectRolePolicy>, Error<types::Error>> {
            let Self { client, project } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/projects/{}/policy",
                client.baseurl,
                encode_path(&project.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientProjectsExt::project_policy_update`]
    ///
    /// [`ClientProjectsExt::project_policy_update`]: super::ClientProjectsExt::project_policy_update
    #[derive(Debug, Clone)]
    pub struct ProjectPolicyUpdate<'a> {
        client: &'a super::Client,
        project: Result<types::NameOrId, String>,
        body: Result<types::builder::ProjectRolePolicy, String>,
    }

    impl<'a> ProjectPolicyUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Err("project was not initialized".to_string()),
                body: Ok(types::builder::ProjectRolePolicy::default()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::ProjectRolePolicy>,
            <V as std::convert::TryInto<types::ProjectRolePolicy>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `ProjectRolePolicy` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::ProjectRolePolicy,
            ) -> types::builder::ProjectRolePolicy,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/projects/{project}/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::ProjectRolePolicy>, Error<types::Error>> {
            let Self {
                client,
                project,
                body,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::ProjectRolePolicy>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/projects/{}/policy",
                client.baseurl,
                encode_path(&project.to_string()),
            );
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSnapshotsExt::snapshot_list`]
    ///
    /// [`ClientSnapshotsExt::snapshot_list`]: super::ClientSnapshotsExt::snapshot_list
    #[derive(Debug, Clone)]
    pub struct SnapshotList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> SnapshotList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/snapshots`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SnapshotResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                project,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/snapshots", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/snapshots`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Snapshot, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSnapshotsExt::snapshot_create`]
    ///
    /// [`ClientSnapshotsExt::snapshot_create`]: super::ClientSnapshotsExt::snapshot_create
    #[derive(Debug, Clone)]
    pub struct SnapshotCreate<'a> {
        client: &'a super::Client,
        project: Result<types::NameOrId, String>,
        body: Result<types::builder::SnapshotCreate, String>,
    }

    impl<'a> SnapshotCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Err("project was not initialized".to_string()),
                body: Ok(types::builder::SnapshotCreate::default()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SnapshotCreate>,
            <V as std::convert::TryInto<types::SnapshotCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `SnapshotCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::SnapshotCreate) -> types::builder::SnapshotCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/snapshots`
        pub async fn send(self) -> Result<ResponseValue<types::Snapshot>, Error<types::Error>> {
            let Self {
                client,
                project,
                body,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::SnapshotCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/snapshots", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            query.push(("project", project.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSnapshotsExt::snapshot_view`]
    ///
    /// [`ClientSnapshotsExt::snapshot_view`]: super::ClientSnapshotsExt::snapshot_view
    #[derive(Debug, Clone)]
    pub struct SnapshotView<'a> {
        client: &'a super::Client,
        snapshot: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> SnapshotView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                snapshot: Err("snapshot was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn snapshot<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.snapshot = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for snapshot failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/snapshots/{snapshot}`
        pub async fn send(self) -> Result<ResponseValue<types::Snapshot>, Error<types::Error>> {
            let Self {
                client,
                snapshot,
                project,
            } = self;
            let snapshot = snapshot.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/snapshots/{}",
                client.baseurl,
                encode_path(&snapshot.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSnapshotsExt::snapshot_delete`]
    ///
    /// [`ClientSnapshotsExt::snapshot_delete`]: super::ClientSnapshotsExt::snapshot_delete
    #[derive(Debug, Clone)]
    pub struct SnapshotDelete<'a> {
        client: &'a super::Client,
        snapshot: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> SnapshotDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                snapshot: Err("snapshot was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn snapshot<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.snapshot = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for snapshot failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/snapshots/{snapshot}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                snapshot,
                project,
            } = self;
            let snapshot = snapshot.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/snapshots/{}",
                client.baseurl,
                encode_path(&snapshot.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemHardwareExt::physical_disk_list`]
    ///
    /// [`ClientSystemHardwareExt::physical_disk_list`]: super::ClientSystemHardwareExt::physical_disk_list
    #[derive(Debug, Clone)]
    pub struct PhysicalDiskList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> PhysicalDiskList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/hardware/disks`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::PhysicalDiskResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/hardware/disks", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/hardware/disks`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::PhysicalDisk, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemHardwareExt::rack_list`]
    ///
    /// [`ClientSystemHardwareExt::rack_list`]: super::ClientSystemHardwareExt::rack_list
    #[derive(Debug, Clone)]
    pub struct RackList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> RackList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/hardware/racks`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::RackResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/hardware/racks", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/hardware/racks`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Rack, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemHardwareExt::rack_view`]
    ///
    /// [`ClientSystemHardwareExt::rack_view`]: super::ClientSystemHardwareExt::rack_view
    #[derive(Debug, Clone)]
    pub struct RackView<'a> {
        client: &'a super::Client,
        rack_id: Result<uuid::Uuid, String>,
    }

    impl<'a> RackView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                rack_id: Err("rack_id was not initialized".to_string()),
            }
        }

        pub fn rack_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.rack_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for rack_id failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/hardware/racks/{rack_id}`
        pub async fn send(self) -> Result<ResponseValue<types::Rack>, Error<types::Error>> {
            let Self { client, rack_id } = self;
            let rack_id = rack_id.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/hardware/racks/{}",
                client.baseurl,
                encode_path(&rack_id.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemHardwareExt::sled_list`]
    ///
    /// [`ClientSystemHardwareExt::sled_list`]: super::ClientSystemHardwareExt::sled_list
    #[derive(Debug, Clone)]
    pub struct SledList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> SledList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/hardware/sleds`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SledResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/hardware/sleds", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/hardware/sleds`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Sled, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemHardwareExt::add_sled_to_initialized_rack`]
    ///
    /// [`ClientSystemHardwareExt::add_sled_to_initialized_rack`]: super::ClientSystemHardwareExt::add_sled_to_initialized_rack
    #[derive(Debug, Clone)]
    pub struct AddSledToInitializedRack<'a> {
        client: &'a super::Client,
        body: Result<types::builder::UninitializedSled, String>,
    }

    impl<'a> AddSledToInitializedRack<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::UninitializedSled::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::UninitializedSled>,
            <V as std::convert::TryInto<types::UninitializedSled>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `UninitializedSled` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::UninitializedSled,
            ) -> types::builder::UninitializedSled,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/system/hardware/sleds`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::UninitializedSled>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/hardware/sleds", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemHardwareExt::sled_view`]
    ///
    /// [`ClientSystemHardwareExt::sled_view`]: super::ClientSystemHardwareExt::sled_view
    #[derive(Debug, Clone)]
    pub struct SledView<'a> {
        client: &'a super::Client,
        sled_id: Result<uuid::Uuid, String>,
    }

    impl<'a> SledView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                sled_id: Err("sled_id was not initialized".to_string()),
            }
        }

        pub fn sled_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.sled_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for sled_id failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/hardware/sleds/{sled_id}`
        pub async fn send(self) -> Result<ResponseValue<types::Sled>, Error<types::Error>> {
            let Self { client, sled_id } = self;
            let sled_id = sled_id.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/hardware/sleds/{}",
                client.baseurl,
                encode_path(&sled_id.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemHardwareExt::sled_physical_disk_list`]
    ///
    /// [`ClientSystemHardwareExt::sled_physical_disk_list`]: super::ClientSystemHardwareExt::sled_physical_disk_list
    #[derive(Debug, Clone)]
    pub struct SledPhysicalDiskList<'a> {
        client: &'a super::Client,
        sled_id: Result<uuid::Uuid, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> SledPhysicalDiskList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                sled_id: Err("sled_id was not initialized".to_string()),
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn sled_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.sled_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for sled_id failed".to_string());
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/hardware/sleds/{sled_id}/disks`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::PhysicalDiskResultsPage>, Error<types::Error>> {
            let Self {
                client,
                sled_id,
                limit,
                page_token,
                sort_by,
            } = self;
            let sled_id = sled_id.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/hardware/sleds/{}/disks",
                client.baseurl,
                encode_path(&sled_id.to_string()),
            );
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to
        /// `/v1/system/hardware/sleds/{sled_id}/disks`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::PhysicalDisk, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemHardwareExt::sled_instance_list`]
    ///
    /// [`ClientSystemHardwareExt::sled_instance_list`]: super::ClientSystemHardwareExt::sled_instance_list
    #[derive(Debug, Clone)]
    pub struct SledInstanceList<'a> {
        client: &'a super::Client,
        sled_id: Result<uuid::Uuid, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> SledInstanceList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                sled_id: Err("sled_id was not initialized".to_string()),
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn sled_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.sled_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for sled_id failed".to_string());
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to
        /// `/v1/system/hardware/sleds/{sled_id}/instances`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SledInstanceResultsPage>, Error<types::Error>> {
            let Self {
                client,
                sled_id,
                limit,
                page_token,
                sort_by,
            } = self;
            let sled_id = sled_id.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/hardware/sleds/{}/instances",
                client.baseurl,
                encode_path(&sled_id.to_string()),
            );
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to
        /// `/v1/system/hardware/sleds/{sled_id}/instances`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::SledInstance, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemHardwareExt::sled_set_provision_state`]
    ///
    /// [`ClientSystemHardwareExt::sled_set_provision_state`]: super::ClientSystemHardwareExt::sled_set_provision_state
    #[derive(Debug, Clone)]
    pub struct SledSetProvisionState<'a> {
        client: &'a super::Client,
        sled_id: Result<uuid::Uuid, String>,
        body: Result<types::builder::SledProvisionStateParams, String>,
    }

    impl<'a> SledSetProvisionState<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                sled_id: Err("sled_id was not initialized".to_string()),
                body: Ok(types::builder::SledProvisionStateParams::default()),
            }
        }

        pub fn sled_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.sled_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for sled_id failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SledProvisionStateParams>,
            <V as std::convert::TryInto<types::SledProvisionStateParams>>::Error: std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `SledProvisionStateParams` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::SledProvisionStateParams,
            ) -> types::builder::SledProvisionStateParams,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to
        /// `/v1/system/hardware/sleds/{sled_id}/provision-state`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SledProvisionStateResponse>, Error<types::Error>> {
            let Self {
                client,
                sled_id,
                body,
            } = self;
            let sled_id = sled_id.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::SledProvisionStateParams>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/hardware/sleds/{}/provision-state",
                client.baseurl,
                encode_path(&sled_id.to_string()),
            );
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemHardwareExt::sled_list_uninitialized`]
    ///
    /// [`ClientSystemHardwareExt::sled_list_uninitialized`]: super::ClientSystemHardwareExt::sled_list_uninitialized
    #[derive(Debug, Clone)]
    pub struct SledListUninitialized<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
    }

    impl<'a> SledListUninitialized<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/hardware/sleds-uninitialized`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::UninitializedSledResultsPage>, Error<types::Error>>
        {
            let Self {
                client,
                limit,
                page_token,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/hardware/sleds-uninitialized", client.baseurl,);
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/hardware/sleds-uninitialized`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::UninitializedSled, Error<types::Error>>>
               + Unpin
               + 'a {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemHardwareExt::networking_switch_port_list`]
    ///
    /// [`ClientSystemHardwareExt::networking_switch_port_list`]: super::ClientSystemHardwareExt::networking_switch_port_list
    #[derive(Debug, Clone)]
    pub struct NetworkingSwitchPortList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
        switch_port_id: Result<Option<uuid::Uuid>, String>,
    }

    impl<'a> NetworkingSwitchPortList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                switch_port_id: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        pub fn switch_port_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.switch_port_id = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `uuid :: Uuid` for switch_port_id failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/hardware/switch-port`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SwitchPortResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
                switch_port_id,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let switch_port_id = switch_port_id.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/hardware/switch-port", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            if let Some(v) = &switch_port_id {
                query.push(("switch_port_id", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/hardware/switch-port`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::SwitchPort, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                switch_port_id: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for
    /// [`ClientSystemHardwareExt::networking_switch_port_apply_settings`]
    ///
    /// [`ClientSystemHardwareExt::networking_switch_port_apply_settings`]: super::ClientSystemHardwareExt::networking_switch_port_apply_settings
    #[derive(Debug, Clone)]
    pub struct NetworkingSwitchPortApplySettings<'a> {
        client: &'a super::Client,
        port: Result<types::Name, String>,
        rack_id: Result<uuid::Uuid, String>,
        switch_location: Result<types::Name, String>,
        body: Result<types::builder::SwitchPortApplySettings, String>,
    }

    impl<'a> NetworkingSwitchPortApplySettings<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                port: Err("port was not initialized".to_string()),
                rack_id: Err("rack_id was not initialized".to_string()),
                switch_location: Err("switch_location was not initialized".to_string()),
                body: Ok(types::builder::SwitchPortApplySettings::default()),
            }
        }

        pub fn port<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::Name>,
        {
            self.port = value
                .try_into()
                .map_err(|_| "conversion to `Name` for port failed".to_string());
            self
        }

        pub fn rack_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.rack_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for rack_id failed".to_string());
            self
        }

        pub fn switch_location<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::Name>,
        {
            self.switch_location = value
                .try_into()
                .map_err(|_| "conversion to `Name` for switch_location failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SwitchPortApplySettings>,
            <V as std::convert::TryInto<types::SwitchPortApplySettings>>::Error: std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `SwitchPortApplySettings` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::SwitchPortApplySettings,
            ) -> types::builder::SwitchPortApplySettings,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to
        /// `/v1/system/hardware/switch-port/{port}/settings`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                port,
                rack_id,
                switch_location,
                body,
            } = self;
            let port = port.map_err(Error::InvalidRequest)?;
            let rack_id = rack_id.map_err(Error::InvalidRequest)?;
            let switch_location = switch_location.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::SwitchPortApplySettings>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/hardware/switch-port/{}/settings",
                client.baseurl,
                encode_path(&port.to_string()),
            );
            let mut query = Vec::with_capacity(2usize);
            query.push(("rack_id", rack_id.to_string()));
            query.push(("switch_location", switch_location.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemHardwareExt::networking_switch_port_clear_settings`]
    ///
    /// [`ClientSystemHardwareExt::networking_switch_port_clear_settings`]: super::ClientSystemHardwareExt::networking_switch_port_clear_settings
    #[derive(Debug, Clone)]
    pub struct NetworkingSwitchPortClearSettings<'a> {
        client: &'a super::Client,
        port: Result<types::Name, String>,
        rack_id: Result<uuid::Uuid, String>,
        switch_location: Result<types::Name, String>,
    }

    impl<'a> NetworkingSwitchPortClearSettings<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                port: Err("port was not initialized".to_string()),
                rack_id: Err("rack_id was not initialized".to_string()),
                switch_location: Err("switch_location was not initialized".to_string()),
            }
        }

        pub fn port<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::Name>,
        {
            self.port = value
                .try_into()
                .map_err(|_| "conversion to `Name` for port failed".to_string());
            self
        }

        pub fn rack_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.rack_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for rack_id failed".to_string());
            self
        }

        pub fn switch_location<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::Name>,
        {
            self.switch_location = value
                .try_into()
                .map_err(|_| "conversion to `Name` for switch_location failed".to_string());
            self
        }

        /// Sends a `DELETE` request to
        /// `/v1/system/hardware/switch-port/{port}/settings`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                port,
                rack_id,
                switch_location,
            } = self;
            let port = port.map_err(Error::InvalidRequest)?;
            let rack_id = rack_id.map_err(Error::InvalidRequest)?;
            let switch_location = switch_location.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/hardware/switch-port/{}/settings",
                client.baseurl,
                encode_path(&port.to_string()),
            );
            let mut query = Vec::with_capacity(2usize);
            query.push(("rack_id", rack_id.to_string()));
            query.push(("switch_location", switch_location.to_string()));
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemHardwareExt::switch_list`]
    ///
    /// [`ClientSystemHardwareExt::switch_list`]: super::ClientSystemHardwareExt::switch_list
    #[derive(Debug, Clone)]
    pub struct SwitchList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> SwitchList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/hardware/switches`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SwitchResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/hardware/switches", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/hardware/switches`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Switch, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemHardwareExt::switch_view`]
    ///
    /// [`ClientSystemHardwareExt::switch_view`]: super::ClientSystemHardwareExt::switch_view
    #[derive(Debug, Clone)]
    pub struct SwitchView<'a> {
        client: &'a super::Client,
        switch_id: Result<uuid::Uuid, String>,
    }

    impl<'a> SwitchView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                switch_id: Err("switch_id was not initialized".to_string()),
            }
        }

        pub fn switch_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.switch_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for switch_id failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/hardware/switches/{switch_id}`
        pub async fn send(self) -> Result<ResponseValue<types::Switch>, Error<types::Error>> {
            let Self { client, switch_id } = self;
            let switch_id = switch_id.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/hardware/switches/{}",
                client.baseurl,
                encode_path(&switch_id.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_identity_provider_list`]
    ///
    /// [`ClientSystemSilosExt::silo_identity_provider_list`]: super::ClientSystemSilosExt::silo_identity_provider_list
    #[derive(Debug, Clone)]
    pub struct SiloIdentityProviderList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        silo: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> SiloIdentityProviderList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                silo: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/identity-providers`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::IdentityProviderResultsPage>, Error<types::Error>>
        {
            let Self {
                client,
                limit,
                page_token,
                silo,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/identity-providers", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &silo {
                query.push(("silo", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/identity-providers`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::IdentityProvider, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                silo: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemSilosExt::local_idp_user_create`]
    ///
    /// [`ClientSystemSilosExt::local_idp_user_create`]: super::ClientSystemSilosExt::local_idp_user_create
    #[derive(Debug, Clone)]
    pub struct LocalIdpUserCreate<'a> {
        client: &'a super::Client,
        silo: Result<types::NameOrId, String>,
        body: Result<types::builder::UserCreate, String>,
    }

    impl<'a> LocalIdpUserCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo: Err("silo was not initialized".to_string()),
                body: Ok(types::builder::UserCreate::default()),
            }
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::UserCreate>,
            <V as std::convert::TryInto<types::UserCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `UserCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::UserCreate) -> types::builder::UserCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to
        /// `/v1/system/identity-providers/local/users`
        pub async fn send(self) -> Result<ResponseValue<types::User>, Error<types::Error>> {
            let Self { client, silo, body } = self;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::UserCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/identity-providers/local/users",
                client.baseurl,
            );
            let mut query = Vec::with_capacity(1usize);
            query.push(("silo", silo.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::local_idp_user_delete`]
    ///
    /// [`ClientSystemSilosExt::local_idp_user_delete`]: super::ClientSystemSilosExt::local_idp_user_delete
    #[derive(Debug, Clone)]
    pub struct LocalIdpUserDelete<'a> {
        client: &'a super::Client,
        user_id: Result<uuid::Uuid, String>,
        silo: Result<types::NameOrId, String>,
    }

    impl<'a> LocalIdpUserDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                user_id: Err("user_id was not initialized".to_string()),
                silo: Err("silo was not initialized".to_string()),
            }
        }

        pub fn user_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.user_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for user_id failed".to_string());
            self
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        /// Sends a `DELETE` request to
        /// `/v1/system/identity-providers/local/users/{user_id}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                user_id,
                silo,
            } = self;
            let user_id = user_id.map_err(Error::InvalidRequest)?;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/identity-providers/local/users/{}",
                client.baseurl,
                encode_path(&user_id.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            query.push(("silo", silo.to_string()));
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::local_idp_user_set_password`]
    ///
    /// [`ClientSystemSilosExt::local_idp_user_set_password`]: super::ClientSystemSilosExt::local_idp_user_set_password
    #[derive(Debug, Clone)]
    pub struct LocalIdpUserSetPassword<'a> {
        client: &'a super::Client,
        user_id: Result<uuid::Uuid, String>,
        silo: Result<types::NameOrId, String>,
        body: Result<types::UserPassword, String>,
    }

    impl<'a> LocalIdpUserSetPassword<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                user_id: Err("user_id was not initialized".to_string()),
                silo: Err("silo was not initialized".to_string()),
                body: Err("body was not initialized".to_string()),
            }
        }

        pub fn user_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.user_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for user_id failed".to_string());
            self
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::UserPassword>,
        {
            self.body = value
                .try_into()
                .map_err(|_| "conversion to `UserPassword` for body failed".to_string());
            self
        }

        /// Sends a `POST` request to
        /// `/v1/system/identity-providers/local/users/{user_id}/set-password`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                user_id,
                silo,
                body,
            } = self;
            let user_id = user_id.map_err(Error::InvalidRequest)?;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let body = body.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/identity-providers/local/users/{}/set-password",
                client.baseurl,
                encode_path(&user_id.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            query.push(("silo", silo.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::saml_identity_provider_create`]
    ///
    /// [`ClientSystemSilosExt::saml_identity_provider_create`]: super::ClientSystemSilosExt::saml_identity_provider_create
    #[derive(Debug, Clone)]
    pub struct SamlIdentityProviderCreate<'a> {
        client: &'a super::Client,
        silo: Result<types::NameOrId, String>,
        body: Result<types::builder::SamlIdentityProviderCreate, String>,
    }

    impl<'a> SamlIdentityProviderCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo: Err("silo was not initialized".to_string()),
                body: Ok(types::builder::SamlIdentityProviderCreate::default()),
            }
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SamlIdentityProviderCreate>,
            <V as std::convert::TryInto<types::SamlIdentityProviderCreate>>::Error:
                std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `SamlIdentityProviderCreate` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::SamlIdentityProviderCreate,
            ) -> types::builder::SamlIdentityProviderCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/system/identity-providers/saml`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SamlIdentityProvider>, Error<types::Error>> {
            let Self { client, silo, body } = self;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::SamlIdentityProviderCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/identity-providers/saml", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            query.push(("silo", silo.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::saml_identity_provider_view`]
    ///
    /// [`ClientSystemSilosExt::saml_identity_provider_view`]: super::ClientSystemSilosExt::saml_identity_provider_view
    #[derive(Debug, Clone)]
    pub struct SamlIdentityProviderView<'a> {
        client: &'a super::Client,
        provider: Result<types::NameOrId, String>,
        silo: Result<types::NameOrId, String>,
    }

    impl<'a> SamlIdentityProviderView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                provider: Err("provider was not initialized".to_string()),
                silo: Err("silo was not initialized".to_string()),
            }
        }

        pub fn provider<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.provider = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for provider failed".to_string());
            self
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        /// Sends a `GET` request to
        /// `/v1/system/identity-providers/saml/{provider}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SamlIdentityProvider>, Error<types::Error>> {
            let Self {
                client,
                provider,
                silo,
            } = self;
            let provider = provider.map_err(Error::InvalidRequest)?;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/identity-providers/saml/{}",
                client.baseurl,
                encode_path(&provider.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            query.push(("silo", silo.to_string()));
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_list`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_list`]: super::ClientSystemNetworkingExt::ip_pool_list
    #[derive(Debug, Clone)]
    pub struct IpPoolList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> IpPoolList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/ip-pools`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::IpPoolResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/ip-pools", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/ip-pools`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::IpPool, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_create`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_create`]: super::ClientSystemNetworkingExt::ip_pool_create
    #[derive(Debug, Clone)]
    pub struct IpPoolCreate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::IpPoolCreate, String>,
    }

    impl<'a> IpPoolCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::IpPoolCreate::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IpPoolCreate>,
            <V as std::convert::TryInto<types::IpPoolCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `IpPoolCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::IpPoolCreate) -> types::builder::IpPoolCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/system/ip-pools`
        pub async fn send(self) -> Result<ResponseValue<types::IpPool>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::IpPoolCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/ip-pools", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_view`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_view`]: super::ClientSystemNetworkingExt::ip_pool_view
    #[derive(Debug, Clone)]
    pub struct IpPoolView<'a> {
        client: &'a super::Client,
        pool: Result<types::NameOrId, String>,
    }

    impl<'a> IpPoolView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                pool: Err("pool was not initialized".to_string()),
            }
        }

        pub fn pool<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.pool = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for pool failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/ip-pools/{pool}`
        pub async fn send(self) -> Result<ResponseValue<types::IpPool>, Error<types::Error>> {
            let Self { client, pool } = self;
            let pool = pool.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/ip-pools/{}",
                client.baseurl,
                encode_path(&pool.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_update`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_update`]: super::ClientSystemNetworkingExt::ip_pool_update
    #[derive(Debug, Clone)]
    pub struct IpPoolUpdate<'a> {
        client: &'a super::Client,
        pool: Result<types::NameOrId, String>,
        body: Result<types::builder::IpPoolUpdate, String>,
    }

    impl<'a> IpPoolUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                pool: Err("pool was not initialized".to_string()),
                body: Ok(types::builder::IpPoolUpdate::default()),
            }
        }

        pub fn pool<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.pool = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for pool failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IpPoolUpdate>,
            <V as std::convert::TryInto<types::IpPoolUpdate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `IpPoolUpdate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::IpPoolUpdate) -> types::builder::IpPoolUpdate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/system/ip-pools/{pool}`
        pub async fn send(self) -> Result<ResponseValue<types::IpPool>, Error<types::Error>> {
            let Self { client, pool, body } = self;
            let pool = pool.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::IpPoolUpdate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/ip-pools/{}",
                client.baseurl,
                encode_path(&pool.to_string()),
            );
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_delete`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_delete`]: super::ClientSystemNetworkingExt::ip_pool_delete
    #[derive(Debug, Clone)]
    pub struct IpPoolDelete<'a> {
        client: &'a super::Client,
        pool: Result<types::NameOrId, String>,
    }

    impl<'a> IpPoolDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                pool: Err("pool was not initialized".to_string()),
            }
        }

        pub fn pool<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.pool = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for pool failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/system/ip-pools/{pool}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, pool } = self;
            let pool = pool.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/ip-pools/{}",
                client.baseurl,
                encode_path(&pool.to_string()),
            );
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_range_list`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_range_list`]: super::ClientSystemNetworkingExt::ip_pool_range_list
    #[derive(Debug, Clone)]
    pub struct IpPoolRangeList<'a> {
        client: &'a super::Client,
        pool: Result<types::NameOrId, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
    }

    impl<'a> IpPoolRangeList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                pool: Err("pool was not initialized".to_string()),
                limit: Ok(None),
                page_token: Ok(None),
            }
        }

        pub fn pool<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.pool = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for pool failed".to_string());
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/ip-pools/{pool}/ranges`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::IpPoolRangeResultsPage>, Error<types::Error>> {
            let Self {
                client,
                pool,
                limit,
                page_token,
            } = self;
            let pool = pool.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/ip-pools/{}/ranges",
                client.baseurl,
                encode_path(&pool.to_string()),
            );
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/ip-pools/{pool}/ranges`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::IpPoolRange, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_range_add`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_range_add`]: super::ClientSystemNetworkingExt::ip_pool_range_add
    #[derive(Debug, Clone)]
    pub struct IpPoolRangeAdd<'a> {
        client: &'a super::Client,
        pool: Result<types::NameOrId, String>,
        body: Result<types::IpRange, String>,
    }

    impl<'a> IpPoolRangeAdd<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                pool: Err("pool was not initialized".to_string()),
                body: Err("body was not initialized".to_string()),
            }
        }

        pub fn pool<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.pool = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for pool failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IpRange>,
        {
            self.body = value
                .try_into()
                .map_err(|_| "conversion to `IpRange` for body failed".to_string());
            self
        }

        /// Sends a `POST` request to `/v1/system/ip-pools/{pool}/ranges/add`
        pub async fn send(self) -> Result<ResponseValue<types::IpPoolRange>, Error<types::Error>> {
            let Self { client, pool, body } = self;
            let pool = pool.map_err(Error::InvalidRequest)?;
            let body = body.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/ip-pools/{}/ranges/add",
                client.baseurl,
                encode_path(&pool.to_string()),
            );
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_range_remove`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_range_remove`]: super::ClientSystemNetworkingExt::ip_pool_range_remove
    #[derive(Debug, Clone)]
    pub struct IpPoolRangeRemove<'a> {
        client: &'a super::Client,
        pool: Result<types::NameOrId, String>,
        body: Result<types::IpRange, String>,
    }

    impl<'a> IpPoolRangeRemove<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                pool: Err("pool was not initialized".to_string()),
                body: Err("body was not initialized".to_string()),
            }
        }

        pub fn pool<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.pool = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for pool failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IpRange>,
        {
            self.body = value
                .try_into()
                .map_err(|_| "conversion to `IpRange` for body failed".to_string());
            self
        }

        /// Sends a `POST` request to `/v1/system/ip-pools/{pool}/ranges/remove`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, pool, body } = self;
            let pool = pool.map_err(Error::InvalidRequest)?;
            let body = body.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/ip-pools/{}/ranges/remove",
                client.baseurl,
                encode_path(&pool.to_string()),
            );
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_service_view`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_service_view`]: super::ClientSystemNetworkingExt::ip_pool_service_view
    #[derive(Debug, Clone)]
    pub struct IpPoolServiceView<'a> {
        client: &'a super::Client,
    }

    impl<'a> IpPoolServiceView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client: client }
        }

        /// Sends a `GET` request to `/v1/system/ip-pools-service`
        pub async fn send(self) -> Result<ResponseValue<types::IpPool>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/v1/system/ip-pools-service", client.baseurl,);
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_service_range_list`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_service_range_list`]: super::ClientSystemNetworkingExt::ip_pool_service_range_list
    #[derive(Debug, Clone)]
    pub struct IpPoolServiceRangeList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
    }

    impl<'a> IpPoolServiceRangeList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/ip-pools-service/ranges`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::IpPoolRangeResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/ip-pools-service/ranges", client.baseurl,);
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/ip-pools-service/ranges`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::IpPoolRange, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_service_range_add`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_service_range_add`]: super::ClientSystemNetworkingExt::ip_pool_service_range_add
    #[derive(Debug, Clone)]
    pub struct IpPoolServiceRangeAdd<'a> {
        client: &'a super::Client,
        body: Result<types::IpRange, String>,
    }

    impl<'a> IpPoolServiceRangeAdd<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Err("body was not initialized".to_string()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IpRange>,
        {
            self.body = value
                .try_into()
                .map_err(|_| "conversion to `IpRange` for body failed".to_string());
            self
        }

        /// Sends a `POST` request to `/v1/system/ip-pools-service/ranges/add`
        pub async fn send(self) -> Result<ResponseValue<types::IpPoolRange>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/ip-pools-service/ranges/add", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::ip_pool_service_range_remove`]
    ///
    /// [`ClientSystemNetworkingExt::ip_pool_service_range_remove`]: super::ClientSystemNetworkingExt::ip_pool_service_range_remove
    #[derive(Debug, Clone)]
    pub struct IpPoolServiceRangeRemove<'a> {
        client: &'a super::Client,
        body: Result<types::IpRange, String>,
    }

    impl<'a> IpPoolServiceRangeRemove<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Err("body was not initialized".to_string()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IpRange>,
        {
            self.body = value
                .try_into()
                .map_err(|_| "conversion to `IpRange` for body failed".to_string());
            self
        }

        /// Sends a `POST` request to
        /// `/v1/system/ip-pools-service/ranges/remove`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/ip-pools-service/ranges/remove",
                client.baseurl,
            );
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemMetricsExt::system_metric`]
    ///
    /// [`ClientSystemMetricsExt::system_metric`]: super::ClientSystemMetricsExt::system_metric
    #[derive(Debug, Clone)]
    pub struct SystemMetric<'a> {
        client: &'a super::Client,
        metric_name: Result<types::SystemMetricName, String>,
        end_time: Result<Option<chrono::DateTime<chrono::offset::Utc>>, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        order: Result<Option<types::PaginationOrder>, String>,
        page_token: Result<Option<String>, String>,
        silo: Result<Option<types::NameOrId>, String>,
        start_time: Result<Option<chrono::DateTime<chrono::offset::Utc>>, String>,
    }

    impl<'a> SystemMetric<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                metric_name: Err("metric_name was not initialized".to_string()),
                end_time: Ok(None),
                limit: Ok(None),
                order: Ok(None),
                page_token: Ok(None),
                silo: Ok(None),
                start_time: Ok(None),
            }
        }

        pub fn metric_name<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SystemMetricName>,
        {
            self.metric_name = value
                .try_into()
                .map_err(|_| "conversion to `SystemMetricName` for metric_name failed".to_string());
            self
        }

        pub fn end_time<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
        {
            self.end_time = value.try_into().map(Some).map_err(|_| {
                "conversion to `chrono :: DateTime < chrono :: offset :: Utc >` for end_time failed"
                    .to_string()
            });
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn order<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::PaginationOrder>,
        {
            self.order = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `PaginationOrder` for order failed".to_string());
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        pub fn start_time<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
        {
            self.start_time = value.try_into().map(Some).map_err(|_| {
                "conversion to `chrono :: DateTime < chrono :: offset :: Utc >` for start_time \
                 failed"
                    .to_string()
            });
            self
        }

        /// Sends a `GET` request to `/v1/system/metrics/{metric_name}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::MeasurementResultsPage>, Error<types::Error>> {
            let Self {
                client,
                metric_name,
                end_time,
                limit,
                order,
                page_token,
                silo,
                start_time,
            } = self;
            let metric_name = metric_name.map_err(Error::InvalidRequest)?;
            let end_time = end_time.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let order = order.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let start_time = start_time.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/metrics/{}",
                client.baseurl,
                encode_path(&metric_name.to_string()),
            );
            let mut query = Vec::with_capacity(6usize);
            if let Some(v) = &end_time {
                query.push(("end_time", v.to_string()));
            }
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &order {
                query.push(("order", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &silo {
                query.push(("silo", v.to_string()));
            }
            if let Some(v) = &start_time {
                query.push(("start_time", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/metrics/{metric_name}`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Measurement, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                end_time: Ok(None),
                limit: Ok(None),
                order: Ok(None),
                page_token: Ok(None),
                silo: Ok(None),
                start_time: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::networking_address_lot_list`]
    ///
    /// [`ClientSystemNetworkingExt::networking_address_lot_list`]: super::ClientSystemNetworkingExt::networking_address_lot_list
    #[derive(Debug, Clone)]
    pub struct NetworkingAddressLotList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> NetworkingAddressLotList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/networking/address-lot`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::AddressLotResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/address-lot", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/networking/address-lot`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::AddressLot, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::networking_address_lot_create`]
    ///
    /// [`ClientSystemNetworkingExt::networking_address_lot_create`]: super::ClientSystemNetworkingExt::networking_address_lot_create
    #[derive(Debug, Clone)]
    pub struct NetworkingAddressLotCreate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::AddressLotCreate, String>,
    }

    impl<'a> NetworkingAddressLotCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::AddressLotCreate::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::AddressLotCreate>,
            <V as std::convert::TryInto<types::AddressLotCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `AddressLotCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::AddressLotCreate,
            ) -> types::builder::AddressLotCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/system/networking/address-lot`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::AddressLotCreateResponse>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::AddressLotCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/address-lot", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::networking_address_lot_delete`]
    ///
    /// [`ClientSystemNetworkingExt::networking_address_lot_delete`]: super::ClientSystemNetworkingExt::networking_address_lot_delete
    #[derive(Debug, Clone)]
    pub struct NetworkingAddressLotDelete<'a> {
        client: &'a super::Client,
        address_lot: Result<types::NameOrId, String>,
    }

    impl<'a> NetworkingAddressLotDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                address_lot: Err("address_lot was not initialized".to_string()),
            }
        }

        pub fn address_lot<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.address_lot = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for address_lot failed".to_string());
            self
        }

        /// Sends a `DELETE` request to
        /// `/v1/system/networking/address-lot/{address_lot}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                address_lot,
            } = self;
            let address_lot = address_lot.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/networking/address-lot/{}",
                client.baseurl,
                encode_path(&address_lot.to_string()),
            );
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_address_lot_block_list`]
    ///
    /// [`ClientSystemNetworkingExt::networking_address_lot_block_list`]: super::ClientSystemNetworkingExt::networking_address_lot_block_list
    #[derive(Debug, Clone)]
    pub struct NetworkingAddressLotBlockList<'a> {
        client: &'a super::Client,
        address_lot: Result<types::NameOrId, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> NetworkingAddressLotBlockList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                address_lot: Err("address_lot was not initialized".to_string()),
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn address_lot<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.address_lot = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for address_lot failed".to_string());
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to
        /// `/v1/system/networking/address-lot/{address_lot}/blocks`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::AddressLotBlockResultsPage>, Error<types::Error>> {
            let Self {
                client,
                address_lot,
                limit,
                page_token,
                sort_by,
            } = self;
            let address_lot = address_lot.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/networking/address-lot/{}/blocks",
                client.baseurl,
                encode_path(&address_lot.to_string()),
            );
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to
        /// `/v1/system/networking/address-lot/{address_lot}/blocks`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::AddressLotBlock, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::networking_bgp_config_list`]
    ///
    /// [`ClientSystemNetworkingExt::networking_bgp_config_list`]: super::ClientSystemNetworkingExt::networking_bgp_config_list
    #[derive(Debug, Clone)]
    pub struct NetworkingBgpConfigList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        name_or_id: Result<Option<types::NameOrId>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> NetworkingBgpConfigList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                name_or_id: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn name_or_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.name_or_id = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for name_or_id failed".to_string());
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/networking/bgp`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::BgpConfigResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                name_or_id,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let name_or_id = name_or_id.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/bgp", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &name_or_id {
                query.push(("name_or_id", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/networking/bgp`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::BgpConfig, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                name_or_id: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::networking_bgp_config_create`]
    ///
    /// [`ClientSystemNetworkingExt::networking_bgp_config_create`]: super::ClientSystemNetworkingExt::networking_bgp_config_create
    #[derive(Debug, Clone)]
    pub struct NetworkingBgpConfigCreate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::BgpConfigCreate, String>,
    }

    impl<'a> NetworkingBgpConfigCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::BgpConfigCreate::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::BgpConfigCreate>,
            <V as std::convert::TryInto<types::BgpConfigCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `BgpConfigCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::BgpConfigCreate) -> types::builder::BgpConfigCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/system/networking/bgp`
        pub async fn send(self) -> Result<ResponseValue<types::BgpConfig>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::BgpConfigCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/bgp", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::networking_bgp_config_delete`]
    ///
    /// [`ClientSystemNetworkingExt::networking_bgp_config_delete`]: super::ClientSystemNetworkingExt::networking_bgp_config_delete
    #[derive(Debug, Clone)]
    pub struct NetworkingBgpConfigDelete<'a> {
        client: &'a super::Client,
        name_or_id: Result<types::NameOrId, String>,
    }

    impl<'a> NetworkingBgpConfigDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                name_or_id: Err("name_or_id was not initialized".to_string()),
            }
        }

        pub fn name_or_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.name_or_id = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for name_or_id failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/system/networking/bgp`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, name_or_id } = self;
            let name_or_id = name_or_id.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/bgp", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            query.push(("name_or_id", name_or_id.to_string()));
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_bgp_announce_set_list`]
    ///
    /// [`ClientSystemNetworkingExt::networking_bgp_announce_set_list`]: super::ClientSystemNetworkingExt::networking_bgp_announce_set_list
    #[derive(Debug, Clone)]
    pub struct NetworkingBgpAnnounceSetList<'a> {
        client: &'a super::Client,
        name_or_id: Result<types::NameOrId, String>,
    }

    impl<'a> NetworkingBgpAnnounceSetList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                name_or_id: Err("name_or_id was not initialized".to_string()),
            }
        }

        pub fn name_or_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.name_or_id = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for name_or_id failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/networking/bgp-announce`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<Vec<types::BgpAnnouncement>>, Error<types::Error>> {
            let Self { client, name_or_id } = self;
            let name_or_id = name_or_id.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/bgp-announce", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            query.push(("name_or_id", name_or_id.to_string()));
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_bgp_announce_set_create`]
    ///
    /// [`ClientSystemNetworkingExt::networking_bgp_announce_set_create`]: super::ClientSystemNetworkingExt::networking_bgp_announce_set_create
    #[derive(Debug, Clone)]
    pub struct NetworkingBgpAnnounceSetCreate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::BgpAnnounceSetCreate, String>,
    }

    impl<'a> NetworkingBgpAnnounceSetCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::BgpAnnounceSetCreate::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::BgpAnnounceSetCreate>,
            <V as std::convert::TryInto<types::BgpAnnounceSetCreate>>::Error: std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `BgpAnnounceSetCreate` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::BgpAnnounceSetCreate,
            ) -> types::builder::BgpAnnounceSetCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/system/networking/bgp-announce`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::BgpAnnounceSet>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::BgpAnnounceSetCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/bgp-announce", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_bgp_announce_set_delete`]
    ///
    /// [`ClientSystemNetworkingExt::networking_bgp_announce_set_delete`]: super::ClientSystemNetworkingExt::networking_bgp_announce_set_delete
    #[derive(Debug, Clone)]
    pub struct NetworkingBgpAnnounceSetDelete<'a> {
        client: &'a super::Client,
        name_or_id: Result<types::NameOrId, String>,
    }

    impl<'a> NetworkingBgpAnnounceSetDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                name_or_id: Err("name_or_id was not initialized".to_string()),
            }
        }

        pub fn name_or_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.name_or_id = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for name_or_id failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/system/networking/bgp-announce`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, name_or_id } = self;
            let name_or_id = name_or_id.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/bgp-announce", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            query.push(("name_or_id", name_or_id.to_string()));
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_bgp_imported_routes_ipv4`]
    ///
    /// [`ClientSystemNetworkingExt::networking_bgp_imported_routes_ipv4`]: super::ClientSystemNetworkingExt::networking_bgp_imported_routes_ipv4
    #[derive(Debug, Clone)]
    pub struct NetworkingBgpImportedRoutesIpv4<'a> {
        client: &'a super::Client,
        asn: Result<u32, String>,
    }

    impl<'a> NetworkingBgpImportedRoutesIpv4<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                asn: Err("asn was not initialized".to_string()),
            }
        }

        pub fn asn<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<u32>,
        {
            self.asn = value
                .try_into()
                .map_err(|_| "conversion to `u32` for asn failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/networking/bgp-routes-ipv4`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<Vec<types::BgpImportedRouteIpv4>>, Error<types::Error>> {
            let Self { client, asn } = self;
            let asn = asn.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/bgp-routes-ipv4", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            query.push(("asn", asn.to_string()));
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemNetworkingExt::networking_bgp_status`]
    ///
    /// [`ClientSystemNetworkingExt::networking_bgp_status`]: super::ClientSystemNetworkingExt::networking_bgp_status
    #[derive(Debug, Clone)]
    pub struct NetworkingBgpStatus<'a> {
        client: &'a super::Client,
    }

    impl<'a> NetworkingBgpStatus<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client: client }
        }

        /// Sends a `GET` request to `/v1/system/networking/bgp-status`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<Vec<types::BgpPeerStatus>>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/v1/system/networking/bgp-status", client.baseurl,);
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_loopback_address_list`]
    ///
    /// [`ClientSystemNetworkingExt::networking_loopback_address_list`]: super::ClientSystemNetworkingExt::networking_loopback_address_list
    #[derive(Debug, Clone)]
    pub struct NetworkingLoopbackAddressList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> NetworkingLoopbackAddressList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/networking/loopback-address`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::LoopbackAddressResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/loopback-address", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/networking/loopback-address`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::LoopbackAddress, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_loopback_address_create`]
    ///
    /// [`ClientSystemNetworkingExt::networking_loopback_address_create`]: super::ClientSystemNetworkingExt::networking_loopback_address_create
    #[derive(Debug, Clone)]
    pub struct NetworkingLoopbackAddressCreate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::LoopbackAddressCreate, String>,
    }

    impl<'a> NetworkingLoopbackAddressCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::LoopbackAddressCreate::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::LoopbackAddressCreate>,
            <V as std::convert::TryInto<types::LoopbackAddressCreate>>::Error: std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `LoopbackAddressCreate` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::LoopbackAddressCreate,
            ) -> types::builder::LoopbackAddressCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/system/networking/loopback-address`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::LoopbackAddress>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::LoopbackAddressCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/networking/loopback-address", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_loopback_address_delete`]
    ///
    /// [`ClientSystemNetworkingExt::networking_loopback_address_delete`]: super::ClientSystemNetworkingExt::networking_loopback_address_delete
    #[derive(Debug, Clone)]
    pub struct NetworkingLoopbackAddressDelete<'a> {
        client: &'a super::Client,
        rack_id: Result<uuid::Uuid, String>,
        switch_location: Result<types::Name, String>,
        address: Result<std::net::IpAddr, String>,
        subnet_mask: Result<u8, String>,
    }

    impl<'a> NetworkingLoopbackAddressDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                rack_id: Err("rack_id was not initialized".to_string()),
                switch_location: Err("switch_location was not initialized".to_string()),
                address: Err("address was not initialized".to_string()),
                subnet_mask: Err("subnet_mask was not initialized".to_string()),
            }
        }

        pub fn rack_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.rack_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for rack_id failed".to_string());
            self
        }

        pub fn switch_location<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::Name>,
        {
            self.switch_location = value
                .try_into()
                .map_err(|_| "conversion to `Name` for switch_location failed".to_string());
            self
        }

        pub fn address<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::net::IpAddr>,
        {
            self.address = value
                .try_into()
                .map_err(|_| "conversion to `std :: net :: IpAddr` for address failed".to_string());
            self
        }

        pub fn subnet_mask<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<u8>,
        {
            self.subnet_mask = value
                .try_into()
                .map_err(|_| "conversion to `u8` for subnet_mask failed".to_string());
            self
        }

        /// Sends a `DELETE` request to
        /// `/v1/system/networking/loopback-address/{rack_id}/{switch_location}/
        /// {address}/{subnet_mask}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                rack_id,
                switch_location,
                address,
                subnet_mask,
            } = self;
            let rack_id = rack_id.map_err(Error::InvalidRequest)?;
            let switch_location = switch_location.map_err(Error::InvalidRequest)?;
            let address = address.map_err(Error::InvalidRequest)?;
            let subnet_mask = subnet_mask.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/networking/loopback-address/{}/{}/{}/{}",
                client.baseurl,
                encode_path(&rack_id.to_string()),
                encode_path(&switch_location.to_string()),
                encode_path(&address.to_string()),
                encode_path(&subnet_mask.to_string()),
            );
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_switch_port_settings_list`]
    ///
    /// [`ClientSystemNetworkingExt::networking_switch_port_settings_list`]: super::ClientSystemNetworkingExt::networking_switch_port_settings_list
    #[derive(Debug, Clone)]
    pub struct NetworkingSwitchPortSettingsList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        port_settings: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> NetworkingSwitchPortSettingsList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                port_settings: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn port_settings<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.port_settings = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for port_settings failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to
        /// `/v1/system/networking/switch-port-settings`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SwitchPortSettingsResultsPage>, Error<types::Error>>
        {
            let Self {
                client,
                limit,
                page_token,
                port_settings,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let port_settings = port_settings.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/networking/switch-port-settings",
                client.baseurl,
            );
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &port_settings {
                query.push(("port_settings", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to
        /// `/v1/system/networking/switch-port-settings`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::SwitchPortSettings, Error<types::Error>>>
               + Unpin
               + 'a {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                port_settings: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_switch_port_settings_create`]
    ///
    /// [`ClientSystemNetworkingExt::networking_switch_port_settings_create`]: super::ClientSystemNetworkingExt::networking_switch_port_settings_create
    #[derive(Debug, Clone)]
    pub struct NetworkingSwitchPortSettingsCreate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::SwitchPortSettingsCreate, String>,
    }

    impl<'a> NetworkingSwitchPortSettingsCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::SwitchPortSettingsCreate::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SwitchPortSettingsCreate>,
            <V as std::convert::TryInto<types::SwitchPortSettingsCreate>>::Error: std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `SwitchPortSettingsCreate` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::SwitchPortSettingsCreate,
            ) -> types::builder::SwitchPortSettingsCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to
        /// `/v1/system/networking/switch-port-settings`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SwitchPortSettingsView>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::SwitchPortSettingsCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/networking/switch-port-settings",
                client.baseurl,
            );
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_switch_port_settings_delete`]
    ///
    /// [`ClientSystemNetworkingExt::networking_switch_port_settings_delete`]: super::ClientSystemNetworkingExt::networking_switch_port_settings_delete
    #[derive(Debug, Clone)]
    pub struct NetworkingSwitchPortSettingsDelete<'a> {
        client: &'a super::Client,
        port_settings: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> NetworkingSwitchPortSettingsDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                port_settings: Ok(None),
            }
        }

        pub fn port_settings<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.port_settings = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for port_settings failed".to_string());
            self
        }

        /// Sends a `DELETE` request to
        /// `/v1/system/networking/switch-port-settings`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                port_settings,
            } = self;
            let port_settings = port_settings.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/networking/switch-port-settings",
                client.baseurl,
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &port_settings {
                query.push(("port_settings", v.to_string()));
            }
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for
    /// [`ClientSystemNetworkingExt::networking_switch_port_settings_view`]
    ///
    /// [`ClientSystemNetworkingExt::networking_switch_port_settings_view`]: super::ClientSystemNetworkingExt::networking_switch_port_settings_view
    #[derive(Debug, Clone)]
    pub struct NetworkingSwitchPortSettingsView<'a> {
        client: &'a super::Client,
        port: Result<types::NameOrId, String>,
    }

    impl<'a> NetworkingSwitchPortSettingsView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                port: Err("port was not initialized".to_string()),
            }
        }

        pub fn port<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.port = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for port failed".to_string());
            self
        }

        /// Sends a `GET` request to
        /// `/v1/system/networking/switch-port-settings/{port}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SwitchPortSettingsView>, Error<types::Error>> {
            let Self { client, port } = self;
            let port = port.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/networking/switch-port-settings/{}",
                client.baseurl,
                encode_path(&port.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientPolicyExt::system_policy_view`]
    ///
    /// [`ClientPolicyExt::system_policy_view`]: super::ClientPolicyExt::system_policy_view
    #[derive(Debug, Clone)]
    pub struct SystemPolicyView<'a> {
        client: &'a super::Client,
    }

    impl<'a> SystemPolicyView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client: client }
        }

        /// Sends a `GET` request to `/v1/system/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::FleetRolePolicy>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/v1/system/policy", client.baseurl,);
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientPolicyExt::system_policy_update`]
    ///
    /// [`ClientPolicyExt::system_policy_update`]: super::ClientPolicyExt::system_policy_update
    #[derive(Debug, Clone)]
    pub struct SystemPolicyUpdate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::FleetRolePolicy, String>,
    }

    impl<'a> SystemPolicyUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::FleetRolePolicy::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::FleetRolePolicy>,
            <V as std::convert::TryInto<types::FleetRolePolicy>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `FleetRolePolicy` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::FleetRolePolicy) -> types::builder::FleetRolePolicy,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/system/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::FleetRolePolicy>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::FleetRolePolicy>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/policy", client.baseurl,);
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientRolesExt::role_list`]
    ///
    /// [`ClientRolesExt::role_list`]: super::ClientRolesExt::role_list
    #[derive(Debug, Clone)]
    pub struct RoleList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
    }

    impl<'a> RoleList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/roles`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::RoleResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/roles", client.baseurl,);
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/roles`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Role, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientRolesExt::role_view`]
    ///
    /// [`ClientRolesExt::role_view`]: super::ClientRolesExt::role_view
    #[derive(Debug, Clone)]
    pub struct RoleView<'a> {
        client: &'a super::Client,
        role_name: Result<String, String>,
    }

    impl<'a> RoleView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                role_name: Err("role_name was not initialized".to_string()),
            }
        }

        pub fn role_name<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.role_name = value
                .try_into()
                .map_err(|_| "conversion to `String` for role_name failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/roles/{role_name}`
        pub async fn send(self) -> Result<ResponseValue<types::Role>, Error<types::Error>> {
            let Self { client, role_name } = self;
            let role_name = role_name.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/roles/{}",
                client.baseurl,
                encode_path(&role_name.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::system_quotas_list`]
    ///
    /// [`ClientSystemSilosExt::system_quotas_list`]: super::ClientSystemSilosExt::system_quotas_list
    #[derive(Debug, Clone)]
    pub struct SystemQuotasList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> SystemQuotasList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/silo-quotas`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloQuotasResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/silo-quotas", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/silo-quotas`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::SiloQuotas, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_list`]
    ///
    /// [`ClientSystemSilosExt::silo_list`]: super::ClientSystemSilosExt::silo_list
    #[derive(Debug, Clone)]
    pub struct SiloList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> SiloList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/silos`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/silos", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/silos`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Silo, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_create`]
    ///
    /// [`ClientSystemSilosExt::silo_create`]: super::ClientSystemSilosExt::silo_create
    #[derive(Debug, Clone)]
    pub struct SiloCreate<'a> {
        client: &'a super::Client,
        body: Result<types::builder::SiloCreate, String>,
    }

    impl<'a> SiloCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                body: Ok(types::builder::SiloCreate::default()),
            }
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SiloCreate>,
            <V as std::convert::TryInto<types::SiloCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `SiloCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::SiloCreate) -> types::builder::SiloCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/system/silos`
        pub async fn send(self) -> Result<ResponseValue<types::Silo>, Error<types::Error>> {
            let Self { client, body } = self;
            let body = body
                .and_then(std::convert::TryInto::<types::SiloCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/silos", client.baseurl,);
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_view`]
    ///
    /// [`ClientSystemSilosExt::silo_view`]: super::ClientSystemSilosExt::silo_view
    #[derive(Debug, Clone)]
    pub struct SiloView<'a> {
        client: &'a super::Client,
        silo: Result<types::NameOrId, String>,
    }

    impl<'a> SiloView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo: Err("silo was not initialized".to_string()),
            }
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/silos/{silo}`
        pub async fn send(self) -> Result<ResponseValue<types::Silo>, Error<types::Error>> {
            let Self { client, silo } = self;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/silos/{}",
                client.baseurl,
                encode_path(&silo.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_delete`]
    ///
    /// [`ClientSystemSilosExt::silo_delete`]: super::ClientSystemSilosExt::silo_delete
    #[derive(Debug, Clone)]
    pub struct SiloDelete<'a> {
        client: &'a super::Client,
        silo: Result<types::NameOrId, String>,
    }

    impl<'a> SiloDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo: Err("silo was not initialized".to_string()),
            }
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/system/silos/{silo}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self { client, silo } = self;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/silos/{}",
                client.baseurl,
                encode_path(&silo.to_string()),
            );
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_policy_view`]
    ///
    /// [`ClientSystemSilosExt::silo_policy_view`]: super::ClientSystemSilosExt::silo_policy_view
    #[derive(Debug, Clone)]
    pub struct SiloPolicyView<'a> {
        client: &'a super::Client,
        silo: Result<types::NameOrId, String>,
    }

    impl<'a> SiloPolicyView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo: Err("silo was not initialized".to_string()),
            }
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/silos/{silo}/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloRolePolicy>, Error<types::Error>> {
            let Self { client, silo } = self;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/silos/{}/policy",
                client.baseurl,
                encode_path(&silo.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_policy_update`]
    ///
    /// [`ClientSystemSilosExt::silo_policy_update`]: super::ClientSystemSilosExt::silo_policy_update
    #[derive(Debug, Clone)]
    pub struct SiloPolicyUpdate<'a> {
        client: &'a super::Client,
        silo: Result<types::NameOrId, String>,
        body: Result<types::builder::SiloRolePolicy, String>,
    }

    impl<'a> SiloPolicyUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo: Err("silo was not initialized".to_string()),
                body: Ok(types::builder::SiloRolePolicy::default()),
            }
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SiloRolePolicy>,
            <V as std::convert::TryInto<types::SiloRolePolicy>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `SiloRolePolicy` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::SiloRolePolicy) -> types::builder::SiloRolePolicy,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/system/silos/{silo}/policy`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloRolePolicy>, Error<types::Error>> {
            let Self { client, silo, body } = self;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::SiloRolePolicy>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/silos/{}/policy",
                client.baseurl,
                encode_path(&silo.to_string()),
            );
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_quotas_view`]
    ///
    /// [`ClientSystemSilosExt::silo_quotas_view`]: super::ClientSystemSilosExt::silo_quotas_view
    #[derive(Debug, Clone)]
    pub struct SiloQuotasView<'a> {
        client: &'a super::Client,
        silo: Result<types::NameOrId, String>,
    }

    impl<'a> SiloQuotasView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo: Err("silo was not initialized".to_string()),
            }
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/silos/{silo}/quotas`
        pub async fn send(self) -> Result<ResponseValue<types::SiloQuotas>, Error<types::Error>> {
            let Self { client, silo } = self;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/silos/{}/quotas",
                client.baseurl,
                encode_path(&silo.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_quotas_update`]
    ///
    /// [`ClientSystemSilosExt::silo_quotas_update`]: super::ClientSystemSilosExt::silo_quotas_update
    #[derive(Debug, Clone)]
    pub struct SiloQuotasUpdate<'a> {
        client: &'a super::Client,
        silo: Result<types::NameOrId, String>,
        body: Result<types::builder::SiloQuotasUpdate, String>,
    }

    impl<'a> SiloQuotasUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo: Err("silo was not initialized".to_string()),
                body: Ok(types::builder::SiloQuotasUpdate::default()),
            }
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::SiloQuotasUpdate>,
            <V as std::convert::TryInto<types::SiloQuotasUpdate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `SiloQuotasUpdate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::SiloQuotasUpdate,
            ) -> types::builder::SiloQuotasUpdate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/system/silos/{silo}/quotas`
        pub async fn send(self) -> Result<ResponseValue<types::SiloQuotas>, Error<types::Error>> {
            let Self { client, silo, body } = self;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::SiloQuotasUpdate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/silos/{}/quotas",
                client.baseurl,
                encode_path(&silo.to_string()),
            );
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_user_list`]
    ///
    /// [`ClientSystemSilosExt::silo_user_list`]: super::ClientSystemSilosExt::silo_user_list
    #[derive(Debug, Clone)]
    pub struct SiloUserList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        silo: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> SiloUserList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                silo: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/users`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::UserResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                silo,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/users", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &silo {
                query.push(("silo", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/users`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::User, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                silo: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_user_view`]
    ///
    /// [`ClientSystemSilosExt::silo_user_view`]: super::ClientSystemSilosExt::silo_user_view
    #[derive(Debug, Clone)]
    pub struct SiloUserView<'a> {
        client: &'a super::Client,
        user_id: Result<uuid::Uuid, String>,
        silo: Result<types::NameOrId, String>,
    }

    impl<'a> SiloUserView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                user_id: Err("user_id was not initialized".to_string()),
                silo: Err("silo was not initialized".to_string()),
            }
        }

        pub fn user_id<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.user_id = value
                .try_into()
                .map_err(|_| "conversion to `uuid :: Uuid` for user_id failed".to_string());
            self
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/users/{user_id}`
        pub async fn send(self) -> Result<ResponseValue<types::User>, Error<types::Error>> {
            let Self {
                client,
                user_id,
                silo,
            } = self;
            let user_id = user_id.map_err(Error::InvalidRequest)?;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/users/{}",
                client.baseurl,
                encode_path(&user_id.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            query.push(("silo", silo.to_string()));
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::user_builtin_list`]
    ///
    /// [`ClientSystemSilosExt::user_builtin_list`]: super::ClientSystemSilosExt::user_builtin_list
    #[derive(Debug, Clone)]
    pub struct UserBuiltinList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::NameSortMode>, String>,
    }

    impl<'a> UserBuiltinList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/users-builtin`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::UserBuiltinResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/users-builtin", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/users-builtin`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::UserBuiltin, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemSilosExt::user_builtin_view`]
    ///
    /// [`ClientSystemSilosExt::user_builtin_view`]: super::ClientSystemSilosExt::user_builtin_view
    #[derive(Debug, Clone)]
    pub struct UserBuiltinView<'a> {
        client: &'a super::Client,
        user: Result<types::NameOrId, String>,
    }

    impl<'a> UserBuiltinView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                user: Err("user was not initialized".to_string()),
            }
        }

        pub fn user<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.user = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for user failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/users-builtin/{user}`
        pub async fn send(self) -> Result<ResponseValue<types::UserBuiltin>, Error<types::Error>> {
            let Self { client, user } = self;
            let user = user.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/users-builtin/{}",
                client.baseurl,
                encode_path(&user.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_utilization_list`]
    ///
    /// [`ClientSystemSilosExt::silo_utilization_list`]: super::ClientSystemSilosExt::silo_utilization_list
    #[derive(Debug, Clone)]
    pub struct SiloUtilizationList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> SiloUtilizationList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/utilization/silos`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloUtilizationResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/system/utilization/silos", client.baseurl,);
            let mut query = Vec::with_capacity(3usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/system/utilization/silos`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::SiloUtilization, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSystemSilosExt::silo_utilization_view`]
    ///
    /// [`ClientSystemSilosExt::silo_utilization_view`]: super::ClientSystemSilosExt::silo_utilization_view
    #[derive(Debug, Clone)]
    pub struct SiloUtilizationView<'a> {
        client: &'a super::Client,
        silo: Result<types::NameOrId, String>,
    }

    impl<'a> SiloUtilizationView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                silo: Err("silo was not initialized".to_string()),
            }
        }

        pub fn silo<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.silo = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for silo failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/system/utilization/silos/{silo}`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::SiloUtilization>, Error<types::Error>> {
            let Self { client, silo } = self;
            let silo = silo.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/system/utilization/silos/{}",
                client.baseurl,
                encode_path(&silo.to_string()),
            );
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientSilosExt::user_list`]
    ///
    /// [`ClientSilosExt::user_list`]: super::ClientSilosExt::user_list
    #[derive(Debug, Clone)]
    pub struct UserList<'a> {
        client: &'a super::Client,
        group: Result<Option<uuid::Uuid>, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        sort_by: Result<Option<types::IdSortMode>, String>,
    }

    impl<'a> UserList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                group: Ok(None),
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn group<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<uuid::Uuid>,
        {
            self.group = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `uuid :: Uuid` for group failed".to_string());
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::IdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `IdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/users`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::UserResultsPage>, Error<types::Error>> {
            let Self {
                client,
                group,
                limit,
                page_token,
                sort_by,
            } = self;
            let group = group.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/users", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &group {
                query.push(("group", v.to_string()));
            }
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/users`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::User, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                group: Ok(None),
                limit: Ok(None),
                page_token: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientSilosExt::utilization_view`]
    ///
    /// [`ClientSilosExt::utilization_view`]: super::ClientSilosExt::utilization_view
    #[derive(Debug, Clone)]
    pub struct UtilizationView<'a> {
        client: &'a super::Client,
    }

    impl<'a> UtilizationView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self { client: client }
        }

        /// Sends a `GET` request to `/v1/utilization`
        pub async fn send(self) -> Result<ResponseValue<types::Utilization>, Error<types::Error>> {
            let Self { client } = self;
            let url = format!("{}/v1/utilization", client.baseurl,);
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_firewall_rules_view`]
    ///
    /// [`ClientVpcsExt::vpc_firewall_rules_view`]: super::ClientVpcsExt::vpc_firewall_rules_view
    #[derive(Debug, Clone)]
    pub struct VpcFirewallRulesView<'a> {
        client: &'a super::Client,
        project: Result<Option<types::NameOrId>, String>,
        vpc: Result<types::NameOrId, String>,
    }

    impl<'a> VpcFirewallRulesView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Ok(None),
                vpc: Err("vpc was not initialized".to_string()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/vpc-firewall-rules`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::VpcFirewallRules>, Error<types::Error>> {
            let Self {
                client,
                project,
                vpc,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/vpc-firewall-rules", client.baseurl,);
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            query.push(("vpc", vpc.to_string()));
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_firewall_rules_update`]
    ///
    /// [`ClientVpcsExt::vpc_firewall_rules_update`]: super::ClientVpcsExt::vpc_firewall_rules_update
    #[derive(Debug, Clone)]
    pub struct VpcFirewallRulesUpdate<'a> {
        client: &'a super::Client,
        project: Result<Option<types::NameOrId>, String>,
        vpc: Result<types::NameOrId, String>,
        body: Result<types::builder::VpcFirewallRuleUpdateParams, String>,
    }

    impl<'a> VpcFirewallRulesUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Ok(None),
                vpc: Err("vpc was not initialized".to_string()),
                body: Ok(types::builder::VpcFirewallRuleUpdateParams::default()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::VpcFirewallRuleUpdateParams>,
            <V as std::convert::TryInto<types::VpcFirewallRuleUpdateParams>>::Error:
                std::fmt::Display,
        {
            self.body = value.try_into().map(From::from).map_err(|s| {
                format!(
                    "conversion to `VpcFirewallRuleUpdateParams` for body failed: {}",
                    s
                )
            });
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(
                types::builder::VpcFirewallRuleUpdateParams,
            ) -> types::builder::VpcFirewallRuleUpdateParams,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/vpc-firewall-rules`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::VpcFirewallRules>, Error<types::Error>> {
            let Self {
                client,
                project,
                vpc,
                body,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::VpcFirewallRuleUpdateParams>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/vpc-firewall-rules", client.baseurl,);
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            query.push(("vpc", vpc.to_string()));
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_subnet_list`]
    ///
    /// [`ClientVpcsExt::vpc_subnet_list`]: super::ClientVpcsExt::vpc_subnet_list
    #[derive(Debug, Clone)]
    pub struct VpcSubnetList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
        vpc: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> VpcSubnetList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                vpc: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/vpc-subnets`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::VpcSubnetResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                project,
                sort_by,
                vpc,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/vpc-subnets", client.baseurl,);
            let mut query = Vec::with_capacity(5usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            if let Some(v) = &vpc {
                query.push(("vpc", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/vpc-subnets`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::VpcSubnet, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                vpc: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_subnet_create`]
    ///
    /// [`ClientVpcsExt::vpc_subnet_create`]: super::ClientVpcsExt::vpc_subnet_create
    #[derive(Debug, Clone)]
    pub struct VpcSubnetCreate<'a> {
        client: &'a super::Client,
        project: Result<Option<types::NameOrId>, String>,
        vpc: Result<types::NameOrId, String>,
        body: Result<types::builder::VpcSubnetCreate, String>,
    }

    impl<'a> VpcSubnetCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Ok(None),
                vpc: Err("vpc was not initialized".to_string()),
                body: Ok(types::builder::VpcSubnetCreate::default()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::VpcSubnetCreate>,
            <V as std::convert::TryInto<types::VpcSubnetCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `VpcSubnetCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::VpcSubnetCreate) -> types::builder::VpcSubnetCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/vpc-subnets`
        pub async fn send(self) -> Result<ResponseValue<types::VpcSubnet>, Error<types::Error>> {
            let Self {
                client,
                project,
                vpc,
                body,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::VpcSubnetCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/vpc-subnets", client.baseurl,);
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            query.push(("vpc", vpc.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_subnet_view`]
    ///
    /// [`ClientVpcsExt::vpc_subnet_view`]: super::ClientVpcsExt::vpc_subnet_view
    #[derive(Debug, Clone)]
    pub struct VpcSubnetView<'a> {
        client: &'a super::Client,
        subnet: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
        vpc: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> VpcSubnetView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                subnet: Err("subnet was not initialized".to_string()),
                project: Ok(None),
                vpc: Ok(None),
            }
        }

        pub fn subnet<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.subnet = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for subnet failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/vpc-subnets/{subnet}`
        pub async fn send(self) -> Result<ResponseValue<types::VpcSubnet>, Error<types::Error>> {
            let Self {
                client,
                subnet,
                project,
                vpc,
            } = self;
            let subnet = subnet.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/vpc-subnets/{}",
                client.baseurl,
                encode_path(&subnet.to_string()),
            );
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &vpc {
                query.push(("vpc", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_subnet_update`]
    ///
    /// [`ClientVpcsExt::vpc_subnet_update`]: super::ClientVpcsExt::vpc_subnet_update
    #[derive(Debug, Clone)]
    pub struct VpcSubnetUpdate<'a> {
        client: &'a super::Client,
        subnet: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
        vpc: Result<Option<types::NameOrId>, String>,
        body: Result<types::builder::VpcSubnetUpdate, String>,
    }

    impl<'a> VpcSubnetUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                subnet: Err("subnet was not initialized".to_string()),
                project: Ok(None),
                vpc: Ok(None),
                body: Ok(types::builder::VpcSubnetUpdate::default()),
            }
        }

        pub fn subnet<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.subnet = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for subnet failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::VpcSubnetUpdate>,
            <V as std::convert::TryInto<types::VpcSubnetUpdate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `VpcSubnetUpdate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::VpcSubnetUpdate) -> types::builder::VpcSubnetUpdate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/vpc-subnets/{subnet}`
        pub async fn send(self) -> Result<ResponseValue<types::VpcSubnet>, Error<types::Error>> {
            let Self {
                client,
                subnet,
                project,
                vpc,
                body,
            } = self;
            let subnet = subnet.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::VpcSubnetUpdate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/vpc-subnets/{}",
                client.baseurl,
                encode_path(&subnet.to_string()),
            );
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &vpc {
                query.push(("vpc", v.to_string()));
            }
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_subnet_delete`]
    ///
    /// [`ClientVpcsExt::vpc_subnet_delete`]: super::ClientVpcsExt::vpc_subnet_delete
    #[derive(Debug, Clone)]
    pub struct VpcSubnetDelete<'a> {
        client: &'a super::Client,
        subnet: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
        vpc: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> VpcSubnetDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                subnet: Err("subnet was not initialized".to_string()),
                project: Ok(None),
                vpc: Ok(None),
            }
        }

        pub fn subnet<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.subnet = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for subnet failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/vpc-subnets/{subnet}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                subnet,
                project,
                vpc,
            } = self;
            let subnet = subnet.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/vpc-subnets/{}",
                client.baseurl,
                encode_path(&subnet.to_string()),
            );
            let mut query = Vec::with_capacity(2usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &vpc {
                query.push(("vpc", v.to_string()));
            }
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_subnet_list_network_interfaces`]
    ///
    /// [`ClientVpcsExt::vpc_subnet_list_network_interfaces`]: super::ClientVpcsExt::vpc_subnet_list_network_interfaces
    #[derive(Debug, Clone)]
    pub struct VpcSubnetListNetworkInterfaces<'a> {
        client: &'a super::Client,
        subnet: Result<types::NameOrId, String>,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
        vpc: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> VpcSubnetListNetworkInterfaces<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                subnet: Err("subnet was not initialized".to_string()),
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                vpc: Ok(None),
            }
        }

        pub fn subnet<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.subnet = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for subnet failed".to_string());
            self
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        /// Sends a `GET` request to
        /// `/v1/vpc-subnets/{subnet}/network-interfaces`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::InstanceNetworkInterfaceResultsPage>, Error<types::Error>>
        {
            let Self {
                client,
                subnet,
                limit,
                page_token,
                project,
                sort_by,
                vpc,
            } = self;
            let subnet = subnet.map_err(Error::InvalidRequest)?;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/vpc-subnets/{}/network-interfaces",
                client.baseurl,
                encode_path(&subnet.to_string()),
            );
            let mut query = Vec::with_capacity(5usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            if let Some(v) = &vpc {
                query.push(("vpc", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to
        /// `/v1/vpc-subnets/{subnet}/network-interfaces`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::InstanceNetworkInterface, Error<types::Error>>>
               + Unpin
               + 'a {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                vpc: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_list`]
    ///
    /// [`ClientVpcsExt::vpc_list`]: super::ClientVpcsExt::vpc_list
    #[derive(Debug, Clone)]
    pub struct VpcList<'a> {
        client: &'a super::Client,
        limit: Result<Option<std::num::NonZeroU32>, String>,
        page_token: Result<Option<String>, String>,
        project: Result<Option<types::NameOrId>, String>,
        sort_by: Result<Option<types::NameOrIdSortMode>, String>,
    }

    impl<'a> VpcList<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
            }
        }

        pub fn limit<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<std::num::NonZeroU32>,
        {
            self.limit = value.try_into().map(Some).map_err(|_| {
                "conversion to `std :: num :: NonZeroU32` for limit failed".to_string()
            });
            self
        }

        pub fn page_token<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<String>,
        {
            self.page_token = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `String` for page_token failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn sort_by<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrIdSortMode>,
        {
            self.sort_by = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrIdSortMode` for sort_by failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/vpcs`
        pub async fn send(
            self,
        ) -> Result<ResponseValue<types::VpcResultsPage>, Error<types::Error>> {
            let Self {
                client,
                limit,
                page_token,
                project,
                sort_by,
            } = self;
            let limit = limit.map_err(Error::InvalidRequest)?;
            let page_token = page_token.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let sort_by = sort_by.map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/vpcs", client.baseurl,);
            let mut query = Vec::with_capacity(4usize);
            if let Some(v) = &limit {
                query.push(("limit", v.to_string()));
            }
            if let Some(v) = &page_token {
                query.push(("page_token", v.to_string()));
            }
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            if let Some(v) = &sort_by {
                query.push(("sort_by", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }

        /// Streams `GET` requests to `/v1/vpcs`
        pub fn stream(
            self,
        ) -> impl futures::Stream<Item = Result<types::Vpc, Error<types::Error>>> + Unpin + 'a
        {
            use futures::StreamExt;
            use futures::TryFutureExt;
            use futures::TryStreamExt;
            let limit = self
                .limit
                .clone()
                .ok()
                .flatten()
                .and_then(|x| std::num::NonZeroUsize::try_from(x).ok())
                .map(std::num::NonZeroUsize::get)
                .unwrap_or(usize::MAX);
            let next = Self {
                limit: Ok(None),
                page_token: Ok(None),
                project: Ok(None),
                sort_by: Ok(None),
                ..self.clone()
            };
            self.send()
                .map_ok(move |page| {
                    let page = page.into_inner();
                    let first = futures::stream::iter(page.items).map(Ok);
                    let rest = futures::stream::try_unfold(
                        (page.next_page, next),
                        |(next_page, next)| async {
                            if next_page.is_none() {
                                Ok(None)
                            } else {
                                Self {
                                    page_token: Ok(next_page),
                                    ..next.clone()
                                }
                                .send()
                                .map_ok(|page| {
                                    let page = page.into_inner();
                                    Some((
                                        futures::stream::iter(page.items).map(Ok),
                                        (page.next_page, next),
                                    ))
                                })
                                .await
                            }
                        },
                    )
                    .try_flatten();
                    first.chain(rest)
                })
                .try_flatten_stream()
                .take(limit)
                .boxed()
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_create`]
    ///
    /// [`ClientVpcsExt::vpc_create`]: super::ClientVpcsExt::vpc_create
    #[derive(Debug, Clone)]
    pub struct VpcCreate<'a> {
        client: &'a super::Client,
        project: Result<types::NameOrId, String>,
        body: Result<types::builder::VpcCreate, String>,
    }

    impl<'a> VpcCreate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                project: Err("project was not initialized".to_string()),
                body: Ok(types::builder::VpcCreate::default()),
            }
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::VpcCreate>,
            <V as std::convert::TryInto<types::VpcCreate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `VpcCreate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::VpcCreate) -> types::builder::VpcCreate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `POST` request to `/v1/vpcs`
        pub async fn send(self) -> Result<ResponseValue<types::Vpc>, Error<types::Error>> {
            let Self {
                client,
                project,
                body,
            } = self;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::VpcCreate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!("{}/v1/vpcs", client.baseurl,);
            let mut query = Vec::with_capacity(1usize);
            query.push(("project", project.to_string()));
            let request = client
                .client
                .post(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                201u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_view`]
    ///
    /// [`ClientVpcsExt::vpc_view`]: super::ClientVpcsExt::vpc_view
    #[derive(Debug, Clone)]
    pub struct VpcView<'a> {
        client: &'a super::Client,
        vpc: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> VpcView<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                vpc: Err("vpc was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `GET` request to `/v1/vpcs/{vpc}`
        pub async fn send(self) -> Result<ResponseValue<types::Vpc>, Error<types::Error>> {
            let Self {
                client,
                vpc,
                project,
            } = self;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/vpcs/{}",
                client.baseurl,
                encode_path(&vpc.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .get(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_update`]
    ///
    /// [`ClientVpcsExt::vpc_update`]: super::ClientVpcsExt::vpc_update
    #[derive(Debug, Clone)]
    pub struct VpcUpdate<'a> {
        client: &'a super::Client,
        vpc: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
        body: Result<types::builder::VpcUpdate, String>,
    }

    impl<'a> VpcUpdate<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                vpc: Err("vpc was not initialized".to_string()),
                project: Ok(None),
                body: Ok(types::builder::VpcUpdate::default()),
            }
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        pub fn body<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::VpcUpdate>,
            <V as std::convert::TryInto<types::VpcUpdate>>::Error: std::fmt::Display,
        {
            self.body = value
                .try_into()
                .map(From::from)
                .map_err(|s| format!("conversion to `VpcUpdate` for body failed: {}", s));
            self
        }

        pub fn body_map<F>(mut self, f: F) -> Self
        where
            F: std::ops::FnOnce(types::builder::VpcUpdate) -> types::builder::VpcUpdate,
        {
            self.body = self.body.map(f);
            self
        }

        /// Sends a `PUT` request to `/v1/vpcs/{vpc}`
        pub async fn send(self) -> Result<ResponseValue<types::Vpc>, Error<types::Error>> {
            let Self {
                client,
                vpc,
                project,
                body,
            } = self;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let body = body
                .and_then(std::convert::TryInto::<types::VpcUpdate>::try_into)
                .map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/vpcs/{}",
                client.baseurl,
                encode_path(&vpc.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .put(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .json(&body)
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                200u16 => ResponseValue::from_response(response).await,
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }

    /// Builder for [`ClientVpcsExt::vpc_delete`]
    ///
    /// [`ClientVpcsExt::vpc_delete`]: super::ClientVpcsExt::vpc_delete
    #[derive(Debug, Clone)]
    pub struct VpcDelete<'a> {
        client: &'a super::Client,
        vpc: Result<types::NameOrId, String>,
        project: Result<Option<types::NameOrId>, String>,
    }

    impl<'a> VpcDelete<'a> {
        pub fn new(client: &'a super::Client) -> Self {
            Self {
                client: client,
                vpc: Err("vpc was not initialized".to_string()),
                project: Ok(None),
            }
        }

        pub fn vpc<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.vpc = value
                .try_into()
                .map_err(|_| "conversion to `NameOrId` for vpc failed".to_string());
            self
        }

        pub fn project<V>(mut self, value: V) -> Self
        where
            V: std::convert::TryInto<types::NameOrId>,
        {
            self.project = value
                .try_into()
                .map(Some)
                .map_err(|_| "conversion to `NameOrId` for project failed".to_string());
            self
        }

        /// Sends a `DELETE` request to `/v1/vpcs/{vpc}`
        pub async fn send(self) -> Result<ResponseValue<()>, Error<types::Error>> {
            let Self {
                client,
                vpc,
                project,
            } = self;
            let vpc = vpc.map_err(Error::InvalidRequest)?;
            let project = project.map_err(Error::InvalidRequest)?;
            let url = format!(
                "{}/v1/vpcs/{}",
                client.baseurl,
                encode_path(&vpc.to_string()),
            );
            let mut query = Vec::with_capacity(1usize);
            if let Some(v) = &project {
                query.push(("project", v.to_string()));
            }
            let request = client
                .client
                .delete(url)
                .header(
                    reqwest::header::ACCEPT,
                    reqwest::header::HeaderValue::from_static("application/json"),
                )
                .query(&query)
                .build()?;
            let result = client.client.execute(request).await;
            let response = result?;
            match response.status().as_u16() {
                204u16 => Ok(ResponseValue::empty(response)),
                400u16..=499u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                500u16..=599u16 => Err(Error::ErrorResponse(
                    ResponseValue::from_response(response).await?,
                )),
                _ => Err(Error::UnexpectedResponse(response)),
            }
        }
    }
}

pub mod prelude {
    pub use super::Client;
    pub use super::ClientDisksExt;
    pub use super::ClientFloatingIpsExt;
    pub use super::ClientHiddenExt;
    pub use super::ClientImagesExt;
    pub use super::ClientInstancesExt;
    pub use super::ClientLoginExt;
    pub use super::ClientMetricsExt;
    pub use super::ClientPolicyExt;
    pub use super::ClientProjectsExt;
    pub use super::ClientRolesExt;
    pub use super::ClientSessionExt;
    pub use super::ClientSilosExt;
    pub use super::ClientSnapshotsExt;
    pub use super::ClientSystemHardwareExt;
    pub use super::ClientSystemMetricsExt;
    pub use super::ClientSystemNetworkingExt;
    pub use super::ClientSystemSilosExt;
    pub use super::ClientSystemStatusExt;
    pub use super::ClientVpcsExt;
}
