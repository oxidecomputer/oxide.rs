name: Integration

on:
  workflow_dispatch:
    inputs:
      reflector_access_token:
        description: Access token for use in authenticating as the Reflector bot
        type: string
      reflector_user_id:
        description: User id of the Reflector bot
        type: string

permissions:
  contents: write
  pull-requests: write
  # This is a workaround for the GitHub cli requiring excessive permissions when updating a pull
  # request (https://github.com/cli/cli/discussions/5307)
  repository-projects: read

jobs:
  generate-update:
    concurrency:
      group: integration
      cancel-in-progress: true
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.0
        with:
          token: ${{ inputs.reflector_access_token }}
          ref: main
      - name: Install nightly rustfmt
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
          default: false
      - name: Report cargo version
        run: cargo --version
      - name: Report rustfmt version
        run: cargo fmt -- --version

      - name: Update schema
        run: |
          curl -s https://raw.githubusercontent.com/oxidecomputer/omicron/main/openapi/nexus.json --output oxide.json

          SHA=$(curl -s "https://api.github.com/repos/oxidecomputer/omicron/commits?path=openapi/nexus.json&per_page=1" | jq -r '.[].sha')
          echo "full=${SHA}" >> $GITHUB_OUTPUT
          echo "short=${SHA:0:8}" >> $GITHUB_OUTPUT
        id: schema_sha

      - name: Update progenitor
        run: |
          FROM=$(cargo tree -i progenitor | grep -Eo '#([0-9a-z]+)')
          cargo update -p progenitor
          cargo update -p progenitor-client
          TO=$(cargo tree -i progenitor | grep -Eo '#([0-9a-z]+)')

          echo "from=${FROM:1}" >> $GITHUB_OUTPUT
          echo "to=${TO:1}" >> $GITHUB_OUTPUT
        id: progenitor_versions

      - name: Rebuild client
        run: |
          cargo run -p xtask generate

      # Tests are allowed to fail so that a partial PR can at least be generated. This is likely to
      # occur when updating the oxide.json schema file and new types that are not yet handled by
      # the CLI are introduced. The result of this should be a PR that has the updated schema and
      # corresponding generated code that will fail due to compilation errors during test.
      - name: Generate docs
        continue-on-error: true
        run: |
          EXPECTORATE=overwrite cargo test

      - name: Report changes
        run: git status

      - name: Commit changes
        run: |
          git config --local user.name "oxide-reflector-bot[bot]"
          git config --local user.email "${{ inputs.reflector_user_id }}+oxide-reflector-bot[bot]@users.noreply.github.com"

          # Detect specific changes that will be committed back
          git diff --quiet cli/docs/cli.json || docsUpdate=$?
          echo "docs=${docsUpdate}" >> $GITHUB_OUTPUT

          git add .
          git commit -m "Rebuilt with latest dependency updates" || echo "Nothing to commit"
          git push origin main:integration --force
          # Reset back to the original main
          git reset --hard origin/main
        id: committed

      - name: Update pull request
        env:
          GH_TOKEN: ${{ inputs.reflector_access_token }}
        run: |
          git checkout integration
          git pull origin integration

          mainToIntegration="$(git rev-list --count main..integration)"
          integrationToMain="$(git rev-list --count integration..main)"

          prUrl=$(gh search prs --head integration --base main --state open --repo $GITHUB_REPOSITORY --json url --jq .[].url)

          # Sleep to help prevent GitHub cli from tripping over itself
          sleep 2

          prNumber=$(gh search prs --head integration --base main --state open --repo $GITHUB_REPOSITORY --json number --jq .[].number)

          sleep 2

          progenitorDiffUrl=""

          if [ "${{ steps.progenitor_versions.outputs.from }}" != "${{ steps.progenitor_versions.outputs.to }}" ]
          then
            progenitorDiffUrl="https://github.com/oxidecomputer/progenitor/compare/${{ steps.progenitor_versions.outputs.from }}...${{ steps.progenitor_versions.outputs.to }}"
          fi

          if [ "$mainToIntegration" -eq 0 -a "$integrationToMain" -eq 0 ]
          then
            echo "Main is up to date with integration. No pull request needed"

            if [ "$prNumber" != "" ]
            then
              echo "Closing existing PR"
              gh pr close $prNumber
            fi
          elif [ "$mainToIntegration" -gt 0 ]
          then
            echo "Main is behind integration ($mainToIntegration)"

            title="Bump schema.json to omicron:${{ steps.schema_sha.outputs.short }}"

            echo "Integration dependency update" > body
            echo "" >> body

            if [ "$progenitorDiffUrl" != "" ]
            then
              title+=" and progenitor to ${{ steps.progenitor_versions.outputs.to }}"
              echo "Bump [progenitor](https://github.com/oxidecomputer/progenitor) from \`${{ steps.progenitor_versions.outputs.from }}\` to \`${{ steps.progenitor_versions.outputs.to }}\`" >> body
              echo "Changes: ${progenitorDiffUrl}" >> body
              echo "" >> body
            fi

            schemaLabel="nexus.json \`${{ steps.schema_sha.outputs.short }}\`"
            schemaUrl="https://github.com/oxidecomputer/omicron/blob/${{ steps.schema_sha.outputs.full }}/openapi/nexus.json"

            echo "Generated code against [$schemaLabel]($schemaUrl)" >> body
            echo "" >> body

            if [ ${{ steps.committed.outputs.docs }} ]
            then
              echo "CLI docs updated against the updated CLI" >> body
              echo "" >> body
            fi

            if [ -z "$prNumber" ]
            then
              gh pr create -B main -H integration --title "$title" --body-file body
            else
              echo "PR already exists: ($prNumber) $prUrl . Updating..."
              gh pr edit "$prNumber" --title "$title" --body-file body
            fi
          else
            echo "Integration is behind main ($integrationToMain). This is likely an error"
            exit 1
          fi
